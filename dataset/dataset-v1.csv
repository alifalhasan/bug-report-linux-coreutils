id,reporter,report-time,last-modified,status,priority,severity,product,component,summary/subject/title,class,expected result,observed/actual result,reproducible,steps to reproduce,input,llama,qwen,qwen-coder,link,comments
2343998,jstephen,2025-02-05T17:04:00Z,2025-02-06T13:14:54Z,ASSIGNED,unspecified,low,Fedora,coreutils,who -m prints no output,normal,"# who am i
root     pts/0        2025-02-05 11:35 (10.22.64.138)","# who -m
# ",Always,1. run 'who -m',$ who -m,"who -m 
who am i",who -m,"who -m
who am i",https://bugzilla.redhat.com/show_bug.cgi?id=2343998,
2296026,Bruce Jerrick,2024-07-05T20:36:07Z,2024-11-21T10:43:32Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,sort -V' order differs from 'sort' when there are no numerics,normal,"1. a-xyz
    abc-xyz

2. a-xyz
    abc-xyz","1. a-xyz
    abc-xyz

2. abc-xyz
    a-xyz",Always,"- printf ""a-xyz\nabc-xyz\n"" | sort
- printf ""a-xyz\nabc-xyz\n"" | sort -V","$ printf """"a-xyz\nabc-xyz\n"""" | sort
$ printf """"a-xyz\nabc-xyz\n"""" | sort -V","```bash
printf ""a-xyz\nabc-xyz\n"" | sort
printf ""a-xyz\nabc-xyz\n"" | sort -V
```","printf ""a-xyz\nabc-xyz\n"" | sort -V","printf ""a-xyz\nabc-xyz\n"" | sort -V",https://bugzilla.redhat.com/show_bug.cgi?id=2296026,
2325167,Florian Weimer,2024-11-11T11:29:27Z,2024-11-20T16:21:57Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils: nproc ignores affinity mask on machines with more than 1024 CPUs,normal,nproc should correctly return the number of available CPUs,"Fails on machines with >1024 CPUs, falling back to sysconf, which gives incorrect values",Always,Run nproc on a system with >1024 CPUs and observe incorrect output due to sched_getaffinity failure,,"nproc
sched_getaffinity -p $$ > /dev/null && echo ""Expected failure didn't occur"" || true 
getconf _NPROCESSORS_ONLN 
(While the first two commands are more about demonstrating system calls and behavior, a definitive reproducing test case would likely involve writing a C program that uses sched_getaffinity with varying sizes of CPU sets to demonstrate the issue. However, based on provided information, we focus on nproc as the primary command related to the bug description.)",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2325167,
2311888,Lukas Ruzicka,2024-09-12T10:03:15Z,2024-09-12T11:45:23Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2311888,
2307847,Allison Karlitskaya,2024-08-26T09:16:20Z,2024-08-27T14:19:44Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils-9.5-8.fc41 no longer lists Cockpit logins in `who`,normal,The session should be listed in `who` (as it was with coreutils-9.5-7).,The 'web console' session is not listed in the output of who.,Always,"- Install cockpit, login to a session
- run 'who'",,"dnf install cockpit
cockpit-session --login
who","sudo dnf install cockpit
systemctl start cockpit
systemctl enable cockpit.socket
who","Install cockpit, login to a session
run `who`",https://bugzilla.redhat.com/show_bug.cgi?id=2307847,
2296201,Sohum M,2024-07-07T19:15:05Z,2024-07-18T04:06:07Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,fold exit code is zero for non-existent file,normal,"If any file fails to open, the return code should be an error",The return code is successful,Always,"1.
  $ fold badfile
  fold: badfile: No such file or directory
  $ echo ""$?""
  0              # <<< should be non-zero ","$ fold badfile
$ echo $?
","```bash
fold badfile
echo ""$?""
```","fold badfile
echo ""$?""","fold badfile  
echo ""$?""",https://bugzilla.redhat.com/show_bug.cgi?id=2296201,
1349579,Zing,2016-06-23T17:53:15Z,2024-07-08T16:15:42Z,CLOSED RAWHIDE,unspecified,low,Fedora,coreutils,"new DIR_COLOR* files say ""COLOR=none"" ignored... not sure if true or false?",normal,The DIR_COLORS* config files should clearly state how to disable colorization for ls,"The files say ""COLOR is recognized but ignored,"" causing confusion, while COLOR=none still works but is not officially recommended",Always,"Set COLOR=none in DIR_COLORS, run ls, and observe if colorization is disabled; check the config file wording for clarity",None,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1349579,
492369,Oscar Ferraro Nobile,2009-03-26T16:28:34Z,2024-06-16T08:39:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"problem assigning the special permissions (suid, sgid and sticky), isn't possible clear its ussing the numeric method",normal,,,,,"$ chmod 4755 filename
$ ls -l filename
$ chmod 0755 filename
$ ls -l filename
","```bash
touch file
chmod 4755 file
ls -l file
chmod 0755 file
ls -l file
chmod u-s file
ls -l file
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=492369,
2265756,xmm.user,2024-02-23T23:56:26Z,2024-05-31T09:16:32Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __libc_read(): cut killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2265756,
1346074,Pavel Raiskup,2016-06-13T20:57:54Z,2024-03-21T08:07:03Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,"RFE: chmod, add missing -L/-H/-h option to follow symbolic links",,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1346074,
2269948,Roberto,2024-03-17T14:36:10Z,2024-03-18T13:26:05Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"date command returns invalid date for 1976, May 30",normal,"dom 30 mag 1976, 00:00:00, CET","/usr/bin/date: data ""30 May 1976"" non valida",Always,"/usr/bin/date --date ""1976-05-30""","$ /usr/bin/date --date ""1976-05-30""","/usr/bin/date --date ""1976-05-30"" 
/usr/bin/date --date ""30 May 1976""","/usr/bin/date --date ""1976-05-30""","/usr/bin/date --date ""1976-05-30""
/usr/bin/date --date ""30 May 1976""",https://bugzilla.redhat.com/show_bug.cgi?id=2269948,
2126206,Chung,2022-09-12T20:41:04Z,2024-01-30T09:44:06Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -i/p is broken in latest version of RAWHIDE,normal,"$ uname -i
x86_64
$ $ uname -p
x86_64","$ uname -i
unknown
$ uname -p
unknown",Always,"- Install RAWHIDE
- Run uname -i or -p","$ uname -i
$ uname -p","uname -i
uname -p","uname -i
uname -p","uname -i
uname -p",https://bugzilla.redhat.com/show_bug.cgi?id=2126206,
2261852,IBM Bug Proxy,2024-01-30T05:40:17Z,2024-01-30T09:36:29Z,CLOSED DUPLICATE,unspecified,medium,Fedora,coreutils,uname --processor is broken from Fedora38 and above!,normal,ppc64le,unknown,Always,1) uname --processor,$ uname --processor,uname --processor,uname --processor,uname --processor,https://bugzilla.redhat.com/show_bug.cgi?id=2261852,
2258913,PÃ¡draig Brady,2024-01-18T00:35:48Z,2024-01-23T00:58:31Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,heap overflow in split --line-bytes with very long lines [fedora-all],normal,split -C should correctly handle large input sizes without causing memory corruption,"A heap overflow occurs when processing large inputs, potentially leading to a crash or security vulnerability",Always,"{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in  
split -C 131072 ---io=131072 in","{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in  
split -C 131072 ---io=131072 in","```bash
{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in
split -C 131072 ---output=io=131072 in
```","{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in
split -C 131072 ---io=131072 in","{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in
split -C 131072 --io=131072 in",https://bugzilla.redhat.com/show_bug.cgi?id=2258913,
2256513,Edgar Hoch,2024-01-02T20:18:59Z,2024-01-03T08:27:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,coreutils no longer provides /bin/ln,normal,,,Always,,,"rpm -q coreutils
rpm -ql coreutils | grep /bin/ln
dnf install gskssl64",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2256513,
2248503,Harald Reindl,2023-11-07T12:26:29Z,2023-11-07T12:52:36Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,uname -i don't work,normal,x86_64,breaking scripts,Always,uname -i,$ uname -i,uname -i,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2248503,
2160675,Ondrej,2023-01-13T09:36:16Z,2023-09-21T00:15:45Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,[RFE] cp -p should copy NFSv4 acls,,,,Never,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2160675,
1121021,vikram goyal,2014-07-18T08:04:22Z,2023-09-14T02:11:42Z,CLOSED INSUFFICIENT_DATA,unspecified,unspecified,Fedora,coreutils,coreutils-8.21-21.fc20.x86_64 df (executed by root) does not show fuse.sshfs mount,normal,command 'mount' as a normal user & as root shows the fuse mount in output,"[vikram@mail2 ~]$ df
Filesystem                1K-blocks      Used Available Use% Mounted on
/dev/sdb6                 153942744  66849904  84503912  45% /
devtmpfs                    1520368         0   1520368   0% /dev
tmpfs                       1527604     99060   1428544   7% /dev/shm
tmpfs                       1527604       932   1526672   1% /run
tmpfs                       1527604         0   1527604   0% /sys/fs/cgroup
tmpfs                       1527604       708   1526896   1% /tmp
/dev/sda1                   1515376    172140   1248212  13% /boot
/dev/dm-0                 330327632 240421328  87183640  74% /home/vikram
root.XXX.XXX:/root  51606140   3660076  45324624   8% /home/vikram/someremoteloc


[root@mail2 ~]# df
Filesystem                1K-blocks      Used Available Use% Mounted on
/dev/sdb6                 153942744  66850280  84503560  45% /
devtmpfs                    1520368         0   1520368   0% /dev
tmpfs                       1527604     99060   1428544   7% /dev/shm
tmpfs                       1527604       932   1526672   1% /run
tmpfs                       1527604         0   1527604   0% /sys/fs/cgroup
tmpfs                       1527604       708   1526896   1% /tmp
/dev/sda1                   1515376    172140   1248212  13% /boot
/dev/dm-0                 330327632 240421552  87183456  74% /home/vikram

[root@mail2 ~]# uptime
 13:20:10 up 7 days, 19:14, 15 users,  load average: 0.21, 0.18, 0.48

[root@mail2 ~]# uname -a
Linux mail2.xxx 3.15.3-200.fc20.x86_64 #1 SMP Tue Jul 1 16:18:00 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux

[root@mail2 ~]# rpm -qf `which sshfs`
fuse-sshfs-2.4-5.fc20.x86_64",,"Mount a remote location in home dir/dir through sshfs as a normal user
execute df as root
excute df as the same uaer which mounted the remote location.",,"```bash
sshfs user@remotehost:/path/to/remote/location /home/user/local/mount/point
sudo df
df
```
Note: Replace `user`, `remotehost`, `/path/to/remote/location`, and `/home/user/local/mount/point` with actual values.","sshfs user@remote:/path /home/user/mountpoint
sudo df
df","sshfs user@remotehost:/path/to/remote /home/user/someremoteloc  
df  
sudo df  
umount /home/user/someremoteloc",https://bugzilla.redhat.com/show_bug.cgi?id=1121021,
2236321,Ian Laurie,2023-08-30T21:47:26Z,2023-09-05T12:41:28Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils-9.4 reverts an undesirable change to the -v option that landed in coreutils-9.3,normal,"-v option in cp and mv should behave as it did before coreutils 9.3, providing consistent verbosity","In coreutils 9.3, cp -v and mv -v started skipping messages for files not copied due to -i or -u, breaking automation scripts",Always,Use cp -v -u or mv -v -u on coreutils 9.3,"$ cp -v -u <source> <destination>
$ mv -v -u <source> <destination>
","cp -u -v file1 file2
mv -i -v file3 file4 
cp -u -v --debug file1 file2
mv -i -v --debug file3 file4",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2236321,
2236739,lnie,2023-09-01T12:34:58Z,2023-09-01T12:40:36Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,sleep 50,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2236739,
2208048,Ben Woodard,2023-05-17T19:29:53Z,2023-05-17T20:28:32Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -i returns unknown,normal,x86_64 (or whatever the arch is),unknown,Always,"$ rpm -q coreutils
$ uname -i","$ rpm -q coreutils
$ uname -i",uname -m,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2208048,
2203350,Adam Williamson,2023-05-12T04:42:08Z,2023-05-14T15:29:17Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"uname -p on Fedora 38+ says ""unknown""",normal,It should say something...more useful,"It says ""unknown""",Always,Run `uname -p`,$ uname -p,uname -p,uname -p,uname -p,https://bugzilla.redhat.com/show_bug.cgi?id=2203350,
2189656,Tom Horsley,2023-04-25T20:16:52Z,2023-04-27T07:05:09Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"uname -p now returns ""unknown"" always returned ""x86_64"" previously",normal,x86_64,unknown,Always,uname -p,$ uname -p,uname -p,uname -p,uname -p,https://bugzilla.redhat.com/show_bug.cgi?id=2189656,
2188689,Dennis Gilmore,2023-04-21T16:37:56Z,2023-04-21T20:29:59Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,regression in uname -i from Fedora 37 to Fedora 38,normal,aarch64,unknown,Always,uname -i,$ uname -i,"rpm -q coreutils
uname -i",uname -i,None,https://bugzilla.redhat.com/show_bug.cgi?id=2188689,
1646701,Hin-Tak Leung,2018-11-05T21:08:15Z,2023-04-12T07:06:31Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,nothing provides /bin/basename needed by AdobeReader_enu-9.5.5-1.i486,normal,,"- nothing provides libidn.so.11 needed by AdobeReader_enu-9.5.5-1.i486
- nothing provides /bin/basename needed by AdobeReader_enu-9.5.5-1.i486",Always,Try to install adobe acrobat reader,$ sudo dnf install AdobeReader_enu-9.5.5-1.i486,"```bash
dnf install AdobeReader_enu-9.5.5-1.i486
```
Note: The exact command might vary depending on the package manager used (e.g., `yum` instead of `dnf`). However, based on the provided information, this should be sufficient to reproduce the issue related to the missing `/bin/basename` and `libidn.so.11`.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1646701,
2175057,Michal Srb,2023-03-03T05:45:58Z,2023-03-03T05:47:32Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: pause(): sleep killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2175057,
2172323,lnie,2023-02-22T00:36:35Z,2023-02-22T00:38:39Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,sleep 500,None,sleep 500,https://bugzilla.redhat.com/show_bug.cgi?id=2172323,
2162873,Vladimir Benes,2023-01-21T17:13:02Z,2023-01-21T19:44:32Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,uname -p showing unknown,normal,,,Always,"# uname -p
unknown

# arch
x86_64

# cat /proc/cpuinfo 
processor        : 0
vendor_id        : GenuineIntel
cpu family        : 6
model                : 42
model name        : Intel(R) Pentium(R) CPU G640 @ 2.80GHz","$ uname -p
$ arch
$ cat /proc/cpuinfo",uname -p,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2162873,
1830619,Matthew Crews,2020-05-03T02:49:14Z,2022-12-13T10:58:33Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,"""date"" command shows wrong date format for en_US per commonly accepted United States standards",nomal,"Date should output per United States standards. IE
Sat May 02, 2020 07:44:45 PM MST","Date outputs in incorrect date format per United States standards. IE:
Sat 02 May 2020 07:44:45 PM MST",Always,"1. Set date format environment to ""en_US.UTF-8""
2. Issue ""date"" command or with ""date +%c""","$ LC_TIME=""en_US.UTF-8""  
$ date  
$ date +%c","```bash
LC_TIME=""en_US.UTF-8"" date
LC_TIME=""en_US.UTF-8"" date +%c
```","export LC_TIME=""en_US.UTF-8""
date
date +%c",None,https://bugzilla.redhat.com/show_bug.cgi?id=1830619,
2150513,Walter Schug,2022-12-03T15:49:53Z,2022-12-03T16:13:28Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: memset(): cat killed by SIGBUS,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2150513,
2138908,Walter Schug,2022-10-31T16:10:39Z,2022-12-03T16:13:28Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: memset(): cat killed by SIGBUS,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2138908,
2124510,TommyLike,2022-09-06T11:37:18Z,2022-09-29T08:21:23Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Check file permission command not work on aarch64 container,normal,,,Always,"write a test.sh with content and execute
```
if [ -w ""/root"" ] ; then echo 'Success!' ; fi
```",,"```bash
docker run -it --rm registry.fedoraproject.org/fedora:37 /bin/bash
```
Then inside the container:
```bash
echo ""if [ -w ""/root"" ] ; then echo 'Success!' ; fi"" > test.sh
bash test.sh
```
And compare with:
```bash
docker run -it --rm registry.fedoraproject.org/fedora:37 /bin/bash
```
is not applicable here as we are testing on aarch64, so we use 
```bash
qemu-aarch64-static -L /usr/aarch64-linux-gnu /bin/bash
```
Then inside the container:
```bash
echo ""if [ -w ""/root"" ] ; then echo 'Success!' ; fi"" > test.sh
bash test.sh
```","write a test.sh with content and execute
```
if [ -w ""/root"" ] ; then echo 'Success!' ; fi
```","```bash
if [ -w ""/root"" ] ; then echo 'Success!' ; fi
```",https://bugzilla.redhat.com/show_bug.cgi?id=2124510,
2112870,Jonathan Wakely,2022-08-01T11:13:23Z,2022-08-25T07:47:34Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,unexpand cannot process form feed,normal,No error.,unexpand: input line is too long,Always,$ printf '\f'  | unexpand,$ printf '\f'  | unexpand,printf '\f' | unexpand,printf '\f' | unexpand,printf '\f' | unexpand,https://bugzilla.redhat.com/show_bug.cgi?id=2112870,
548834,Bruno Wolff III,2009-12-18T18:47:13Z,2022-08-23T12:38:33Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,uname -i started returning unknown,normal,i386,unknown,Always,uname -i,$ uname -i,uname -i,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=548834,
2112593,Dimitris,2022-07-30T21:00:40Z,2022-08-08T15:19:14Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Error using custom ~/.dir_colors/DIR_COLORS,normal,No error.,/usr/bin/cat: /home/user/.dir_colors: Is a directory,Always,"1. mkdir ~/.dir_colors
2. cp /etc/DIR_COLORS ~/.dir_colors
3. gnome-terminal","$ mkdir ~/.dir_colors
$ cp /etc/DIR_COLORS ~/.dir_colors
$ gnome-terminal","```bash
mkdir ~/.dir_colors
cp /etc/DIR_COLORS ~/.dir_colors
gnome-terminal
```","mkdir ~/.dir_colors
cp /etc/DIR_COLORS ~/.dir_colors
gnome-terminal","mkdir ~/.dir_colors
cp /etc/DIR_COLORS ~/.dir_colors
gnome-terminal",https://bugzilla.redhat.com/show_bug.cgi?id=2112593,
2104212,jiri vanek,2022-07-05T19:04:46Z,2022-07-05T23:20:40Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,adapt coreutils to removal of java on i686,,,,,,,None,"None of the provided information directly describes a specific command or test case that reproduces a particular bug. Instead, the text primarily discusses the upcoming removal of i686 Java packages from Fedora and requests package maintainers to adapt their packages accordingly.

The main points conveyed are:
1. The plan to drop i686 support for Java.
2. Instructions for adapting packages to exclude features related to Java on the i686 architecture using a macro called `%{java_arches}`.
3. References to exemplar pull requests and bugzilla entries for more details.

Given this context, there are no specific commands or test cases required to reproduce a bug as such. Instead, the maintainers of affected packages need to adapt their package configurations to exclude Java-related features on i686 architecture.

Therefore, the response is:

**No specific commands or test cases required to reproduce a bug. The issue involves adapting the package configuration to handle exclusion of Java-specific features on the i686 architecture as per the guidelines provided in the message.**

If you need further assistance with how to adapt your package configuration specifically, please provide more details about your package and its current setup.","None

The provided bug description does not detail any specific issue that could be reproduced through a command or a test case. The report is more of an advisory for package maintainers about the removal of i686 Java packages in Fedora 37 and instructions on how to adapt their packages accordingly.

The core message is to modify packages so they do not require Java on i686 architectures, using available macros and examples provided. There's no software malfunction or error to reproduce here.",https://bugzilla.redhat.com/show_bug.cgi?id=2104212,
1993544,Andrew,2021-08-13T19:47:45Z,2022-06-07T22:27:11Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,`tr -d` works with non-latin letters incorrectly,normal,,"`tr -d` does not delete non-latin chars as it have to.
Sed does the same correctly.",Always,"# tr does not work with non-latin
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
ï¿½ï¿½ï¿½ÑÑï¿½ï¿½
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
ÃÃÃÃ¤Ã¶Ã¼
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
ÃÃÃÃ¤Ã¶Ã¼
# tr works with latin
$ echo abcABC | tr -d [:alpha:]

$ echo abcABC | tr -d [[:alpha:]]

$

# sed works with non-latin
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | sed s/[Ð°Ð±Ð²]*//
ÐÐÐÑÑÐÐ
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | sed s/[[:alpha:]]*//

$ echo ÃÃÃÃ¤Ã¶Ã¼ | sed s/[[:alpha:]]*//

$","$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]","```bash
echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
echo abcABC | tr -d [:alpha:]
echo abcABC | tr -d [[:alpha:]]
```","echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
echo abcABC | tr -d [:alpha:]
echo abcABC | tr -d [[:alpha:]]",echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²,https://bugzilla.redhat.com/show_bug.cgi?id=1993544,
2066546,lnie,2022-03-22T03:42:44Z,2022-03-22T07:28:39Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2066546,
2035258,HÃ©ctor Louzao,2021-12-23T12:11:25Z,2022-01-03T12:29:46Z,CLOSED WORKSFORME,unspecified,urgent,Fedora,coreutils,install coreutils Program Not found,normal,found in /usr/bin/install,"program not found 

another coretuils are found for example

which id
/usr/bin/id",Always,"1.install coreutils package
2.sudo /usr/bin/install
3.command not found","$ sudo dnf install coreutils
$ sudo /usr/bin/install","sudo dnf install coreutils
which install
sudo /usr/bin/install 
which id",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2035258,
1831575,david08741,2020-05-05T10:25:28Z,2021-11-30T16:16:10Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,valid TZ depends on local TZ,normal,Tue 12 May 2020 12:00:00 PM CEST,date: invalid date â05/12/2020 11:00 CETâ,Always,1.TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',$ TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',"```bash
TZ=Europe/Berlin date -d '05/12/2020 11:00 CET'
```",TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',https://bugzilla.redhat.com/show_bug.cgi?id=1831575,
749704,JW,2011-10-28T01:07:56Z,2021-11-23T15:20:48Z,CLOSED WONTFIX,unspecified,unspecified,Fedora,coreutils,date cannot easily produce lower case formatted output,normal,"1. Fri
2. FRI
3. fRI
4. fri","1. Fri
2. FRI
3. FRI
4. %/a",Always,"1. date +%a
2. date +^a
3. date +#a
4. date +%/a","$ date +%a
$ date +^a
$ date +#a
$ date +%/a","date +%a
date +%^a
date +%#a 
date +%/a","date +%a
date +^a
date +#a
date +%/a","date +%a  
date +%^a  
date +#a  
date +%/a",https://bugzilla.redhat.com/show_bug.cgi?id=749704,
963134,Petr Å abata,2013-05-15T08:30:17Z,2021-11-23T15:18:00Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,fmt doesn't support unicode,,,,,,,"echo -e ""Hello \u4f60\u597d"" | fmt -w 10
echo -e ""Hello \u4f60\u597d"" | fmt -w 10 | wc -L","echo -e ""\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"" | fmt -w 10","echo -e ""ä½ å¥½\nä¸ç"" | fmt -w 10
echo -e ""a\U0001F600b"" | fmt -w 5",https://bugzilla.redhat.com/show_bug.cgi?id=963134,
1956080,Chris Murphy,2021-05-02T15:49:53Z,2021-11-23T15:10:59Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,cp --reflink=never no longer works as expected,normal,They should not be reflink copies,a and b share all extents,Always,"1. cp --reflink=never a b
2. filefrag -v a; filefrag -v b","$ cp --reflink=never a b
$ filefrag -v a; filefrag -v b","```bash
cp --reflink=never a b
filefrag -v a; filefrag -v b
```","touch a; dd if=/dev/zero of=a bs=1M count=10
cp --reflink=never a b
filefrag -v a; filefrag -v b","touch a; dd if=/dev/zero of=a bs=1M count=100
cp --reflink=never a b
filefrag -v a; filefrag -v b",https://bugzilla.redhat.com/show_bug.cgi?id=1956080,
1913358,Christian Kujau,2021-01-06T15:05:43Z,2021-09-17T10:47:06Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,df: /run/user/1000/doc: Operation not permitted,normal,df should exit with RC 0 and stderr should be empty.,df: /run/user/1000/doc: Operation not permitted,Always,"1. xdg-document-portal.service is running, as it is the default
2. execute df w/o for all file systems
3. RC 1","$ xdg-document-portal.service is running, as it is the default
$ execute df w/o for all file systems
$ RC 1",df -h > /dev/null; echo $?,"systemctl --user start xdg-document-portal.service
df -h > /dev/null; echo $?",df -h > /dev/null; echo $?,https://bugzilla.redhat.com/show_bug.cgi?id=1913358,
1992341,Samuel Bautista,2021-08-10T22:37:21Z,2021-08-11T06:45:43Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: _dbus_warn_check_failed(): true killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1992341,
1982273,RobbieTheK,2021-07-14T15:19:27Z,2021-07-14T20:48:52Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,bash: uname: command not found for root user: package coreutils-8.32-21.fc34.x86_64 conflicts with coreutils-single provided by coreutils-single-8.32-21.fc34.x86_64,,,,,,,"```bash
dnf update coreutils coreutils-common policycoreutils policycoreutils-python-utils python3-policycoreutils
su
uname
cat
dnf install coreutils coreutils-single
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1982273,
1960792,PaweÅ,2021-05-14T22:19:10Z,2021-05-19T01:22:03Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,rpmbuild fails at the test stage,normal,,"Building a package ends with a failure.

FAIL: tests/ls/stat-free-color.sh",Always,"rpmbuild -bb coreutils.spec
or 
rpmbuild --rebuild coreutils-8.32-24.fc34.src.rpm","$ rpmbuild -bb coreutils.spec 
$ rpmbuild --rebuild coreutils-8.32-24.fc34.src.rpm","To reproduce the bug described in the output of the `tests/ls/stat-free-color.sh` script from the coreutils package, you would need to follow these steps based on the information provided:

1. **Run the Test Script Directly**:
   - The most straightforward way to attempt to reproduce the issue is by running the test script itself directly if possible:
     ```bash
     ./tests/ls/stat-free-color.sh
     ```
   - This assumes you have access to the coreutils test suite and are in the appropriate directory.

2. **Simulate Test Conditions**:
   - If direct execution of the script isn't feasible, or you want to understand the issue better by replicating its conditions manually, you can try the following steps based on what the script does:
     1. **Create a Directory Structure**:
        - Create a directory named `d`.
        - Inside `d`, create another directory named `subdir`, and three files: `regf`, `hlink` (a hard link to `regf`), and `slink` (a symbolic link to `regf`). Also, create a dangling symbolic link `dangle` pointing to something that doesn't exist (`nowhere`).
        ```bash
        mkdir d
        cd d
        mkdir subdir
        touch regf
        ln regf hlink
        ln -s regf slink
        ln -s nowhere dangle
        ```
     2. **Run `ls` with Color**:
        - Execute the `ls` command with color output on both the original directory structure and after adding more content (as done in the script), to see if the number of stat calls changes.
        ```bash
        strace -e newfstatat,statx ls --color=always .
        ```
        This command uses `strace` to trace system calls related to file status (`newfstatat`, `statx`) when running `ls`. Note that the exact commands and tracing might need adjustments based on your system and what you're trying to observe.

3. **Verify System Calls**:
   - The script checks for the number of `stat`-like system calls (including `newfstatat` and `statx`). You can manually verify this by comparing the output of the traced commands before and after adding more files or links, looking for any discrepancies in the expected versus actual number of these system calls.

**Note**: The exact steps to reproduce might depend on specifics not detailed in your question, such as the operating system version, file system type, and the coreutils package version. Additionally, if you're trying to debug an issue related to this test failing, ensure that any relevant dependencies or environment settings are correctly configured.","The failure in `tests/ls/stat-free-color.sh` indicates that the number of `stat*` system calls performed by the `ls` command when listing a directory before and after creating additional files within that directory are not matching as expected. The purpose is to verify whether the `ls --color=auto` command, which is supposed to minimize `stat` calls, is working correctly.

Here's how you can reproduce this bug using similar commands:

### Steps to Reproduce

1. **Create a Directory and Files:**
   ```bash
   mkdir -p /tmp/testdir
   cd /tmp/testdir
   touch file1 file2
   mkdir subdir
   ```

2. **Run `ls` with `stat*` system calls tracking:**
   
   Use `strace` to trace the `stat*` calls made by `ls`. We will capture these calls for two scenarios:

   - Scenario 1: Listing an empty directory.
   - Scenario 2: Listing a directory after creating additional files.

3. **Scenario 1: List an Empty Directory and Track Calls**

   ```bash
   mkdir /tmp/testdir/empty_dir
   strace -e trace=stat,stat64,lstat,lstat64,fstat,fstat64,newfstatat -o log1 ls --color=auto empty_dir
   ```

4. **Scenario 2: List Directory with Additional Files and Track Calls**

   ```bash
   cd /tmp/testdir/empty_dir
   touch fileA fileB subdir/
   strace -e trace=stat,stat64,lstat,lstat64,fstat,fstat64,newfstatat -o log2 ls --color=auto
   ```

5. **Count the `stat*` Calls:**

   ```bash
   grep -c stat log1  # This should give you the number of stat calls in Scenario 1.
   grep -c stat log2  # This should give you the number of stat calls in Scenario 2.
   ```

### Expected Outcome

The script expects that the number of `stat*` calls will be consistent (or not increase significantly) between these two scenarios when using `ls --color=auto`. However, if there is an unexpected increase in system calls, it indicates a potential issue.

### Actual Issue Highlighted by Logs:

From your logs, we see the following discrepancy:

- **log1**:
  ```bash
  newfstatat(3, """", {st_mode=S_IFDIR|0755, st_size=40, ...}, AT_EMPTY_PATH) = 0
  ```
  
- **log2**:
  ```bash
  newfstatat(1, """", {st_mode=S_IFREG|0644, st_size=4505, ...}, AT_EMPTY_PATH) = 0
  ```

The `ls` command in the second scenario makes an additional call that it did not make in the first. This is what caused the failure.

### Conclusion

This indicates a potential inefficiency in how `ls --color=auto` handles directory listings when there are more files present. You might want to report this as a bug or investigate further if the behavior changes with different versions of `coreutils`.","To reproduce the bug described in the log, you need to run the specific test case that failed. The failure is associated with the `tests/ls/stat-free-color.sh` script in the Coreutils project (version 8.32 in this case). This script is designed to verify behavior of the `ls` command when listing directory contents without using colorization, specifically focusing on whether it relies on `statx`.

Here's a step-by-step guide to reproduce the bug:

1. **Get the Source Code**:
   - Download or clone the Coreutils source code from the official repository.
     ```bash
     git clone https://git.savannah.gnu.org/git/coreutils.git
     ```

2. **Check Out the Specific Version**:
   - If you want to check out version 8.32 (the version in which this bug was reported), use:
     ```bash
     cd coreutils
     git checkout v8.32
     ```

3. **Prepare and Build the Source Code**:
   - Follow the build instructions from the `INSTALL` file or README.
     ```bash
     ./bootstrap  # This may be necessary if not all generated files are included in the source tarball
     mkdir build && cd build
     ../configure
     make
     ```

4. **Run the Specific Test Case**:
   - Navigate to the `tests/ls` directory and run the failing test script.
     ```bash
     cd tests/ls
     ./stat-free-color.sh
     ```

5. **Observe the Failure**:
   - The script should fail with an exit status of 1, similar to what you described in your log output.

If you do not want to build Coreutils from source, you can also try running the test suite directly after configuring and building:

```bash
make check
```

This will execute all tests, including `stat-free-color.sh`. However, if you are specifically interested in the behavior of this one script, following steps 4 and 5 should be sufficient to reproduce the issue.",https://bugzilla.redhat.com/show_bug.cgi?id=1960792,
1955493,AurÃ©lien RouÃ«nÃ©,2021-04-30T09:02:35Z,2021-04-30T10:47:28Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,F34 chmod on btrfs mess up the permissions,normal,,"Doing a chmod other than 777 on a directory in the /home/user mess up the permissions, then permissions are shown as 'd?????????'.",Always,"$ mkdir test                    
$ touch test/file
$ ll -a test     
total 0
drwxr-xr-x. 1 arouene arouene   8 Apr 30 10:47 .
drwx------. 1 arouene arouene 840 Apr 30 10:47 ..
-rw-r--r--. 1 arouene arouene   0 Apr 30 10:47 file

$ chmod 0640 test 
$ ll -a test     
ls: cannot access 'test/.': Permission denied
ls: cannot access 'test/..': Permission denied
ls: cannot access 'test/file': Permission denied
total 0
d????????? ? ? ? ?            ? .
d????????? ? ? ? ?            ? ..
-????????? ? ? ? ?            ? file","$ mkdir test
$ touch test/file
$ ll -a test
$ chmod 0640 test
$ ll -a test
","```bash
mkdir test
touch test/file
ll -a test
chmod 0640 test
ll -a test
```","mkdir test                    
touch test/file
chmod 0640 test 
ll -a test     ","mkdir test  
touch test/file  
ll -a test  
chmod 0640 test  
ll -a test",https://bugzilla.redhat.com/show_bug.cgi?id=1955493,
1952490,ricky.tigg,2021-04-22T11:44:20Z,2021-04-22T14:46:12Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,Default sorting not applied,normal,Order applied. No addition of empty argument.,"Default sorting â according to alphabetic order â not applied, be the option '-d' part of the command or not.",Always,"$ rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort","$ rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort","```bash
rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort
```","rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort",None,https://bugzilla.redhat.com/show_bug.cgi?id=1952490,
1944688,Vratislav Podzimek,2021-03-30T13:50:50Z,2021-03-30T14:22:43Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,/bin/basename not provided by the coreutils package,normal,,"""/bin/basename"" missing",,"# rpm -qf `which basename`
# rpm -q --provides coreutils","$ rpm -qf `which basename`
$ rpm -q --provides coreutils
",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1944688,
1634200,Uri Simchoni,2018-09-28T22:21:06Z,2021-03-30T14:22:41Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,/bin/basename does not appear as provided by coreutils-single,normal,repoquery should list coreutils-single as well.,"/bin/basename is installed, and shows up in local rpm query, but does not show up in repoquery. That appears to be causing a dnf install of an .rpm file which requires /bin/basename to fail.",Always,"1. spin-up a fedora 28 container:
docker run -it --rm fedora:latest /bin/bash
2. use the following commands:
[root@a6cdd04a835c /]# rpm -q coreutils-single
coreutils-single-8.29-7.fc28.x86_64
[root@a6cdd04a835c /]# ls -l /bin/basename  
-r-xr-xr-x. 1 root root 55 May 29 16:33 /bin/basename
[root@a6cdd04a835c /]# rpm -q --whatprovides /bin/basename
coreutils-single-8.29-7.fc28.x86_64
[root@a6cdd04a835c /]# dnf repoquery --whatprovides /bin/basename
Last metadata expiration check: 0:15:37 ago on Fri Sep 28 21:55:41 2018.
coreutils-0:8.29-5.fc28.x86_64
coreutils-0:8.29-7.fc28.x86_64","$ docker run -it --rm fedora:latest /bin/bash
$ rpm -q coreutils-single
$ ls -l /bin/basename
$ rpm -q --whatprovides /bin/basename
$ dnf repoquery --whatprovides /bin/basename","```bash
docker run -it --rm fedora:latest /bin/bash
rpm -q coreutils-single
ls -l /bin/basename  
rpm -q --whatprovides /bin/basename
dnf repoquery --whatprovides /bin/basename
dnf repoquery --whatprovides /usr/bin/basename
```","docker run -it --rm fedora:latest /bin/bash
rpm -q coreutils-single
ls -l /bin/basename  
rpm -q --whatprovides /bin/basename
dnf repoquery --whatprovides /bin/basename",None,https://bugzilla.redhat.com/show_bug.cgi?id=1634200,
1921427,John.ne1,2021-01-28T00:55:23Z,2021-02-23T00:25:07Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,"stat command shows ""UNKNOWN"" as Type for exFAT drive",normal,It must display a file system name at Type e.g exFAT,It does not show a file system name at Type.,Always,"1. Connect exFAT drive to your computer. If you don't have an exFAT drive, just create an exFAT medium with gnome-disk-utility-3.38.0-1.fc33.x86_64

2. Enter this command: stat -f '<file/folder from exFAT drive>'


Sample:

stat -f '/run/media/aurora/LABEL/iiiiiii.txt' 
  File: ""/run/media/aurora/LABEL/iiiiiii.txt""
    ID: 83000000000 Namelen: 1530    Type: UNKNOWN (0x2011bab0)
Block size: 32768      Fundamental block size: 32768
Blocks: Total: 973808     Free: 973801     Available: 973801
Inodes: Total: 0          Free: 0

3. See Type: UNKNOWN (0x2011bab0)",$ stat -f '<file/folder from exFAT drive>',"mkfs.exfat /dev/sdX (replace /dev/sdX with your actual device)
stat -f '/mount/point/of/exfat/drive' (replace /mount/point/of/exfat/drive with actual mount point)","None

The provided information indicates that a specific setup is necessary to reproduce the bug (i.e., connecting an exFAT drive), which cannot be represented simply by shell commands alone without the physical media or virtual equivalent being specified. Therefore, a complete and precise command-line-only reproduction isn't feasible based on the given description.",stat -f '/run/media/aurora/LABEL/iiiiiii.txt',https://bugzilla.redhat.com/show_bug.cgi?id=1921427,
1921249,PÃ¡draig Brady,2021-01-27T19:16:01Z,2021-02-17T05:08:27Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,ls can crash when printing selinux context of unstatable files,,,"ls since 6.9 can crash when printing selinux context,
and encountering an unstatable file (like a missing symlink target).",Always,,,"```bash
mkdir test_dir
cd test_dir
ln -s non_existent_file symlink
chmod 755 .
ls -Zd .
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1921249,
1921246,PÃ¡draig Brady,2021-01-27T19:08:02Z,2021-02-17T05:08:25Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,split can cause data corruption with --number=K/N construct,,,"split --number=K/N can be used when there isn't enough local storage,
and you want to split input to separate output devices in separate runs.

Ever since v8.26 (so including centos 8), there is a nasty
data corruption issue for any file over 128KiB
as part of the input file is skipped incorrectly.",Always,,,"To reproduce the bug, you can use the following command:

```bash
dd if=/dev/urandom of=input.txt bs=1024 count=256
split -n 2/3 --numeric-suffixes input.txt output_
cat output_00 output_01 | md5sum
dd if=/dev/urandom of=input.txt bs=1024 count=256
split -n 2/3 input.txt output_
cat output_00 output_01 | md5sum
```

Note that the first `md5sum` should be different from the second `md5sum`, indicating data corruption.

Alternatively, a simpler test case:

```bash
dd if=/dev/urandom of=input.txt bs=1024 count=130
split --number=l/2 input.txt output_
cat output_00 output_01 | md5sum
md5sum input.txt
```

The two `md5sum` outputs should be different, indicating data corruption. 

Please note that running these commands requires the `dd`, `split`, and `md5sum` utilities to be installed on your system. Also, the actual output files (`output_00` and `output_01`) may vary based on the specific version of `split` being used. 

However, considering the original description which specifically mentions ""split --number=K/N"", a test case could also be:

```bash
dd if=/dev/urandom of=input.txt bs=1024 count=130
split --number=1/2 input.txt output_
cat output_0 output_1 | md5sum
md5sum input.txt
```

The two `md5sum` outputs should match, but due to the bug, they might not. 

To simplify:

```bash
dd if=/dev/urandom of=input.txt bs=1024 count=130
split --number=1/2 input.txt output_
cmp input.txt <(cat output_0 output_1)
```

If the `cmp` command reports any differences, it indicates data corruption due to the bug.","split -n l/2 bigfile part_
cat part_* > merged_file
diff bigfile merged_file",None,https://bugzilla.redhat.com/show_bug.cgi?id=1921246,
1811038,Mohan Boddu,2020-03-06T13:43:13Z,2021-02-16T19:39:24Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,/usr/bin/mknod: cannot set permissions of '/dev/random': Operation not supported,,,,,,,"mknod -m 666 /dev/random c 1 8 

Note: The command should be run in an environment where /dev/random is already present, as it's a character special file that cannot be created using mknod if it doesn't exist. Also, the exact error message may vary depending on the system and permissions.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1811038,
959597,Don Swaner,2013-05-03T22:35:04Z,2021-02-03T17:55:53Z,CLOSED RAWHIDE,unspecified,low,Fedora,coreutils,"Info link ""Note Specifying the Time Zone"" gives ""No such file or directory""",normal,View documentation on Specifying the Time Zone,"Error message ""libc: No such file or directory""",Always,"1. do ""info date"" or ""info who""
2. try to take link ""*Note Specifying the Time Zone ...""","$ info date
$ info who","info date
(info command, then follow link ""*Note Specifying the Time Zone with `TZ': (libc)TZ Variable"")","info date
info who","info date
info who",https://bugzilla.redhat.com/show_bug.cgi?id=959597,
1914537,David Johnston,2021-01-09T15:08:58Z,2021-01-27T08:05:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,`sort -n -u` does not work with IPv4 addresses,normal,"$?=0
Bar and Baz both contain 16 lines","$?=1
Bar contains 8 lines
Baz contains 16 lines",,"1. Take a file Foo, with a list of IPs, one per line, with duplicates
2. sort -n -u < Foo > Bar
3. sort -n  < Foo | uniq > Baz
4. diff Bar Baz","$ sort -n -u < Foo > Bar  
$ sort -n < Foo | uniq > Baz  
$ diff Bar Baz","```bash
echo -e ""192.168.1.1\n192.168.1.2\n192.168.1.1\n192.168.1.3\n192.168.1.2\n192.168.1.4\n192.168.1.5\n192.168.1.6\n192.168.1.7\n192.168.1.8\n192.168.1.9\n192.168.1.10\n192.168.1.11\n192.168.1.12\n192.168.1.13\n192.168.1.14"" > Foo
sort -n -u < Foo > Bar
sort -n < Foo | uniq > Baz
diff Bar Baz
```","touch Foo; echo -e ""192.168.0.1\n192.168.0.1\n192.168.0.2\n192.168.0.2"" > Foo
sort -n -u < Foo > Bar
sort -n < Foo | uniq > Baz
diff Bar Baz",None,https://bugzilla.redhat.com/show_bug.cgi?id=1914537,
1914737,Clark,2021-01-11T05:24:04Z,2021-01-11T20:47:10Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,stat command does not show birth time (btime) entry in Fedora 33 (GNOME),normal,"Fedora 33 (GNOME) uses Btrfs as the file system by default. Btrfs supports birth time (btime) for files and directories, so there must also be a birth time (btime) entry per stat command.",Birth time (btime) has no entry.,Always,"1. Install Fedora 33 (GNOME) on the internal disk.
2. Open Terminal and use stat command for file or directory.
3. In Terminal there is no entry for ""Birth"" (btime).",$ stat <file-or-directory>,"stat /path/to/existing/file
stat /path/to/existing/directory 

(Note: The actual path should be replaced with an existing file or directory on a Btrfs filesystem in Fedora 33)",None,stat /path/to/file_or_directory,https://bugzilla.redhat.com/show_bug.cgi?id=1914737,
1869624,Florian Bezdeka,2020-08-18T11:37:34Z,2020-11-17T10:47:31Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,coreutils: test -w broken,normal,0,1,Always,"1. mkdir -p /tmp/foo
2. test -w /tmp/foo; echo $?","$ mkdir -p /tmp/foo
$ test -w /tmp/foo; echo $?","```bash
mkdir -p /tmp/foo
test -w /tmp/foo; echo $?
```","mkdir -p /tmp/foo
test -w /tmp/foo; echo $?","mkdir -p /tmp/foo
test -w /tmp/foo; echo $?",https://bugzilla.redhat.com/show_bug.cgi?id=1869624,
1783903,Peter Robinson,2019-12-16T08:57:39Z,2020-11-07T06:52:50Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Does coreutils really depend on ncurses?,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1783903,
1882187,major,2020-09-24T01:49:51Z,2020-11-06T16:51:32Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,multiple checksumming utilities output an extraneous leading backslash when processing filenames that have embedded newlines,normal,No extraneous leading backslash should occur. I do not know if this bug indicates a more serious string processing problem.,"b2sum, md5sum, sha1sum, sha224sum, sha256sum, sha384sum, and sha512sum each output an extraneous leading backslash when processing filenames that have embedded newlines",Always,"$ # show bash and coreutils versions
$ rpm -q bash coreutils
$ # create variable that holds filename with
$ file='AAA'$'\n''BBB'
$ # show that variable contains an embedded newline
$ printf -- '%s' ""$file"" | od -c
$ # create empty file with filename containing embedded newline
$ cp -v /dev/null ""$file""
$ # list file with filename containing embedded newline
$ ls -b ""$file""
$ # run md5sum, for example, on file with filename containing embedded newline
$ md5sum ""$file""
$ # note the extraneous leading backslash","$ rpm -q bash coreutils
$ file='AAA'$'\n''BBB'
$ printf -- '%s' """"$file"""" | od -c
$ cp -v /dev/null """"$file""""
$ ls -b """"$file""""
$ md5sum """"$file""""","```bash
file='AAA'$'\n''BBB'
printf -- '%s' ""$file"" | od -c
cp -v /dev/null ""$file""
ls -b ""$file""
md5sum ""$file""
```","file='AAA'$'\n''BBB'
cp -v /dev/null ""$file""
md5sum ""$file""","file='AAA'$'\n''BBB'
cp -v /dev/null ""$file""
md5sum ""$file""",https://bugzilla.redhat.com/show_bug.cgi?id=1882187,
467622,Sammy,2008-10-19T15:27:27Z,2020-10-19T09:17:43Z,CLOSED WONTFIX,medium,medium,Fedora,coreutils,nohup job is killed when ssh times out,,,"It involves the
following components: nohup, ssh, kernel, openmp.

When one starts a job remotely using nohup and normally logs out
(ctrl-D) the job stays running. However, if you do not logout and
let ssh time out the job is killed.

The situation is more interesting on a multi-processor machine when
running an openmp job. In this case it seems to kill all but one
of the threads and the job keeps running on a single cpu.",,,,"```bash
# Create a simple OpenMP program (e.g., test.c)
cat > test.c <<EOF
#include <omp.h>
#include <stdio.h>

int main() {
    #pragma omp parallel
    {
        int tid = omp_get_thread_num();
        while(1) {
            printf(""Thread %d is running...\n"", tid);
            sleep(1);
        }
    }
    return 0;
}
EOF

# Compile the program
gcc -fopenmp test.c -o test

# Start a new SSH session and run the job with nohup
ssh user@remotehost ""nohup ./test &""

# Do not log out, wait for SSH to time out

# Alternatively, to simulate timeout, close the SSH connection without logging out
ssh user@remotehost ""nohup ./test &""
# Immediately close the SSH connection (e.g., using Ctrl+])
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=467622,
1870385,Brendan Conoboy,2020-08-19T23:03:35Z,2020-10-07T15:50:53Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,"date --date=""2019-03-10 02:00:00"" +""%s"" fails",normal,,Converting a date to seconds near daylight savings time start fails,Always,"blc@localhost /tmp>date --date=""2019-03-10 01:23:45"" +""%s""
1552209825
blc@localhost /tmp>date --date=""2019-03-10 02:23:45"" +""%s""
date: invalid date â2019-03-10 02:23:45â
blc@localhost /tmp>date --date=""2019-03-10 03:23:45"" +""%s""
1552213425
blc@localhost /tmp>TZ=UTC date --date=""2019-03-10 02:23:45"" +""%s""
1552184625","$ date --date=""2019-03-10 01:23:45"" +""%s""
$ date --date=""2019-03-10 02:23:45"" +""%s""
$ date --date=""2019-03-10 03:23:45"" +""%s""
$ TZ=UTC date --date=""2019-03-10 02:23:45"" +""%s""","```bash
date --date=""2019-03-10 01:23:45"" +""%s""
date --date=""2019-03-10 02:23:45"" +""%s""
date --date=""2019-03-10 03:23:45"" +""%s""
TZ=UTC date --date=""2019-03-10 02:23:45"" +""%s""
```","date --date=""2019-03-10 02:23:45"" +""%s""","TZ=PDT date --date=""2019-03-10 02:23:45"" +""%s""",https://bugzilla.redhat.com/show_bug.cgi?id=1870385,
1830318,Allan Day,2020-05-01T15:19:53Z,2020-10-06T13:47:57Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Remove 256 colors from DIR_COLORS,normal,The colours match those configured in the terminal.,The colors don't follow those configured in the terminal.,Always,"Run ls in a location that will give you a variety of colors (say, /usr/libexec).",,ls --color /usr/libexec,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1830318,
1884264,Norbert Jurkeit,2020-10-01T13:37:33Z,2020-10-02T08:14:06Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,Missing color scheme in coreutils-common with F33 beta,,,ls command displays directory names in dark blue which makes them barely readable in virtual terminals with black background in LXDE spin of F33 beta,,,,"```bash
ls --color=auto
cat /etc/DIR_COLORS.256color
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1884264,
1883685,qazdefuque,2020-09-29T20:35:51Z,2020-09-30T10:08:56Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: set_program_name(): ls killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1883685,
1877625,Jeffrey Walton,2020-09-10T02:31:10Z,2020-09-12T07:07:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Two /dev/sda3 filesystems using 'df -h'?,normal,,df -h' has a slightly unusual output. /dev/sda3 is listed twice,Always,,$ df -h,"To reproduce the bug, you would need a system with Btrfs and a specific disk layout where `/dev/sda3` is mounted on both `/` and `/home`. The exact steps might involve:

1. Installing Fedora 33 on an x86_64 system.
2. Ensuring the system uses Btrfs as its filesystem.
3. Setting up the disk to have `/dev/sda3` mounted on both `/` and `/home`, which could typically be achieved during installation or by manually editing fstab entries after installation.

However, simulating this exact environment just for testing might not be straightforward without actual hardware or a virtual machine setup that closely mirrors the described system. The key command to test once such an environment is set up would simply be:

```bash
df -h
```

This should display disk usage statistics and ideally replicate the issue of `/dev/sda3` being listed twice if the bug conditions are met.

Given these constraints, a simplified version to potentially reproduce or demonstrate the behavior on any system (assuming Btrfs support) could involve creating a Btrfs volume with subvolumes for `/` and `/home`, then using `df -h` to see if it lists the filesystem twice. This approach doesn't exactly replicate the hardware but tests the coreutils behavior under similar conditions:

```bash
# Create a loopback file for Btrfs testing (as root or with sudo)
dd if=/dev/zero of=btrfs_test.img bs=1M count=100

# Format it as Btrfs and mount it
mkfs.btrfs btrfs_test.img
mkdir /mnt/test
mount -o loop btrfs_test.img /mnt/test

# Create subvolumes for / and /home
btrfs subvolume create /mnt/test/root
btrfs subvolume create /mnt/test/home

# Mount these subvolumes (assuming they are empty and for testing purposes only)
umount /mnt/test
mkdir /mnt/root /mnt/home
mount -o loop,subvol=root btrfs_test.img /mnt/root
mount -o loop,subvol=home btrfs_test.img /mnt/home

# Now test df -h to see if it lists the filesystem twice
df -h
```

Please note, this is a simulation and might not perfectly replicate the original environment but aims to mimic the conditions under which `df -h` would list `/dev/sda3` twice due to its mount points. 

For direct reproduction based on provided details without additional setup:

```bash
df -h
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1877625,
1861108,Chris Murphy,2020-07-27T20:27:11Z,2020-08-20T11:30:04Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,RFE: make cp default to reflink=auto,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1861108,
1111722,Chris Murphy,2014-06-20T20:15:45Z,2020-05-04T03:30:29Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"hang at main menu, restoring hardware time and probing storage",,Hang at the hub,No hang,Always,"Steps to Reproduce:
1. Install Fedora 20 using Btrfs preset with custom install to leave free space.
2. Boot Fedora 21 installer Fedora-Live-Workstation-x86_64-rawhide-20140619.iso
3. Choose English as language.",,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1111722,
1800597,1014938109,2020-02-07T13:51:19Z,2020-02-11T11:19:15Z,CLOSED RAWHIDE,low,low,Fedora,coreutils,Test fail of tests/misc/env-S.pl and tests/misc/tty,normal,No failures.,FAIL tests/misc/tty.sh (exit status: 1),,1.make test under rpmbuild/BUILD/coreutils-8.31/single or rpmbuild -ba coreutils.spec,"$ cd rpmbuild/BUILD/coreutils-8.31/single  
$ make check","```bash
make check
```
or 
```bash
make test
```
Note that these commands should be run in the build directory of the coreutils package (e.g., `rpmbuild/BUILD/coreutils-8.31/single`). Additionally, running these commands as root may also reproduce the bug with more failures:
```bash
sudo make check
```
or 
```bash
sudo make test
```",None,make check,https://bugzilla.redhat.com/show_bug.cgi?id=1800597,
1739747,Harish Pillay,2019-08-10T02:23:05Z,2019-11-27T23:12:19Z,CLOSED EOL,unspecified,medium,Fedora,coreutils,error in displaying date -d 1982-01-01 because of TZ change from UTC+7.5 to UTC+8,normal,Fri Jan  1 00:00:00 +08 1982,date -d 1982-01-01 returns date: invalid date â1982-01-01â,Always,"1. On a system set to UTC+8 Singapore, run date -d 1981-12-31. It will succeed.
2. Then run 1982-01-01 and it will fail.
3. Running 1928-01-02 succeeds. ","$ date -d 1981-12-31  
$ date -d 1982-01-01","```bash
TZ=Asia/Singapore date -d '1981-12-31'
TZ=Asia/Singapore date -d '1982-01-01'
TZ=Asia/Singapore date -d '1928-01-02'
```","TZ='Asia/Singapore' date -d '1982-01-01'
TZ='Asia/Singapore' date -d '1981-12-31'",date -d 1982-01-01,https://bugzilla.redhat.com/show_bug.cgi?id=1739747,Not sure about the reproducibility
1390462,Jan HutaÅ,2016-11-01T06:35:11Z,2019-11-27T19:23:15Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,on 2016-10-31 command `date -d 'month ago'` does not return previous month,normal,Should show start of previous month,Shows current month,Always,"1. # date
2. # date -d 'month ago'","$ date
$ date -d 'month ago'","```bash
date
date -d 'month ago'
```","date
date -d 'month ago'",date -d 'month ago',https://bugzilla.redhat.com/show_bug.cgi?id=1390462,
1764152,Matej MaruÅ¡Ã¡k,2019-10-22T11:26:29Z,2019-10-25T17:01:41Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,Cannot run `ls -l` in docker container with new coreutils,normal,Just list all in `/`,ls: cannot access '/': Operation not permitted,Always,"1.
$ cat Dockerfile 
FROM fedora:30
RUN dnf -y update coreutils
2. sudo docker build
3. sudo docker run -it --rm <build image> ls /","$ cat Dockerfile  
$ FROM fedora:30  
$ RUN dnf -y update coreutils
$ sudo docker build -t test-image .  
$ sudo docker run -it --rm test-image ls /  ","```bash
cat > Dockerfile <<EOF
FROM fedora:30
RUN dnf -y update coreutils
EOF

sudo docker build -t test-image .
sudo docker run -it --rm test-image ls /
```","cat Dockerfile 
FROM fedora:30
RUN dnf -y update coreutils
sudo docker build
sudo docker run -it --rm <build image> ls /","cat Dockerfile 
FROM fedora:30
RUN dnf -y update coreutils

sudo docker build -t my-fedora-coreutils .

sudo docker run -it --rm my-fedora-coreutils ls /",https://bugzilla.redhat.com/show_bug.cgi?id=1764152,
1728986,Milan Crha,2019-07-11T07:12:41Z,2019-10-15T22:39:41Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,Avoid flashing text for broken links,,,"When a link references non-existent file or directory, the `ls -l` shows the link target with red background and white flashing text in it. The flashing text has some issues:
a) it's quite distracting and even if I fix the link the terminal still shows it
   flashing few lines above - I do not want to clear the terminal content,
   because I need to see other text in there
b) when the target link is long and you cannot copy it with mouse you need to
   re-type it, thus read it. The flashing makes this quite depressing, when the
   text is there, is not there, is there, is not there, is there,....
c) I've been told, long time ago, that changing icons which try to warn about
   something should not do that ad infinity, it's enough to flash like 10 times
   and then stop flashing - that time it was for power consumption reasons; this
   flashing text may (or may not) be a similar case
d) it's enough to have the white text on a red background to have it highlighted
   as an error, there's really no need for the awful flashing.",Always,,,"ln -s non_existent_file existing_link
ls -l existing_link",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1728986,
1444774,PÃ¡draig Brady,2017-04-24T09:22:42Z,2019-07-22T13:07:40Z,CLOSED ERRATA,unspecified,urgent,Fedora,coreutils,heap overflow security issue in date(1) and touch(1),,,"heap overflow mitigation

coreutils >= 8.25 (Fedora 24) has a nasty arbitrary heap write issue that I presume can be exploited to run arbitrary code as the user running date,
just by setting a large TZ variable in the command line or in the environment.",,,,"```bash
TZ=$(printf 'A%.0s' {1..10000}) date
```","export TZ=$(python -c 'print ""A"" * 10000')
date +%T",None,https://bugzilla.redhat.com/show_bug.cgi?id=1444774,
1713901,Albert FlÃ¼gel,2019-05-25T15:03:59Z,2019-05-25T22:06:15Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,env LANG=en_US date has significantly changed output format,normal,Sat May 25 16:56:54 CEST 2019,Sat 25 May 2019 04:56:58 PM CEST,Always,"# env LANG=en_EN date
# env LANG=en_US date","$ env LANG=en_EN date
$ env LANG=en_US date","env LANG=en_EN date
env LANG=en_US date","env LANG=en_EN date
env LANG=en_US date","env LANG=en_EN date
env LANG=en_US date",https://bugzilla.redhat.com/show_bug.cgi?id=1713901,
1688740,Jonathan Wakely,2019-03-14T10:54:46Z,2019-05-22T11:31:05Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,sha512sum(1) man page is badly formatted,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1688740,
1705229,rvcsaba,2019-05-01T19:05:39Z,2019-05-14T13:05:24Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,sort -V - incorrect result,,"samba-4.10.2-1.fc30.x86_64
samba-4.10.2-1.1.fc30.x86_64
samba-common-4.10.2-1.fc30.noarch
samba-common-4.10.2-1.1.fc30.noarch","samba-4.10.2-1.1.fc30.x86_64
samba-4.10.2-1.fc30.x86_64
samba-common-4.10.2-1.fc30.noarch
samba-common-4.10.2-1.1.fc30.noarch",Always,sort -V sort_test.txt,$ sort -V sort_test.txt,"```bash
cat > sort_test.txt <<EOF
samba-common-4.10.2-1.fc30.noarch
samba-4.10.2-1.fc30.x86_64
samba-common-4.10.2-1.1.fc30.noarch
samba-4.10.2-1.1.fc30.x86_64
EOF

sort -V sort_test.txt
```","echo -e ""samba-common-4.10.2-1.fc30.noarch\nsamba-4.10.2-1.fc30.x86_64\nsamba-common-4.10.2-1.1.fc30.noarch\nsamba-4.10.2-1.1.fc30.x86_64"" > sort_test.txt
sort -V sort_test.txt","cat > sort_test.txt <<EOF
samba-common-4.10.2-1.fc30.noarch
samba-4.10.2-1.fc30.x86_64
samba-common-4.10.2-1.1.fc30.noarch
samba-4.10.2-1.1.fc30.x86_64
EOF

sort -V sort_test.txt",https://bugzilla.redhat.com/show_bug.cgi?id=1705229,
1674156,customercare,2019-02-09T12:44:35Z,2019-02-09T14:22:40Z,CLOSED NOTABUG,unspecified,urgent,Fedora,coreutils,du missed out files and fails to count the size of a directory correctly,,,,Always,,,"To reproduce this bug, you'll need to run a combination of commands that will allow you to:

1.  **Observe the issue with `du`**: The first step is to confirm that `du` (or any other command that's supposed to count or process files in a directory) indeed stops counting at a certain file.
2.  **Verify file existence and permissions**: Use `ls -la` to verify that all files, including the last one correctly handled by `du`, exist and have proper permissions.
3.  **Run `stat` on affected files**: Since `stat` did not see any irregularity, you should run it on several files around the point where `du` stops counting to ensure there are no unusual file attributes or issues.

Here's how you can set up these test cases:

### Test Case 1: Observe the issue with `du`

```bash
# Run du on the directory in question
du -a /mailacct/imapbox/Maildir//.Archives.2018/cur/
```

This should demonstrate that `du` stops counting files at a certain point.

### Test Case 2: Verify file existence and permissions

```bash
# List all files with detailed information
ls -la /mailacct/imapbox/Maildir//.Archives.2018/cur/

# Specifically look for the last correctly handled file and its neighbors
ls -la /mailacct/imapbox/Maildir//.Archives.2018/cur/* | grep -B2 ""1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa""
```

This will show you the files around the point where `du` stops, helping to identify if there's something unique about them.

### Test Case 3: Run `stat` on affected files

```bash
# Run stat on several files around the stopping point
stat /mailacct/imapbox/Maildir//.Archives.2018/cur/1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa
stat /mailacct/imapbox/Maildir//.Archives.2018/cur/* | grep -B2 ""1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa""
```

However, the `stat` command with `grep` as shown won't directly work because `stat` doesn't accept multiple files in this context when combined with `grep`. Instead, you can manually run `stat` on several files around the problematic area:

```bash
# Example for running stat on specific files
stat /mailacct/imapbox/Maildir//.Archives.2018/cur/1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa
stat /mailacct/imapbox/Maildir//.Archives.2018/cur/1549609568.M246448P12677.xxx.my-system.de,S=... # Adjust the filename as needed
```

### Additional Tests

-   **Filesystem check**: While you've mentioned that `fs` checks are planned, it's crucial to rule out filesystem issues even if other commands like `ls` work correctly.
-   **Permissions and ownership**: Ensure that permissions and ownership of files around the stopping point are consistent with those before it.
-   **File names and formats**: Check for any unusual file naming conventions or characters that might cause issues with how `du` processes file names.

By systematically running these commands and analyzing their outputs, you should be able to isolate the cause of why `du` stops counting files at a certain point.","Based on the provided information, the issue seems to be related to how certain tools (specifically `du` in this case) are handling a directory structure, while others (`ls`) are not exhibiting any issues. The key points suggest:

1. The tool `du` is unable to count files correctly.
2. The `stat` command does not report irregularities on the files.
3. All affected files appear to have valid entries when listed with `ls`.

To help reproduce and diagnose this issue, you would need to perform several tests. Here are some commands and test cases that can be used:

### 1. List Files
Ensure all files are properly listed:
```sh
ls -la /mailacct/imapbox/Maildir/.Archives.2018/cur/
```

### 2. Stat Each File
Check the metadata of each file to ensure no hidden irregularities:
```sh
for f in /mailacct/imapbox/Maildir/.Archives.2018/cur/*; do stat ""$f""; done
```

### 3. Use `du` on Different Levels
Compare how `du` behaves at different directory levels:
```sh
# Check the entire directory
du -ah /mailacct/imapbox/Maildir/.Archives.2018

# Check specific subdirectory
du -ah /mailacct/imapbox/Maildir/.Archives.2018/cur/
```

### 4. Use `find` to Verify File Existence and Counting
Use the `find` command to ensure all files are being recognized:
```sh
# List all files in the directory
find /mailacct/imapbox/Maildir/.Archives.2018/cur/

# Count the number of files directly in this directory (excluding subdirectories)
find /mailacct/imapbox/Maildir/.Archives.2018/cur/ -maxdepth 1 -type f | wc -l
```

### 5. Compare File Sizes and Counts
Compare file sizes and counts using different tools:
```sh
# Get total size of all files in the directory
du -c /mailacct/imapbox/Maildir/.Archives.2018/cur/* | grep ""total$""

# List individual file sizes (for verification)
ls -l --block-size=K /mailacct/imapbox/Maildir/.Archives.2018/cur/
```

### 6. Check for Symbolic Links and Hardlinks
Ensure there are no symbolic links or hardlinks causing issues:
```sh
# List symbolic links in the directory (if any)
find /mailacct/imapbox/Maildir/.Archives.2018/cur/ -type l

# List all files including their inode numbers for duplicate checks
ls -li /mailacct/imapbox/Maildir/.Archives.2018/cur/
```

### 7. Check the Filesystem Integrity
Even though you mentioned it might not be a filesystem issue, running fsck is always a good precaution:
```sh
# Ensure the filesystem is mounted read-only or unmounted before checking
fsck /dev/<your_device>
```

By performing these tests and comparing outputs from different commands, you can pinpoint the cause of why `du` is failing to count files correctly while other tools like `ls` are not showing any issues. This will help in reproducing the bug and further diagnosing it.","To help diagnose and potentially reproduce this issue, you'll want to perform a series of checks and tests that will help narrow down what might be causing `newfstatat` to stop counting files at a certain point.

### Steps to Reproduce the Bug

1. **Check Filesystem Consistency:**
   - Run a filesystem check on the volume:
     ```bash
     sudo fsck /dev/sdXn  # Replace sdXn with your partition identifier.
     ```

2. **Verify File Permissions and Ownership:**
   - Check the permissions and ownership of the files in the directory:
     ```bash
     ls -lZ /mailacct/imapbox/Maildir/.Archives.2018/cur/
     ```
   
3. **Use `stat` to Inspect Files Individually:**
   - Use `stat` on each file individually to see if there's a problem with one of the files:
     ```bash
     for f in /mailacct/imapbox/Maildir/.Archives.2018/cur/*; do 
         stat ""$f"" || echo ""Error with $f"";
     done
     ```

4. **Check File Descriptors and Limits:**
   - Verify that there are no file descriptor limits being hit:
     ```bash
     ulimit -n
     ```
   
5. **Test `newfstatat` Directly (If Possible):**
   - If you have access to a C compiler, write a simple program using `newfstatat` and see if it reproduces the issue.
     ```c
     #include <stdio.h>
     #include <stdlib.h>
     #include <string.h>
     #include <sys/stat.h>
     #include <fcntl.h>

     int main() {
         DIR *dir;
         struct dirent *entry;
         char path[1024];
         struct stat st;

         dir = opendir(""/mailacct/imapbox/Maildir/.Archives.2018/cur/"");
         if (dir == NULL) {
             perror(""opendir"");
             return EXIT_FAILURE;
         }

         while ((entry = readdir(dir)) != NULL) {
             snprintf(path, sizeof(path), ""/mailacct/imapbox/Maildir/.Archives.2018/cur/%s"", entry->d_name);
             if (newfstatat(AT_FDCWD, path, &st, 0) == -1) {
                 perror(""newfstatat"");
                 continue;
             }
             printf(""%s: %ld\n"", entry->d_name, st.st_size);
         }

         closedir(dir);
         return EXIT_SUCCESS;
     }
     ```
   - Compile and run the program:
     ```bash
     gcc -o test_newfstatat test_newfstatat.c
     ./test_newfstatat
     ```

6. **Check for Large Files:**
   - Sometimes, very large files can cause issues; ensure there aren't any unusually large files in the directory.
     ```bash
     find /mailacct/imapbox/Maildir/.Archives.2018/cur/ -type f -size +500M -print
     ```

7. **Check for Corrupted Files:**
   - Use tools like `file` to check if any files are corrupted:
     ```bash
     for f in /mailacct/imapbox/Maildir/.Archives.2018/cur/*; do 
         file ""$f"";
     done | grep -v ""ASCII text\|data""
     ```

### Additional Checks

- **Check Logs:**
  - Look at system logs for any clues:
    ```bash
    sudo journalctl -xe
    ```
  
- **Use `strace`:**
  - Run the command (or script) with `strace` to see if there are any errors or unusual behavior when it stops counting files.
    ```bash
    strace newfstatat /mailacct/imapbox/Maildir/.Archives.2018/cur/
    ```

### Conclusion

By following these steps, you should be able to gather more information about what might be causing `newfstatat` to stop counting files in the directory. If none of these steps reveal a problem, it may be worth considering if there are any specific interactions with other processes or system settings that could be affecting behavior.",https://bugzilla.redhat.com/show_bug.cgi?id=1674156,Difficulty understanding this one
1511951,Stepan Broz,2017-11-10T13:36:42Z,2019-01-22T08:56:40Z,CLOSED ERRATA,high,high,Fedora,coreutils,df -l hangs on autofs automounted stale nfs mounts,normal,The df -l command does not perform stat() calls on autofs (or dummy) filesystems.,The df -l command will hang on the stat() call for /mnt/test/test004.,Always,"1. Create an NFS server, test directories and export them (/etc/exports):

    /srv/exports/test001 192.168.122.0/24(ro,root_squash)
    /srv/exports/test002 192.168.122.0/24(ro,root_squash)
    /srv/exports/test003 192.168.122.0/24(ro,root_squash)
    /srv/exports/test004 192.168.122.0/24(ro,root_squash)

2. Create autofs map file ""/etc/autofs.direct"" with direct maps to nfs shares:

    /mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001
    /mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002
    /mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003
    /mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004

3. Include the ""/etc/autofs.direct"" in ""/etc/auto.master"":

    /- /etc/auto.direct

4. Restart autofs and check for the following entries in /proc/self/mounts:

    /etc/auto.direct on /mnt/test/test001 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test002 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test003 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test004 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)

5. Mount the autofs mountpoint by e.g. # cd /mnt/test/test004 and verify the fs is mounted (/proc/self/mounts):
    192.168.122.1:/srv/exports/test012 on /mnt/test/test012 type nfs4 (... options trimmed ...)

6. Exit the mountpoint to home directory: # cd
7. Stop the NFS service on the NFS server (# systemctl nfs stop).
8. Perform strace -Tttfvs 4096 df -l","$ echo ""/srv/exports/test001 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test002 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test003 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test004 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ exportfs -a

$ echo ""/mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001"" >> /etc/autofs.direct
$ echo ""/mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002"" >> /etc/autofs.direct
$ echo ""/mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003"" >> /etc/autofs.direct
$ echo ""/mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004"" >> /etc/autofs.direct

$ echo ""/- /etc/autofs.direct"" >> /etc/auto.master

$ systemctl restart autofs

$ cat /proc/self/mounts

$ cd /mnt/test/test004
$ mount | grep /mnt/test/test004

$ cd

$ systemctl stop nfs

$ strace -Tttfvs 4096 df -l
","```bash
# Create NFS server and export directories
echo ""/srv/exports/test001 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
echo ""/srv/exports/test002 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
echo ""/srv/exports/test003 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
echo ""/srv/exports/test004 192.168.122.0/24(ro,root_squash)"" >> /etc/exports

# Create autofs map file
echo ""/mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001"" > /etc/auto.direct
echo ""/mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002"" >> /etc/auto.direct
echo ""/mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003"" >> /etc/auto.direct
echo ""/mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004"" >> /etc/auto.direct

# Include the autofs map file in auto.master
echo ""/- /etc/auto.direct"" >> /etc/auto.master

# Restart autofs service (command may vary depending on system)
systemctl restart autofs

# Mount the autofs mountpoint
cd /mnt/test/test004

# Stop the NFS service on the NFS server
systemctl stop nfs

# Perform strace to reproduce the bug
strace -Tttfvs 4096 df -l
```","touch /etc/auto.direct
echo '/mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001' > /etc/auto.direct
echo '/mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002' >> /etc/auto.direct
echo '/mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003' >> /etc/auto.direct
echo '/mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004' >> /etc/auto.direct
echo '/- /etc/auto.direct' > /etc/auto.master
systemctl restart autofs
cd /mnt/test/test004
cd
systemctl stop nfs
strace -Tttfvs 4096 df -l","None

The provided bug description includes a set of steps that would be necessary to configure and test the issue in a real environment, but it does not provide a direct command or test case to reproduce the bug without setting up an NFS server, configuring autofs maps, and other preparatory actions. Therefore, we cannot provide a single command or test case to directly reproduce the bug as described.",https://bugzilla.redhat.com/show_bug.cgi?id=1511951,
1634045,Dustin Black,2018-09-28T14:37:41Z,2019-01-10T12:07:38Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,"bash built-in printf errors on float values with locales using ',' for radix character",normal,"1,200,000","-bash: printf: 1.2: invalid number
0,000000",Always,LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,$ LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,"```bash
LC_NUMERIC=de_DE.UTF-8 printf %f 1.2
LC_NUMERIC=de_DE.UTF-8 /usr/bin/printf %f 1.2
LC_NUMERIC=de_DE.UTF-8 printf %f 1,2
LC_NUMERIC=de_DE.UTF-8 /usr/bin/printf %f 1,2
```",LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,https://bugzilla.redhat.com/show_bug.cgi?id=1634045,
1649774,Mat Booth,2018-11-14T13:42:46Z,2018-11-28T08:26:06Z,CLOSED WORKSFORME,unspecified,low,Fedora,coreutils,broken URL in install(1) man page,normal,,broken links in manpages for coreutils,,$ man install,$ man install,"man install
wget https://www.gnu.org/software/coreutils/install || echo ""404 error""",man install,None,https://bugzilla.redhat.com/show_bug.cgi?id=1649774,
199066,Russell Coker,2006-07-16T21:13:40Z,2018-11-27T19:46:28Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,su -c does not need to call setsid() when target is root,normal,,"The attached patch makes ""su root -c command"" not call setsid() and also gives 
a command-line option -C which does the same as -c but doesn't call setsid() ",Always,,"$ su root -c ""command""",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=199066,check this one
1635899,Laura Pardo,2018-10-03T20:57:38Z,2018-10-30T17:24:48Z,CLOSED ERRATA,low,low,Fedora,coreutils,CVE-2018-17942 coreutils: gnulib: heap-based buffer overflow in convert_to_decimal function in vasnprintf.c [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1635899,
1637531,ricky.tigg,2018-10-09T12:35:09Z,2018-10-10T11:24:58Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Correct form regarding part of the output,normal,one space mark is enough and then appropriate.,two space marks between output expressions.,Always,execute 'ls'; model,$ ls,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1637531,
1611211,Maryna Nalbandian,2018-08-02T08:05:36Z,2018-08-13T14:27:09Z,CLOSED NOTABUG,medium,medium,Fedora,coreutils,Man page scan results for coreutils,,,,,"1. Download man-page-day from:

    https://pagure.io/ManualPageScan/blob/master/f/man-page-day.sh

2. Run the script:
    $ ./man-page-day.sh coreutils",$ ./man-page-day.sh coreutils,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1611211,
1598518,Florian Weimer,2018-07-05T17:25:35Z,2018-07-10T14:25:37Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,coreutils: glibc about to add slightly incompatible renameat2 function,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1598518,
1596183,ricky.tigg,2018-06-28T11:52:32Z,2018-06-28T13:57:49Z,CLOSED UPSTREAM,unspecified,low,Fedora,coreutils,"Conversions' results from data-storage values displayed as 1024-blocks into values in bits, do not match real sizes.",normal,df's outputs to be similar to the ones resulting from the 'lsblk' command â here 161 052 884 992 bitsâ,1024 * 153 761 232 = 157 451 501 568 bits; result does not match the real size which is illustrated as output from the 'lsblk' command.,,"$ LANG=C df -P
Filesystem                    1024-blocks  Used    Available Capacity Mounted on
(...)
/dev/mapper/fedora--live-root 153761232    6048548 139832392 5%       /",$ LANG=C df -P,"```bash
LANG=C df -P
lsblk -b
```","LANG=C df -P
lsblk -b",None,https://bugzilla.redhat.com/show_bug.cgi?id=1596183,
1303456,Bob Gustafson,2016-01-31T21:45:52Z,2018-06-28T13:57:49Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,dd byte count report does not correlate with df byte count report,normal,"I would think that the sizes reported by dd and df would be comparable, but they are not.",the count given by the dd copies don't match,Always,"1. create raid 1 pair
2. copy a 3rd single disk partition to a raid1 pair lvm partition
3. do df and compare results.","$ dd if=/dev/fedora/root of=/dev/fedora23/root
$ dd if=/dev/fedora/home of=/dev/fedora23/home

$ df -h","```bash
# Create two LVM volumes (fedora and fedora23)
lvcreate -n swap -L 15G fedora
lvcreate -n home -L 865G fedora
lvcreate -n root -L 50G fedora
lvcreate -n swap -L 15G fedora23
lvcreate -n home -L 1750G fedora23
lvcreate -n root -L 50G fedora23

# Create some data on the source partitions
dd if=/dev/zero of=/dev/fedora/root bs=1M count=26000
dd if=/dev/zero of=/dev/fedora/home bs=1M count=57000

# Copy data from source to target using dd
dd if=/dev/fedora/root of=/dev/fedora23/root
dd if=/dev/fedora/home of=/dev/fedora23/home

# Compare the sizes reported by dd and df
df -h /dev/fedora/root
df -h /dev/fedora23/root
df -h /dev/fedora/home
df -h /dev/fedora23/home

# Mount the target partitions to verify the actual data size
mkdir /mnt/rootn /mnt/homen
mount /dev/fedora23/root /mnt/rootn
mount /dev/fedora23/home /mnt/homen

du -h /mnt/rootn | tail -1
du -h /mnt/homen | tail -1
```","None

The provided information indicates a discrepancy between the data copied using `dd` and the actual space used on the filesystems as reported by `df`. However, there is no specific coreutils command that can be isolated from this scenario to directly reproduce the described issue. The commands given are part of a broader process involving RAID setup and LVM partition management which cannot be simply reduced to a single or set of coreutils commands for reproduction purposes without additional context or environment specifics.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1303456,
1594812,ricky.tigg,2018-06-25T12:57:36Z,2018-06-26T07:40:13Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,System language set and system default language mixed in an stderr output stream.,normal,No mixing of language. Otput uniform in Finnish when available.,"Test case: Finnish as System language â Enter a non-existent path:
$ ls -l /var/lib/libvirt/pictures/
ls: tiedostoa '/var/lib/libvirt/pictures/' ei voi kÃ¤sitellÃ¤: No such file or directory",Always,"$ ls -l /var/lib/libvirt/pictures/
","$ ls -l /var/lib/libvirt/pictures/
","```bash
export LANG=fi_FI
ls -l /var/lib/libvirt/pictures/
```",ls -l /var/lib/libvirt/pictures/,ls -l /var/lib/libvirt/pictures/,https://bugzilla.redhat.com/show_bug.cgi?id=1594812,
1591152,ricky.tigg,2018-06-14T07:44:45Z,2018-06-14T09:08:49Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Some ls commands aiming to produce identical results produce different outputs.,normal,Output resulting from 'ls -l /usr/bin | grep waterfox' to be identical to the once resulting from 'ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox'.,"$ ls -l /usr/bin | grep waterfox
lrwxrwxrwx. 1 root root          28 Jun 13 22:14 waterfox -> /usr/local/waterfox/waterfox

$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox
lrwxrwxrwx. 1 root root 28 Jun 13 22:14 /usr/bin/waterfox -> /usr/local/waterfox/waterfox",Always,"$ ls -l /usr/bin | grep waterfox
$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox","$ ls -l /usr/bin | grep waterfox
$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox","```bash
mkdir -p /usr/local/waterfox
touch /usr/local/waterfox/waterfox
ln -s /usr/local/waterfox/waterfox /usr/bin/waterfox
ls -l /usr/bin | grep waterfox
ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox
```","ls -l /usr/bin | grep waterfox
ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox",None,https://bugzilla.redhat.com/show_bug.cgi?id=1591152,
1591002,Marcin Juszkiewicz,2018-06-13T21:33:42Z,2018-06-13T21:45:53Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,User lost all groups?,normal,"23:28 (3s) hrw@puchatek:~$ whoami; id
hrw
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
23:28 (0s) hrw@puchatek:~$ ","23:28 (3s) hrw@puchatek:~$ whoami; id; id hrw; sudo id hrw
hrw
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw) kontekst=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
23:28 (0s) hrw@puchatek:~$ ",Always,$ whoami; id; id hrw; sudo id hrw,$ whoami; id; id hrw; sudo id hrw,whoami; id; id hrw; sudo id hrw,"None

The bug described involves an issue with group access not being correctly recognized after logging in, which affects the `pulseaudio` service and possibly other applications. The problem seems related to how the user's group memberships are handled upon login rather than an issue directly reproducible through coreutils commands alone. Since the provided description does not offer a specific command or test case that can reproduce this exact behavior with just `coreutils`, the response is ""None"".",None,https://bugzilla.redhat.com/show_bug.cgi?id=1591002,
1537070,Kai Engert (:kaie) (inactive account),2018-01-22T11:37:06Z,2018-06-11T19:10:47Z,CLOSED WORKSFORME,unspecified,unspecified,Fedora,coreutils,Create coreutils sub-package that contains ln and doesn't depend on openssl-libs,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1537070,
1577872,Rafal Luzynski,2018-05-14T10:19:33Z,2018-06-06T08:54:50Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"Apply upstream fixes for ""ls"" and ""date""",normal,"ls -l should have enough space to display the full abbreviated month name: ""de marÃ§"", ""de maig"", ""de juny"", ""de jul."" (yes, if the name of a month is short it is not abbreviated).

date should display the name of the current month, in all languages. If a language needs multiple grammar forms of a month name then the form appropriate when displaying a month standalone should be used (this usually means a nominative case)","If the current directory contains files last updated in March, May, June or July (any year) then ""ls -l"" in Catalan displays the month name as ""de ma"" which is ambiguous. The same problem may also appear in other languages.

The date command displays:

%OB",Always,"1. Open a text console (Terminal, xterm, konsole, text mode)
2. Execute the command:

LC_ALL=ca_ES.utf8 ls -l

3. Execute the command:

date ""+%OB""","$ LC_ALL=ca_ES.utf8 ls -l
$ date ""+%OB""","```bash
LC_ALL=ca_ES.utf8 ls -l
date ""+%OB""
```","LC_ALL=ca_ES.utf8 ls -l
date ""+%OB""","LC_ALL=ca_ES.utf8 ls -l
date ""+%OB""",https://bugzilla.redhat.com/show_bug.cgi?id=1577872,
1582165,ricky.tigg,2018-05-24T12:14:27Z,2018-05-28T13:21:10Z,CLOSED WONTFIX,unspecified,low,Fedora,coreutils,"Enhancements â Accuracy, Documentation, Conventions, Basic units of measure",,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1582165,Recommendation
453709,Wayne Pollock,2008-07-02T05:37:39Z,2018-04-11T19:34:34Z,CLOSED RAWHIDE,low,medium,Fedora,coreutils,ls -i reports incorrect inode numbers,normal,"$ /bin/ls -i
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp
$ /bin/ls -i --color
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp","$ cd /
$ /bin/ls -i
 648321 bin    907649 home         162081 misc   842817 proc     1329057 srv   
   1977377 usr
 680737 boot   226913 lib         2463617 mnt   2301537 root     1718049 sys   
    583489 var
2269121 dev        11 lost+found   486241 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt   1912545 selinux  2236705 tmp
$ /bin/ls -i --color
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp",Always,"1. /bin/ls -i /
2. /bin/ls -i -color=auto","$ /bin/ls -i /
$ /bin/ls -i -color=auto","/bin/ls -i /
/bin/ls -i --color=auto 
cd / 
/bin/ls -i 
/bin/ls -i --color","/bin/ls -i /
/bin/ls -i --color=auto","/bin/ls -i /
/bin/ls -i --color=auto /",https://bugzilla.redhat.com/show_bug.cgi?id=453709,
1564541,Don Swaner,2018-04-06T15:02:36Z,2018-04-06T16:13:37Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Sometimes when rebooting the date command initially returns an invalid time,normal,"Consistent times - that is, the date command in the script does not show
a time several hours before the script was run.","Sometimes my cron job mail output looks like:

> Date: Fri, 6 Apr 2018 10:09:36 -0400
> From: ""(Cron Daemon)"" <root@gecko1.bugbane-hollow>
> To: root@gecko1.bugbane-hollow
> Subject: Cron <root@gecko1> nice run-parts /root/cron.reboot
>
> /root/cron.reboot/000_resume_boinc.sh:
>
> ++ cd /root
> ++ date +%X
> 06:09:20 AM
> ++ /root/bin/wait_boinc_up.awk
> ++ date +%X
> 10:09:36 AM
> ...

Note the time of the cron job, 10:09:36.
However, the output of the first date command is 06:09:20 AM, hours before the
reboot cron job ran - more or less the time of the previous reboot.",Not Always,"1.  In a personal crontab for root, specify a line like:
@reboot        nice run-parts /root/cron.reboot
2.  In the /root/cron.reboot directory, specify a member which includes the following:
set -x
cd /root
date ""+%X""
[some command that takes a few seconds, maybe just a ""sleep 5""]
date ""+%X""
...
3.  reboot
4.  review mail from reboot cron job",,"```bash
crontab -e
```
Add the following line:
```bash
@reboot        nice run-parts /root/cron.reboot
```
Create a file in `/root/cron.reboot/` (e.g., `000_test.sh`) with the following contents:
```bash
#!/bin/bash
set -x
cd /root
date ""+%X""
sleep 5
date ""+%X""
```
Make the script executable:
```bash
chmod +x /root/cron.reboot/000_test.sh
```
Reboot the system and review the mail from the reboot cron job.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1564541,
1555079,Ben Woodard,2018-03-13T23:11:29Z,2018-03-30T13:14:01Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,yacc source files missing from debugsource,,,.y files seem to be missing from the debuginfo,,,"$ sudo dnf debuginfo-install coreutils
$ rpm -ql coreutils-debugsource-8.27-20.fc27.x86_64 | grep date
$ rpm -ql coreutils-debuginfo-8.27-20.fc27.x86_64 | grep date
$ rpm -qlp coreutils-debuginfo-8.22-18.el7.x86_64.rpm | grep date","sudo dnf debuginfo-install coreutils
gdb --args date
break parse_datetime2 
run",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1555079,
1544392,Miroslav Lichvar,2018-02-12T11:11:51Z,2018-02-20T17:14:50Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,du crashes on live directory,,,,,,,"```bash
mkdir source
for i in {1..40000}; do
  mkdir source/$i
  touch source/$i/file
  ln -s /etc/passwd source/$i/symlink
done
cp -r source target &
du -hs target
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1544392,
1532285,Laura Pardo,2018-01-08T15:10:32Z,2018-01-30T18:07:12Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,CVE-2017-18018 coreutils: race condition vulnerability in chown and chgrp [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1532285,
1259942,Sam Elstob,2015-09-03T21:25:34Z,2018-01-30T07:51:09Z,CLOSED NEXTRELEASE,unspecified,medium,Fedora,coreutils,"coreutils ""sort -M"" memory leak",normal,"No ""definitely lost"" blocks when using -M","[sam@deben coreutils]$ valgrind sort 10000.txt > /dev/null
==8382== Memcheck, a memory error detector
==8382== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==8382== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==8382== Command: sort 10000.txt
==8382== 
==8382== 
==8382== HEAP SUMMARY:
==8382==     in use at exit: 192 bytes in 14 blocks
==8382==   total heap usage: 60 allocs, 46 frees, 74,697,309 bytes allocated
==8382== 
==8382== LEAK SUMMARY:
==8382==    definitely lost: 0 bytes in 0 blocks
==8382==    indirectly lost: 0 bytes in 0 blocks
==8382==      possibly lost: 0 bytes in 0 blocks
==8382==    still reachable: 192 bytes in 14 blocks
==8382==         suppressed: 0 bytes in 0 blocks
==8382== Rerun with --leak-check=full to see details of leaked memory
==8382== 
==8382== For counts of detected and suppressed errors, rerun with: -v
==8382== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


[sam@deben coreutils]$ valgrind sort -M 10000.txt > /dev/null
==8312== Memcheck, a memory error detector
==8312== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==8312== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==8312== Command: sort -M 10000.txt
==8312== 

==8312== 
==8312== HEAP SUMMARY:
==8312==     in use at exit: 92,753,702 bytes in 481,851 blocks
==8312==   total heap usage: 722,815 allocs, 240,964 frees, 186,001,505 bytes allocated
==8312== 
==8312== LEAK SUMMARY:
==8312==    definitely lost: 92,731,870 bytes in 481,751 blocks
==8312==    indirectly lost: 0 bytes in 0 blocks
==8312==      possibly lost: 21,021 bytes in 78 blocks
==8312==    still reachable: 811 bytes in 22 blocks
==8312==         suppressed: 0 bytes in 0 blocks
==8312== Rerun with --leak-check=full to see details of leaked memory
==8312== 
==8312== For counts of detected and suppressed errors, rerun with: -v
==8312== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)",Always,"1. Create a test file

base64 /dev/urandom | head -n 10000 > 10000.txt

2. Run under valgrind (defaults)

valgrind sort 10000.txt > /dev/null

3. Run under valgrind (-M)

valgrind sort -M 10000.txt > /dev/null","$ base64 /dev/urandom | head -n 10000 > 10000.txt
$ valgrind sort 10000.txt > /dev/null
$ valgrind sort -M 10000.txt > /dev/null","```bash
base64 /dev/urandom | head -n 10000 > 10000.txt
valgrind sort -M 10000.txt > /dev/null
```","base64 /dev/urandom | head -n 10000 > 10000.txt
valgrind sort -M 10000.txt > /dev/null","base64 /dev/urandom | head -n 10000 > 10000.txt
valgrind sort -M 10000.txt > /dev/null",https://bugzilla.redhat.com/show_bug.cgi?id=1259942,
1527074,ricky.tigg,2017-12-18T13:47:22Z,2017-12-18T14:46:31Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Execute permission âxâ is not applied to an .sh file while it is granted successfully.,normal,The -sh file with the present characteristics to be executable from an USB drive formatted with VFAT.,"[yk@_]$ ./install.sh
bash: ./install.sh: Permission denied",Always,"yk@_]$ chmod +x install.sh
[yk@_]$ ls -l  install.sh
-rw-r--r--. 1 yk yk 1415 12. 7. 14:21 install.sh
[yk@_]$ mount|grep /dev/sdb1
/dev/sdb1 on /run/media/yk/FEDORA-WS-L type vfat (rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2)","$ chmod +x install.sh
$ ls -l install.sh
$ mount | grep /dev/sdb1","```bash
# Create a sample .sh file on an external USB drive formatted with VFAT
echo ""echo 'Hello World'"" > /run/media/yk/FEDORA-WS-L/install.sh

# Verify initial permissions
ls -l /run/media/yk/FEDORA-WS-L/install.sh

# Attempt to add execute permission
chmod +x /run/media/yk/FEDORA-WS-L/install.sh

# Verify permissions after attempting to add execute permission
ls -l /run/media/yk/FEDORA-WS-L/install.sh

# Try to execute the script
/run/media/yk/FEDORA-WS-L/install.sh

# Alternatively, try executing with bash
bash /run/media/yk/FEDORA-WS-L/install.sh
```","None

The provided information indicates a scenario where execute permissions are not applied to a `.sh` file when it is located on an external USB drive formatted with VFAT, but there isn't a specific command sequence given that would allow us to directly reproduce this issue in any environment without access to the exact conditions (such as having an identical VFAT-formatted USB drive and the specific version of bash). The commands provided are descriptive of the problem encountered rather than prescriptive steps for reproducing it.","touch install.sh  
chmod +x install.sh  
mount | grep /dev/sdb1  
ls -l install.sh  
./install.sh",https://bugzilla.redhat.com/show_bug.cgi?id=1527074,
1520399,Christian Groessler,2017-12-04T12:32:30Z,2017-12-04T21:02:45Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,/usr/bin/stat -c %N doesn't behave as expected,normal,bar' -> 'foo',bar -> foo,Always,"$ touch foo
$ ln -s foo bar
$ stat -c %N bar
bar -> foo
$","$ touch foo
$ ln -s foo bar
$ stat -c %N bar","touch foo
ln -s foo bar
stat -c %N bar","touch foo
ln -s foo bar
stat -c %N bar","touch foo  
ln -s foo bar  
stat -c %N bar",https://bugzilla.redhat.com/show_bug.cgi?id=1520399,
1504053,ricky.tigg,2017-10-19T11:59:33Z,2017-10-21T20:17:58Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,Twenty commands related to permissions granting that should produce a message error.,normal,It makes an over total of twenty commands that should produce a message error.,All attempts will be validated without any notification from coreutils.,,"1. Open a terminal, log in as root and move to the folder containing the target file for testing purpose.

2. Test at least one of the commands or all of them â It makes an over total of twenty commands that should produce a message error.

All the followings possible combinations are:
# chmod [u, g, o, ugo, a, ugoa, ugao, uago, augo]+/-<no_value [r, w, x, X, s, t]> </file>
which makes 18 combinations, and

# chmod +/-<no_value [r, w, x, X, s, t]> </file>
which makes a total of two combinations.

Examples of such combinations:
# chmod o- </file>
# chmod + </file>
# chmod ugao- </file>
and so on.
","$ sudo su
$ cd /path/to/folder
$ chmod o- <file>
$ chmod + <file>
$ chmod ugoa- <file>","```bash
chmod o- file
chmod + file
chmod ugao- file
chmod u- file
chmod g- file
chmod a- file
chmod ugo- file
chmod ugoa- file
chmod ugao- file
chmod uago- file
chmod augo- file
chmod -r file
chmod +r file
chmod -w file
chmod +w file
chmod -x file
chmod +x file
chmod -X file
chmod +X file
chmod -s file
chmod +s file
chmod -t file
chmod +t file
```","chmod o- /file
chmod + /file
chmod ugao- /file

Replace `/file` with an actual file path for testing.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1504053,
1499625,Martin Pitt,2017-10-09T06:26:52Z,2017-10-09T07:31:20Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,ln -sf does not update symlink if target is directory,normal,"""foo"" symlink should point to ""new"".","Symlink did not get updated to point to ""new"":

lrwxrwxrwx 1 martin martin 3  9. Okt 08:25 foo -> old",Always,"1. mkdir old new
2. ln -s old foo
3. ln -sf new foo
4. ls -l foo","$ mkdir old new
$ ln -s old foo
$ ln -sf new foo
$ ls -l foo","```bash
mkdir old new
ln -s old foo
ln -sf new foo
ls -l foo
```","mkdir old new
ln -s old foo
ln -sf new foo
ls -l foo","mkdir old new  
ln -s old foo  
ln -sf new foo  
ls -l foo",https://bugzilla.redhat.com/show_bug.cgi?id=1499625,
573377,Wolfgang Denk,2010-03-14T14:09:55Z,2017-10-09T07:31:20Z,CLOSED NOTABUG,low,high,Fedora,coreutils,ln -sf does not work,normal,"My expectation is that the result of ""ln -s -f target link_name"" is the same
as that of ""rm -f link_name; ln -s target link_name"".

In this case I exoect that the symbolic link ""baz"" gets removed and a new one created, pointing to ""bar"" similar to this:
        $ rm -f baz
        $ ln -s bar baz
        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users 6 Mar 14 15:09 bar
        lrwxrwxrwx 1 wd users 3 Mar 14 15:09 baz -> bar
        drwxr-xr-x 2 wd users 6 Mar 14 15:08 foo
        $ ls -l foo bar baz
        lrwxrwxrwx 1 wd users 3 Mar 14 15:09 baz -> bar

        bar:
        total 0

        foo:
        total 0","No error raised. ""baz"" still pointing to ""foo"".
""foo"" now contains anew symboic link ""bar"" pointing to itself:

        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users  6 Mar 14 15:02 bar
        lrwxrwxrwx 1 wd users  3 Mar 14 15:02 baz -> foo
        drwxr-xr-x 2 wd users 16 Mar 14 15:05 foo
        $ ls -l foo bar
        bar:
        total 0

        foo:
        total 0
        lrwxrwxrwx 1 wd users 3 Mar 14 15:05 bar -> bar",Always,"1. $ mkdir foo bar
2. $ ln -s foo baz
3. Verify:
        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users 6 Mar 14 15:02 bar
        lrwxrwxrwx 1 wd users 3 Mar 14 15:02 baz -> foo
        drwxr-xr-x 2 wd users 6 Mar 14 15:02 foo
        $ ls -l foo bar
        bar:
        total 0

        foo:
        total 0
4. $ ln -s -f bar baz","$ mkdir foo bar
$ ln -s foo baz
$ ls -ld foo bar baz
$ ls -l foo bar
$ ln -s -f bar baz","```bash
mkdir foo bar
ln -s foo baz
ls -ld foo bar baz
ls -l foo bar
ln -s -f bar baz
ls -ld foo bar baz
ls -l foo bar
```","mkdir foo bar
ln -s foo baz
ls -ld foo bar baz
ls -l foo bar
ln -s -f bar baz
ls -ld foo bar baz
ls -l foo bar","mkdir foo bar  
ln -s foo baz  
ls -ld foo bar baz  
ls -l foo bar  
ln -s -f bar baz  
ls -ld foo bar baz  
ls -l foo bar",https://bugzilla.redhat.com/show_bug.cgi?id=573377,
1496905,ell1e,2017-09-28T18:19:45Z,2017-09-29T10:52:34Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,wc -l gives wrong line count for files with windows line breaks and single trailing CRNL,normal,wc -l prints out same line count as visible in Notepad.exe on Windows,wc -l doesn't agree with Notepad.exe about how many lines this file has,Always,"1. Create above file with Windows line breaks
2. Check it out in Notepad on Windows
3. Try wc -l file.txt","$ touch file.txt
$ notepad file.txt
$ wc -l file.txt","```bash
echo $'ba\r\ncd\nfe\r\n' > test.txt
wc -l test.txt
```","echo -ne ""ba\rcd\nfe\r\n"" > test.txt
wc -l test.txt","echo -e 'ba\rcd\nfe\r' > test.txt
wc -l test.txt",https://bugzilla.redhat.com/show_bug.cgi?id=1496905,
1446266,Martin Kutlak,2017-04-27T14:33:46Z,2017-09-21T00:12:13Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __nanosleep_nocancel(): sleep killed by signal 11,,,,,,,sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1446266,Lack of information
1360903,Daniel Walsh,2016-07-27T19:09:38Z,2017-08-24T03:51:47Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,It would be really helpful for testing if runcon had a --no-new-privs flag,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1360903,Lack of information
1482445,LukÃ¡Å¡ Zachar,2017-08-17T09:45:56Z,2017-08-24T03:51:42Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,coredump in ptx,normal,,Segmentation fault (core dumped),Always,1. ptx reproducer_file,$ ptx reproducer_file,ptx reproducer_file,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1482445,
1483938,Ville SkyttÃ¤,2017-08-22T10:27:37Z,2017-08-22T13:16:24Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Own the %{_libexecdir}/coreutils dir,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1483938,Lack of information
1365933,David Howells,2016-08-10T14:30:01Z,2017-07-31T18:49:53Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,The ls program can't be interrupted by a signal,concurrent,ls command should be interruptible with CTRL-C or suspendable with CTRL-Z,ls is waiting for a network timeout and cannot be cancelled with CTRL-C and cannot be suspended with CTRL-Z,,,,"```bash
mkdir -p /tmp/bugdir
while true; do touch /tmp/bugdir/file$(date +%s); done &
ls /tmp/bugdir
```
Then, in another terminal:
```bash
kill -s SIGINT <pid_of_ls_process>
```
Replace `<pid_of_ls_process>` with the actual process ID of the `ls` command.

Note: The above commands may not exactly reproduce the bug as it seems to be related to a network filesystem issue. However, they attempt to simulate a similar scenario by creating a directory with rapidly changing contents and then trying to list its files while sending a SIGINT signal to the `ls` process.

Alternatively, if you have access to an AFS (Andrew File System) network filesystem, you can try:
```bash
ls /afs/user/dhowells
```
Then, in another terminal:
```bash
kill -s SIGINT <pid_of_ls_process>
```
Again, replace `<pid_of_ls_process>` with the actual process ID of the `ls` command.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1365933,Unsure about the reproducibility
1470769,John Reiser,2017-07-13T15:38:55Z,2017-07-14T11:28:47Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,unsafe localization of error() string after EIO in chroot,normal,"After EIO, then signal the error using as little I/O as possible.","Localization of the third argument to error(), namely
   _(""failed to run command %s"")
uses I/O, namely to set up the locale machinery.",Always,"1. Inject a deliberate error.
--- coreutils-8.25/src/chroot.c.orig	2017-07-13 07:43:21.915621653 -0700
+++ coreutils-8.25/src/chroot.c	2017-07-13 07:44:41.806713319 -0700
@@ -420,8 +420,8 @@
   if (uid_set (uid) && setuid (uid))
     error (EXIT_CANCELED, errno, _(""failed to set user-ID""));
 
-  /* Execute the given command.  */
-  execvp (argv[0], argv);
+  /* Inject deliberate error. */  /* Execute the given command.  */
+  errno = EIO;  /* execvp (argv[0], argv);*/
 
   int exit_status = errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE;
   error (0, errno, _(""failed to run command %s""), quote (argv[0]));","$ cd coreutils-8.25/src
$ cp chroot.c chroot.c.orig
$ sed -i 's/execvp (argv\[0\], argv);/errno = EIO;  \/* execvp (argv[0], argv); *\//g' chroot.c
","```c
// Modify the chroot.c file as follows:
--- coreutils-8.25/src/chroot.c.orig	2017-07-13 07:43:21.915621653 -0700
+++ coreutils-8.25/src/chroot.c	2017-07-13 07:44:41.806713319 -0700
@@ -420,8 +420,8 @@
   if (uid_set (uid) && setuid (uid))
     error (EXIT_CANCELED, errno, _(""failed to set user-ID""));
 
-  /* Execute the given command.  */
-  execvp (argv[0], argv);
+  /* Inject deliberate error. */  /* Execute the given command.  */
+  errno = EIO;  /* execvp (argv[0], argv);*/

// Compile and run the modified chroot command
gcc -o chroot coreutils-8.25/src/chroot.c
./chroot /mnt/sysimage /bin/sh
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1470769,
1024730,IBM Bug Proxy,2013-10-30T10:38:55Z,2017-07-13T11:30:40Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,"While mounting two different file system (ext3, ext4 ) df tool shows only one mounted file system",normal,"df command should list the new partition mounted on /tmp/test/, showing /dev/mapper/mpatha2 ext3 1.8T 21G 1.7T 2% /tmp/test","df shows /dev/mapper/mpatha1 fuse 1.8T 21G 1.7T 2% /tmp/test, which is the previous mount instead of the newly mounted one",Always,"(1) You mounted two partititions - 
    part    -> fs   -> mnt point    ->  avl disk    ->  used    ->  avl %
------------------------------------------------------------------------------
    mpath1  -> fuse -> /tmp/test/   ->  1.0 T       ->  1.0 T   ->  100% 
    mpath2  -> ext3 -> /mnt         ->  1.8 T       ->  21G     ->  2% 
 
(2) You unmount the /mnt (formatted with ext3)
(3) mount mpath2 (you unmounted in step 2) on /tmp/test/
(4) Now , you do df and expect this - 

Filesystem          Type      Size  Used Avail Use% Mounted on
/dev/mapper/mpatha2 ext3      1.8T   21G  1.7T   2% /tmp/test
 
But you see this - 
Filesystem          Type      Size  Used Avail Use% Mounted on
/dev/mapper/mpatha1 fuse      1.8T   21G  1.7T   2% /tmp/test","$ mount /dev/mpath1 /tmp/test/
$ umount /mnt
$ mount /dev/mpath2 /tmp/test/
$ df",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1024730,
1465935,ricky.tigg,2017-06-28T13:22:43Z,2017-06-28T14:08:52Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,"Output resulted from sha256sum claims ""No such file or directory"", while the file in question is present.",normal,Function sha256sum should return a viable message regarding the ISO image file in directory,"Output resulted from the function sha256sum claims ""No such file or directory"", while not only the very file is present at the correct location but also its related rights are sufficient enough",Always,"1. Move both one to another related downloaded official files to the same folder.
2. Compute required command mentioned on siteâs url (https://fedoramagazine.org/verify-fedora-iso-file/) till the sha256sum command.","$ mv file1 file2 /path/to/same/folder/
$ curl https://fedoramagazine.org/verify-fedora-iso-file/
(Follow the instructions until the sha256sum command is mentioned)","```bash
mkdir test_dir
cd test_dir
wget https://example.com/image.iso  # replace with actual ISO download URL
wget https://example.com/image.iso.sha256  # replace with actual SHA256 sum download URL
sha256sum image.iso
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1465935,
1463384,Igor Gnatenko,2017-06-20T17:49:15Z,2017-06-22T12:28:50Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[PATCH] Provide /bin/foo binaries in single subpackage,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1463384,Lack of information
1457214,Matus Kocka,2017-05-31T11:10:22Z,2017-05-31 11:10:22Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,coreutils-single doesn't provide all virtual provides that coreutils provides,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1457214,Lack of information
1283760,Robbie Harwood,2015-11-19T18:30:02Z,2017-05-15T04:26:24Z,CLOSED ERRATA,low,low,Fedora,coreutils,coreutils: tail: inotify support changes behavior of -F with subdirs,normal,tail -F with inotify support should correctly display the contents of the new file when the directory is re-created,tail -F with inotify support fails to display the contents of the newly re-created file,Always,,"$ tail -F scratchdir/tests.log
$ rm -rf scratchdir && mkdir scratchdir","```bash
mkdir scratchdir
touch scratchdir/tests.log
echo ""Initial content"" > scratchdir/tests.log
tail -F scratchdir/tests.log &
rm -rf scratchdir
mkdir scratchdir
touch scratchdir/tests.log
echo ""New content"" > scratchdir/tests.log

# For comparison, also test without inotify:
tail --disable-inotify -F scratchdir/tests.log &
rm -rf scratchdir
mkdir scratchdir
touch scratchdir/tests.log
echo ""New content"" > scratchdir/tests.log
```","mkdir scratchdir && touch scratchdir/tests.log
tail -F scratchdir/tests.log &
TAIL_PID=$!
sleep 1
rm -rf scratchdir && mkdir scratchdir && touch scratchdir/tests.log && echo ""test"" >> scratchdir/tests.log
sleep 1
kill $TAIL_PID",None,https://bugzilla.redhat.com/show_bug.cgi?id=1283760,
1444802,Petr Å abata,2017-04-24T11:04:40Z,2017-05-01T18:17:02Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,coreutils shouldn't obsolete coreutils-single,normal,The coreutils-single package should be installed when requested,The coreutils package is installed instead of coreutils-single,Always,"1. Attempt to install coreutils-single with DNF2
",$ dnf install coreutils-single,dnf2 install coreutils-single,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1444802,
1446494,Ali Akcaagac,2017-04-28T08:30:38Z,2017-04-28T09:58:47Z,CLOSED CANTFIX,unspecified,unspecified,Fedora,coreutils,coreutils conflicts with coreutils-single,normal,the installation of coreutils should be allowed without conflicts or dependency issues,"a conflict is reported between coreutils and coreutils-single-8.27-3.fc27.x86_64, preventing installation",Always,,"$ sudo yum install coreutils
$ sudo yum install coreutils-single-8.27-3.fc27.x86_64
$ sudo yum install coreutils",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1446494,
1361694,Graham White,2016-07-29T18:56:39Z,2017-04-20T08:57:52Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,ls output changed to include quoting space characters in coreutils 8.25,normal,ls command should list filenames without single quotes around filenames containing spaces,ls command now displays filenames containing spaces wrapped in single quotes,Always,,$ ls,"```bash
mkdir test_dir
cd test_dir
touch ""file with space""
ls
```","touch ""file with space""
ls","touch ""file with spaces""
ls",https://bugzilla.redhat.com/show_bug.cgi?id=1361694,
186879,Karel van Houten,2006-03-27T08:32:12Z,2017-03-11T22:27:55Z,CLOSED NOTABUG,medium,medium,Fedora,coreutils,"su -c ""command"" has no controlling terminal anymore",normal,"[karel@fc5 karel]$ /tmp/su4 root -c ""bash""
Password: 
[root@fc5 karel]# cat
(type ^C)
[root@fc5 karel]# exit
exit","[karel@fc5 karel]$ /bin/su root -c ""bash""
Password: 
[root@fc5 karel]# cat
(type ^C)
Session terminated, killing shell... ...killed.
(session hangs, with 2 processes reading from terminal)",Always,"1. su root -c ""bash"" (enter password)
2. cat
3. type ^C to interrupt.","$ su root -c ""bash""
$ cat
$ ^C","su root -c ""bash""
cat
^C","su root -c ""bash""
cat
^C","su root -c ""bash""  
cat  
^C",https://bugzilla.redhat.com/show_bug.cgi?id=186879,
1398913,Scott Shambarger,2016-11-27T09:42:33Z,2017-03-06T08:01:05Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,mkdir fails to label some directories when -p -Z options are used.,normal,a/b should also be labeled,"mkdir: failed to set default creation context for 'a/b': No such file or directory
SELinux labels set on a and a/b/c, but not on a/b",Always,1. Create 3 or more directories together with (for eg) mkdir -p -Z a/b/c,$ mkdir -p -Z a/b/c,"```bash
mkdir -p -Z a/b/c
ls -lZ a b a/b a/b/c
```","mkdir -p -Z a/b/c

mkdir -p -Z a/b/c/d",mkdir -p -Z a/b/c,https://bugzilla.redhat.com/show_bug.cgi?id=1398913,
1421495,J. Randall Owens,2017-02-12T18:24:20Z,2017-02-13T13:20:12Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,undocumented df -m switch,normal,"partitions listed in megabytes
documentation at least mentions the switch exists","partitions listed in megabytes (mebibytes, really)
documentation not mentioning any -m switch",Always,"1. df -m
2. df --help
3. man df","$ df -m
$ df --help
$ man df","df -m
df --help
man df","df -m
df --help
man df","df -m  
df --help  
man df",https://bugzilla.redhat.com/show_bug.cgi?id=1421495,
1411403,Greg Oliver,2017-01-09T16:07:34Z,2017-01-09T20:40:45Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Coreutils not displaying thousands separator,normal,"-rw-r--r-- 1 greg greg  75,434 Oct 31 12:12 coreutils.spec
-rw-r--r-- 1 greg greg 172,107 Dec 25 12:42 kernel.spec","-rw-r--r-- 1 greg greg  75434 Oct 31 12:12 coreutils.spec
-rw-r--r-- 1 greg greg 172107 Dec 25 12:42 kernel.spec",Always,"1.  unalias ls && ls -l --block-size=""'1""","$ unalias ls && ls -l --block-size=""1""","```bash
unalias ls
ls -l --block-size=1
```","unalias ls && ls -l --block-size=""'1""","unalias ls && ls -l --block-size=""'1""",https://bugzilla.redhat.com/show_bug.cgi?id=1411403,
1084376,Jakub DorÅÃ¡k,2014-04-04T08:25:25Z,2016-12-01T00:57:48Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,/bin/echo does not treat -- as the last option,normal,"The second command should print just ""-n"".","The first command prints nothing, as it treats -n as an option.
The second command print ""-- -n"", as it treats -- as the first argument.",Always,"1. echo -n
2. echo -- -n","$ echo -n
$ echo -- -n","echo -n
echo -- -n 
echo -- -e
echo -- -E
echo -- --help",echo -- -n,"echo -n  
echo -- -n",https://bugzilla.redhat.com/show_bug.cgi?id=1084376,
953194,Jakub Filak,2013-04-17T15:24:42Z,2016-12-01T00:44:05Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils-8.17-8.fc18: __nanosleep_nocancel: Process /usr/bin/sleep was killed by signal 11 (SIGSEGV),normal,The program should execute without crashing and successfully complete the sleep command for 1000 seconds.,"The program crashed with a segmentation fault while trying to execute the sleep command, causing abnormal termination.",Always,"1. Run the command sleep 1000.
2. Observe the segmentation fault and program termination.","$ sleep 1000",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=953194,
1320681,George R. Goffe,2016-03-23T17:38:31Z,2016-11-22T11:29:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,TTY brightness increases after several lines of display,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1320681,Lack of information
1396064,John Kissane,2016-11-17T11:50:52Z,2016-11-17T19:05:34Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,'who' command has blank output,normal,List of logged in users.,Blank,Always,"1. Run the who command on Fedora 24.
2. Observe the output, which will be blank.",$ who,who,who,None,https://bugzilla.redhat.com/show_bug.cgi?id=1396064,
1392210,Tommy He,2016-11-06T09:10:08Z,2016-11-09T09:32:56Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,[aarch64]rpm install error for coreutils-common,normal,Install without error,Error while installing,Always,1. Try to upgrade coreutils-common by dnf,$ sudo dnf upgrade coreutils-common,dnf update coreutils-common,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1392210,
1339135,Petr Lautrbach,2016-05-24T08:43:01Z,2016-11-03T23:55:02Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,install -d or install -D is not setting the context on directories,normal,install -d or install -D should set the context on directories to match file_contexts,"install -d or install -D is not setting the context on directories to match file_contexts, only on the final file",Always,"$ sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
$ touch foo
$ install -D foo /tmp/foobar/foo
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar
$ ls -Z /tmp/foobar/foo
system_u:object_r:user_home_t:s0 /tmp/foobar/foo
$ rm -rf /tmp/foobar
$ install -d /tmp/foobar
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar
$ restorecon -v /tmp/foobar
restorecon reset /tmp/foobar context unconfined_u:object_r:user_tmp_t:s0->unconfined_u:object_r:user_home_t:s0","$ sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
$ touch foo
$ install -D foo /tmp/foobar/foo
$ ls -Zd /tmp/foobar
$ ls -Z /tmp/foobar/foo
$ rm -rf /tmp/foobar
$ install -d /tmp/foobar
$ ls -Zd /tmp/foobar
$ restorecon -v /tmp/foobar","```bash
sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
touch foo
install -D foo /tmp/foobar/foo
ls -Zd /tmp/foobar
ls -Z /tmp/foobar/foo
rm -rf /tmp/foobar
install -d /tmp/foobar
ls -Zd /tmp/foobar
restorecon -v /tmp/foobar
```","sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
touch foo
install -D foo /tmp/foobar/foo
ls -Zd /tmp/foobar
ls -Z /tmp/foobar/foo
rm -rf /tmp/foobar
install -d /tmp/foobar
ls -Zd /tmp/foobar
restorecon -v /tmp/foobar","sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
touch foo
install -D foo /tmp/foobar/foo
ls -Zd /tmp/foobar
rm -rf /tmp/foobar
install -d /tmp/foobar
ls -Zd /tmp/foobar",https://bugzilla.redhat.com/show_bug.cgi?id=1339135,
1158494,Berthault,2014-10-29T13:51:31Z,2016-11-03T23:54:57Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,expand and unexpand don't correctly manage files having a BOM header,normal,"expand and unexpand should correctly convert between spaces and tabs while preserving the original formatting, regardless of locale settings","unexpand adds extra spaces, expand removes spaces and making all lines with non-ASCII characters incorrect",Always,"1. Write an UTF-8 file (file_spaces) having a BOM header with the following contents:
    Ã©   Ã    Ã§
    Ã©   Ã    Ã§

Two lines with four spaces + 'Ã©' + three spaces + 'Ã ' + three spaces + 'Ã§' + EOL

It's important to test with stressed characters. With ASCII characters, only the first line is incorrect and the second one is OK. With stressed characters, all lines are incorrect.

NB: For writing files with BOM header, I'm using the scite editor.

2. LANG=C unexpand -t4 file_spaces > file_unexpand

3. Edit the two files (e.g. with gedit or scite) and see the problem in file_unexpand

4. Write an UTF-8 file (file_tabs) having a BOM header with the following contents:
    Ã©   Ã    Ã§
    Ã©   Ã    Ã§

Two lines with one tab + 'Ã©' + one tab + 'Ã ' + one tab + 'Ã§' + EOL

5. LANG=C expand -t4 file_tabs > file_expand

6. Edit the two files (e.g. with gedit or scite) and see the problem in file_expand","$ nano file_spaces
$ LANG=C unexpand -t4 file_spaces > file_unexpand
$ gedit file_spaces file_unexpand
$ nano file_tabs
$ LANG=C expand -t4 file_tabs > file_expand
$ gedit file_tabs file_expand ","```bash
echo $'\xef\xbb\xbfÃ©   Ã    Ã§' > file_spaces
echo $'\xef\xbb\xbfÃ©   Ã    Ã§' >> file_spaces
LANG=C unexpand -t4 file_spaces > file_unexpand

echo $'\xef\xbb\xbfÃ©\tÃ \tÃ§' > file_tabs
echo $'\xef\xbb\xbfÃ©\tÃ \tÃ§' >> file_tabs
LANG=C expand -t4 file_tabs > file_expand
```","touch file_spaces && echo $'Ã©   Ã    Ã§\nÃ©   Ã    Ã§' > file_spaces && printf '\xef\xbb\xbf' | cat - file_spaces > temp && mv temp file_spaces
LANG=C unexpand -t4 file_spaces > file_unexpand

touch file_tabs && echo $'Ã©\tÃ \tÃ§\nÃ©\tÃ \tÃ§' > file_tabs && printf '\xef\xbb\xbf' | cat - file_tabs > temp && mv temp file_tabs
LANG=C expand -t4 file_tabs > file_expand","echo -e '\xEF\xBB\xBFÃ©   Ã    Ã§\nÃ©   Ã    Ã§' > file_spaces
LANG=C unexpand -t4 file_spaces > file_unexpand

echo -e '\xEF\xBB\xBFe\tÃ \tÃ§\ne\tÃ \tÃ§' > file_tabs
LANG=C expand -t4 file_tabs > file_expand",https://bugzilla.redhat.com/show_bug.cgi?id=1158494,
1001092,Harald Reindl,2013-08-26T13:28:31Z,2016-10-12T14:31:37Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,df prints non-intuitive mount points in the presence of bind mounts,normal,df command should correctly display the actual mount points,"df command incorrectly reports /tmp as being mounted from /dev/sdc1, instead of showing the correct bind-mounted location /Volumes/dune/.tmp",Always,"[root@testserver:~]$ /usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs
Dateisystem    Typ  GrÃ¶Ãe Benutzt Verf. Verw% EingehÃ¤ngt auf
/dev/sdb1      ext4   12G    2,6G  9,2G   22% /
/dev/sda1      ext4  189M     33M  153M   18% /boot
/dev/sdc1      ext4   30G    4,3G   26G   15% /tmp
_____________________________________

/dev/sdc1 is for sure *not* /tmp
hence there is no logic at all display the thris bind-mount 

UUID=bb7dfa33-8d31-496c-99a9-a1978eef98ec  /Volumes/dune                         ext4   defaults,commit=45,inode_readahead_blks=16,noatime,nodiratime  0 1
/Volumes/dune/www-servers/cms              /usr/local/sftp-homes/flow/cms        none   bind
/Volumes/dune/builduser                    /home/builduser                       none   bind
/Volumes/dune/.tmp                         /tmp                                  none   bind
/Volumes/dune/.tmp                         /var/tmp                              none   bind
/Volumes/dune/buildserver/autotest         /Volumes/dune/www-servers/autotest    none   bind",$ /usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs,"```bash
# Create file systems and mount points as described in the bug report
mkdir -p /mnt/sdb1 /mnt/sda1 /mnt/sdc1 /Volumes/dune /Volumes/dune/www-servers/cms /usr/local/sftp-homes/flow/cms /home/builduser /tmp /var/tmp /Volumes/dune/buildserver/autotest

# Create file systems (this step may vary depending on your system and the type of file system you want to create)
mkfs.ext4 /dev/sdb1
mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sdc1

# Mount file systems
mount /dev/sdb1 /mnt/sdb1
mount /dev/sda1 /mnt/sda1
mount /dev/sdc1 /mnt/sdc1

# Create bind mounts as described in the bug report
mount --bind /Volumes/dune/www-servers/cms /usr/local/sftp-homes/flow/cms
mount --bind /Volumes/dune/builduser /home/builduser
mount --bind /Volumes/dune/.tmp /tmp
mount --bind /Volumes/dune/.tmp /var/tmp
mount --bind /Volumes/dune/buildserver/autotest /Volumes/dune/www-servers/autotest

# Run the df command to reproduce the bug
df -hT --exclude-type=tmpfs --exclude-type=devtmpfs
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1001092,
1312864,Adam MariÅ¡,2016-02-29T12:10:58Z,2016-09-27T15:06:41Z,CLOSED CANTFIX,medium,medium,Fedora,coreutils,CVE-2016-2781 coreutils: Non-privileged session can escape to the parent session in chroot [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1312864,Confused if it should be included
901517,Ales Ledvinka,2013-01-18T11:32:18Z,2016-09-20T04:32:45Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,is not this sorting incorrect?,normal,sorting should maintain the correct numeric order,"sorting appears to be incorrect, with ""0:0:1"" appearing after ""0:0:1f""",Always,,"$ sort -n ./ethercodes.dat > ./sorted_ethercodes.dat
$ diff -up ./ethercodes.dat.orig ./sorted_ethercodes.dat","```bash
echo -e ""0:0:1f Telco Systems, Inc.\n0:0:1  XEROX CORPORATION"" > ethercodes.dat
sort -n -t: -k1,1 -k2,2 -k3,3 ethercodes.dat
sort -n ethercodes.dat
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=901517,
1376801,Mohammed Sadiq,2016-09-16T12:26:52Z,2016-09-16T13:55:11Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,manpage lists wrong flags for 'echo' command,normal,echo should treat '--' like any other character,"the manpage of 'echo' command lists --help and --version, which is wrong",Always,,$ man echo,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1376801,
1374678,Ray Holme,2016-09-09T12:02:02Z,2016-09-11T20:18:53Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,sort fails to sort in right order,normal,"./Invoice.java
./Invoice.m4
./InvoiceLine.java
./InvoiceLine.m4","./Invoice.java
./InvoiceLine.java
./InvoiceLine.m4
./Invoice.m4",Always,"1.(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort ","$ echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"" | sort","(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort","(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort","(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort",https://bugzilla.redhat.com/show_bug.cgi?id=1374678,
1347746,Leslie Satenstein,2016-06-17T14:09:16Z,2016-08-26T13:18:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"different     ls -l /dev/disk/by-uuid   between previous Fedora, fedora beta and Fedora24",normal,time in hh:mm format,timestamp as the year yyyy,Always,,$ ls -l /dev/disk/by-uuid,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1347746,
1370362,Leslie Satenstein,2016-08-26T04:11:54Z,2016-08-26T06:46:05Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,ls -l /dev/disk/by-xxxx  produces unexpected output,normal,time in hh:mm format,timestamp as the year yyyy,Always,,$ ls -l /dev/disk/by-xxxx,"```bash
ls -l /dev/disk/by-uuid
ls -l /dev/disk/by-label
```",None,"ls -l /dev/disk/by-uuid
ls -l /dev/disk/by-label",https://bugzilla.redhat.com/show_bug.cgi?id=1370362,
1349701,LiuYan,2016-06-24T04:09:56Z,2016-08-01T07:31:00Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Disable quoting file name behavior of ls command in coreutils-8.25,normal,output the original file name without quoting,file name with whitespaces are quoted with single quote,Always,1. ls a file/directory name with whitespaces or single quotes,$ ls 'My Documents',ls /hdd/VirtualBox\ VMs -d,ls /hdd/VirtualBox\ VMs -d,ls '/hdd/VirtualBox VMs' -d,https://bugzilla.redhat.com/show_bug.cgi?id=1349701,
1358888,Praveen Doifode,2016-07-21T17:30:15Z,2016-07-25T05:42:17Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -v prints version of the running kernel,normal,kernel version as described in the man page,does not display the kernel version,Always,,"$ uname -v
$ man uname","uname -v 
man uname",None,uname -v,https://bugzilla.redhat.com/show_bug.cgi?id=1358888,
1285623,Ed Greshko,2015-11-26T04:58:55Z,2016-07-19T18:32:12Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,df doesn't display all mounts,normal,list all mounted file systems including subdirectories of a remote file system,ome mounts that are present in the mount command output are missing,Always,"[egreshko@meimei x86_64]$ mount | grep ds
ds:/volume1/syntegra on /syntegra type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)
ds:/volume1/misty on /home/egreshko/misty type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)
ds:/volume1/video on /home/egreshko/Videos type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)

while df shows

[egreshko@meimei ~]$ /usr/bin/df
Filesystem         1K-blocks       Used  Available Use% Mounted on
devtmpfs             4071524          0    4071524   0% /dev
tmpfs                4082468     304268    3778200   8% /dev/shm
tmpfs                4082468       1544    4080924   1% /run
tmpfs                4082468          0    4082468   0% /sys/fs/cgroup
/dev/sda2           50264772   20194444   27493944  43% /
tmpfs                4082468        112    4082356   1% /tmp
/dev/sdb1          480589520   11981140  444172720   3% /home
/dev/sda5          894266040  423171176  425645700  50% /opt
/dev/sda1             487652     136081     321875  30% /boot
ds:/volume1/video 2879621632 1182232064 1697287168  42% /home/egreshko/Videos
tmpfs                 816496          0     816496   0% /run/user/985
tmpfs                 816496         28     816468   1% /run/user/1029","$ mount | grep ds  
$ /usr/bin/df
","```bash
mkdir -p /volume1/syntegra /volume1/misty /volume1/video
mount -t nfs4 ds:/volume1/syntegra /syntegra
mount -t nfs4 ds:/volume1/misty /home/egreshko/misty
mount -t nfs4 ds:/volume1/video /home/egreshko/Videos
df
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1285623,
1354078,Tomas DabaÅ¡inskas,2016-07-09T08:06:28Z,2016-07-11T15:35:05Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Error in PREIN scriptlet in rpm package coreutils,normal,coreutils package should install successfully without errors,"coreutils installation fails with an error: ""error: %prein(coreutils-8.25-5.fc24.x86_64) scriptlet failed, exit status 126""",Always,[root@localhost liveuser]# dnf --installroot=/tmp --releasever=24 install coreutils,$ dnf --installroot=/tmp --releasever=24 install coreutils,dnf --installroot=/tmp --releasever=24 install coreutils,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1354078,
1352691,shamim.islam,2016-07-04T18:09:32Z,2016-07-04T20:21:22Z,CLOSED DUPLICATE,unspecified,urgent,Fedora,coreutils,ls incorrectly shows quotes when displaying files with a space in the name,normal,File with spaces.txt,File with spaces.txt',Always,"1. > ""File with spaces.txt""
2. ls","$ > ""File with spaces.txt""
$ ls","touch ""File with spaces.txt""
ls","touch ""File with spaces.txt""
ls","touch ""File with spaces.txt""
ls",https://bugzilla.redhat.com/show_bug.cgi?id=1352691,
1348043,Yu Watanabe,2016-06-20T03:30:52Z,2016-06-22T14:25:08Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,post-script of coreutils-common cannot find mv command,normal,an error stating /bin/mv: No such file or directory,install without error message.,Always,,"$ dnf --installroot /tmp/hoge --releasever=25 --disablerepo=* \
--enablerepo=rawhide install coreutils",dnf --installroot /tmp/hoge --releasever=25 --disablerepo=* --enablerepo=rawhide install coreutils,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1348043,
1335320,Account closed by the user,2016-05-11T22:18:36Z,2016-06-17T15:27:31Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,"sync /etc/DIR_COLORS , aka coreutils-DIR_COLORS , with latest upstream file",,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1335320,Lack of information
1303795,Noel McLoughlin,2016-02-02T01:20:07Z,2016-06-16T16:13:23Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,RFE: df output is non intuitive when reporting on multiple files residing in current directory (doc only),normal,,df command in coreutils 8.24 does not provide an option for strict ordering,Always,"1. # cd /
2. Execute these commands:
# df *
# df /*
# df bin lib lib64 sbin
3. Execute these commands:
# cd /
# df --totals *
# df --totals /l*
# df --totals bin lib lib64 sbin","$ cd /
$ df *
$ df /*
$ df bin lib lib64 sbin
$ cd /
$ df --totals *
$ df --totals /l*
$ df --totals bin lib lib64 sbin","Since this is a feature request rather than a traditional bug with incorrect behavior, there isn't a specific command that will ""reproduce"" the issue in terms of demonstrating an error. The request is for the addition of functionality (an option for strict ordering) similar to what exists in `sort`. However, based on the description provided and the aim to highlight the lack of an option for strict ordering in `df` compared to `sort`, we can focus on commands that demonstrate the current behavior of `df` without such an option:

```bash
cd /
df *
df /*
df bin lib lib64 sbin

cd /
df --totals *
df --totals /l*
df --totals bin lib lib64 sbin
```

These commands are intended to show how `df` currently handles output, including potential duplicates, and the lack of an option to enforce strict ordering or uniqueness in its output.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1303795,
647786,Daniel Walsh,2010-10-29T12:57:08Z,2016-06-15T14:31:59Z,CLOSED WONTFIX,low,medium,Fedora,coreutils,ls should show an indicator when there are file capabilities associated with a file,normal,file capabilities displayed in a clear way,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=647786,
440056,Petr Å plÃ­chal,2008-04-01T15:17:28Z,2016-06-01T01:36:49Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,cp preserve security context documentation inconsistencies,normal,cp command should match the documentation regarding security context preservation,cp -a command incorrectly preserves security contexts despite being documented as equivalent to -dpPR,Always,,"$ cp --help
$ man cp","```bash
cp /etc/shadow /tmp/shadow-dpPR
ls -Z /tmp/shadow-dpPR
cp -p /etc/shadow /tmp/shadow-p
ls -Z /tmp/shadow-p
cp --preserve /etc/shadow /tmp/shadow--preserve
ls -Z /tmp/shadow--preserve
cp --preserve=all /etc/shadow /tmp/shadow--preserve=all
ls -Z /tmp/shadow--preserve=all
cp --preserve=context /etc/shadow /tmp/shadow--preserve=context
ls -Z /tmp/shadow--preserve=context
cp -a /etc/shadow /tmp/shadow-a
ls -Z /tmp/shadow-a
```",touch /tmp/shadow; chcon system_u:object_r:shadow_t:s0 /tmp/shadow; cp /tmp/shadow /tmp/shadow-dpPR -dpPR; cp /tmp/shadow /tmp/shadow-p -p; cp /tmp/shadow /tmp/shadow--preserve --preserve; cp /tmp/shadow /tmp/shadow--preserve=all --preserve=all; cp /tmp/shadow /tmp/shadow--preserve=context --preserve=context; cp /tmp/shadow /tmp/shadow-a -a,None,https://bugzilla.redhat.com/show_bug.cgi?id=440056,
921708,Yann Droneaud,2013-03-14T18:08:45Z,2016-05-12T12:00:26Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,Improve handling of cp --reflink=always when not supported by destination FS,normal,cp --reflink=always command should fail without creating the destination file (dest),cp: failed to clone `dest' from `source',Always,"$ stat source
  File: `source'
  Size: 172253            Blocks: 344        IO Block: 4096   regular file
Device: fd02h/64770d        Inode: 1704360     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1002/ydroneaud)   Gid: ( 1002/ydroneaud)
Access: 2013-03-14 19:05:12.642541940 +0100
Modify: 2013-03-14 19:04:46.787541606 +0100
Change: 2013-03-14 19:04:46.787541606 +0100
 Birth: -
$ cp --reflink=always source dest
cp: failed to clone `dest' from `source': Inappropriate ioctl for device
$ stat dest
  File: `dest'
  Size: 0                 Blocks: 0          IO Block: 4096   regular empty file
Device: fd02h/64770d        Inode: 1707547     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1002/ydroneaud)   Gid: ( 1002/ydroneaud)
Access: 2013-03-14 19:07:06.493543407 +0100
Modify: 2013-03-14 19:07:06.493543407 +0100
Change: 2013-03-14 19:07:06.493543407 +0100
 Birth: -","$ stat source
$ cp --reflink=always source dest
$ stat dest","```bash
touch source
stat source
cp --reflink=always source dest
stat dest
```","touch source; echo ""data"" > source; dd if=/dev/zero of=source bs=1K count=172253; cp --reflink=always source dest; stat dest",None,https://bugzilla.redhat.com/show_bug.cgi?id=921708,
981845,JW,2013-07-06T09:18:32Z,2016-05-12T11:42:32Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,rm -I option inadequate,normal,1. -I NUM    prompt once before removing more than NUM files,1. -I     prompt once before removing more than three files,Always,1. man rm,$ man rm,"rm -i file1 file2 file3 file4
rm -I file1 file2 file3 file4",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=981845,
1055290,Tom Horsley,2014-01-19T23:32:12Z,2016-05-12T09:59:28Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,nohup gets hup'ed,normal,background job protected from death by nohup,background job killed,Always,"1.install udev scripts in above web page
2.plug in solidoodle to USB port",,"```bash
nohup sleep 5 &
pgrep -f ""sleep 5""
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1055290,
1250113,Nikos Mavrogiannopoulos,2015-08-04T14:30:06Z,2016-05-11T16:09:29Z,CLOSED CURRENTRELEASE,unspecified,unspecified,Fedora,coreutils,coreutils doesn't include a base32 binary,normal,base32 encoding included in Coreutils include as an option,Coreutils does not currently support base32 encoding,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1250113,
890223,RaphaÃ«l Flores,2012-12-25T21:49:56Z,2016-05-11T15:42:24Z,CLOSED CURRENTRELEASE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils-8.15-9.fc17: leave_dir: Process /usr/bin/du was killed by signal 6 (SIGABRT),normal,du' command executed successfully,du' command causes a crash,Always,,$ du -sh 6e56p56v.default/,du -sh -sh 6e56p56v.default/,du -sh -sh 6e56p56v.default/,du -sh 6e56p56v.default/,https://bugzilla.redhat.com/show_bug.cgi?id=890223,
1334898,Eric Sammons,2016-05-10T18:31:42Z,2016-05-11T05:27:58Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,ls shows files and directories with spaces surrounded by tic marks,normal,Test File,Test File',Always,"1. mkdir Test\ Dir
2. ls","$ mkdir Test\ Dir
$ ls","mkdir ""Test Dir""
ls","mkdir 'Test Dir'
ls","mkdir 'Test Dir'
ls",https://bugzilla.redhat.com/show_bug.cgi?id=1334898,
1149761,Zbigniew JÄdrzejewski-Szmek,2014-10-06T14:57:21Z,2016-04-25T11:55:33Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,root login in emergency mode shows errors,normal,temporary file created successfully in the /tmp,failure to create the file due to the read-only file system,,,,"```bash
mkdir /tmp-ro
mount -o ro /dev/null /tmp-ro
TMP=/tmp-ro
mktemp --tmpdir=$TMP
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1149761,
1323163,Harald Hoyer,2016-04-01T12:25:54Z,2016-04-06T15:20:20Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,get rid of openssl-libs,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1323163,Confused if it should be included
1319594,Peng Wu,2016-03-21T07:35:59Z,2016-03-25T06:35:15Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,"[CJK] when use ""ls -lh"", the date/time format is incorrect.",normal,"æ»ç¨é 168K
-rw-rw-r--. 1 guest guest 165K 3æ21æ¥ 14:27 coreutils.po","æ»ç¨é 168K
-rw-rw-r--. 1 guest guest 165K 3æ  21 14:27 coreutils.po",Always,"1. log-in with Simplified Chinese locale
2. run ""ls -lh""","$ export LANG=zh_CN.UTF-8
$ ls -lh","```bash
LANG=en_US.UTF-8 ls -lh
LANG=zh_CN.UTF-8 ls -lh
```","export LANG=zh_CN.UTF-8
ls -lh",None,https://bugzilla.redhat.com/show_bug.cgi?id=1319594,
706605,Denys Vlasenko,2011-05-21T14:38:33Z,2016-03-17T12:52:30Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,"Please fix and improve ""od --help""/""man od"" wrt -w and -S options",normal,-S option clearly showing the correct usage,-S incorrectly states that the required parameter(--strings[=BYTES]) is optional,Always,,"$ od --help
$ man od","od --help
man od
od -S file.txt
od -S=10 file.txt
od -S=10 /bin/ls 
od -w file.txt
od -w=10 file.txt
od -w=10 /bin/ls",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=706605,
1314722,Matteo Melli,2016-03-04T10:40:59Z,2016-03-05T21:22:10Z,CLOSED RAWHIDE,unspecified,high,Fedora,coreutils,cut does a strange cut,normal,zip,"https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip
jaxb-xew-plugin-release-1.0",Always,"1. Execute shell command:
echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2","$ echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0"" | cut -d'|' -f2","```bash
echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2
```","echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2","echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0"" | cut -d'|' -f2",https://bugzilla.redhat.com/show_bug.cgi?id=1314722,
586029,John Sullivan,2010-04-26T16:31:10Z,2016-02-22T12:47:48Z,CLOSED ERRATA,low,medium,Fedora,coreutils,LS_COLORS setup in /etc/profile.d has insufficient escaping,normal,Shell startup time would ideally be as independent as possible of the current directory,Shell is slow to start if the current directory is slow to enumerate,Always,"1. cd to a large directory (I noticed this in /usr/share/man/man3)
2. echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
3. search for blocks of consecutive getdents calls. Two instances of scanning /etc/profile.d can be ignored. After these the next instance is a scan of the current directory.","$ cd /usr/share/man/man3
$ echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
$ /getdents","```bash
cd /usr/share/man/man3
echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
```","cd /usr/share/man/man3
echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less","cd /usr/share/man/man3  
echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less",https://bugzilla.redhat.com/show_bug.cgi?id=586029,
1306393,vvs,2016-02-10T17:16:47Z,2016-02-17T03:49:40Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,unexpand chokes on empty lines,normal,it should successfully process all lines.,unexpand: input line is too long,Always,"1. echo >test.txt
2. unexpand test.txt","$ echo >test.txt
$ unexpand test.txt","```bash
echo > test.txt
unexpand test.txt
```","echo >test.txt
unexpand test.txt","echo -e ""line1\n\nline3"" > test.txt
unexpand test.txt",https://bugzilla.redhat.com/show_bug.cgi?id=1306393,
1304839,Sandro Mani,2016-02-04T18:29:24Z,2016-02-15T12:43:06Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,cut with coreutils-i18n-cut.patch broken if field width >= 64 chars,normal,should correctly display the third field based on the colon delimiter whether the field is short or long,fails to process fields wider than 63 characters correctly,Always,"$ echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
$ cut -d':' -f 3 test
a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX

$ echo 'a_shorter_field::foo' > test
$ cut -d':' -f 3 test
foo","$ echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
$ cut -d':' -f 3 test
$ echo 'a_shorter_field::foo' > test
$ cut -d':' -f 3 test","```bash
echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
cut -d':' -f 3 test
echo 'a_shorter_field::foo' > test
cut -d':' -f 3 test
```","echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
cut -d':' -f 3 test
echo 'a_shorter_field::foo' > test
cut -d':' -f 3 test","echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
cut -d':' -f 3 test
echo 'a_shorter_field::foo' > test
cut -d':' -f 3 test",https://bugzilla.redhat.com/show_bug.cgi?id=1304839,
1304071,George R. Goffe,2016-02-02T19:31:58Z,2016-02-03T08:23:33Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,possible sort bug,normal,sort'command should accept both -S 3g and -S3g as valid input,"error message for ""-S 3g"" but NOT for ""-S3g""",Always,"# this seems to work

sort -T $sorttmp -S""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd

# this does not note the blank after ""-S""

sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd

sort: cannot read: 3g: No such file or directory

which sort

/bin/sort","$ sort -T $sorttmp -S""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd
$ sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd","```bash
sort -T /tmp -S""3g"" -uk1 < input_file > output_file
sort -T /tmp -S ""3g"" -uk1 < input_file > output_file
```","sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd","sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd",https://bugzilla.redhat.com/show_bug.cgi?id=1304071,
1249695,Viktor Jancik,2015-08-03T15:09:04Z,2016-02-01T02:25:52Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Install utility manpage references yum instead of dnf,normal,"Should mention dnf",Mentions yum,Always,"1. $man install
2. /yum","$ man install","$man install | grep yum
$man install | grep dnf",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1249695,
1298736,Richard Geary,2016-01-14T21:04:13Z,2016-01-18T00:44:26Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: set_program_name(): cat killed by SIGABRT,normal,gtest application should run successfully without crashing and the set_program_name function ,failure in the set_program_name function,Always,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1298736,Lack of information
1297464,Yeasah Pell,2016-01-11T15:21:44Z,2016-01-15T23:24:06Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,mv data loss when destination directory appears in source list more than once,normal,"mv: cannot move 'test' to a subdirectory of itself, 'test/test'
mv: will not create hard link 'test/test' to directory 'test/test'
(and the directory remains unchanged with contents intact)","mv: cannot move 'test' to a subdirectory of itself, 'test/test'
mv: warning: source directory 'test' specified more than once
(and the directory and all contents are destroyed)",Always,"1. mkdir test
2. mv test test test","$ mkdir test
$ mv test test test","```bash
mkdir test
mv test test test
```","mkdir test
mv test test test","mkdir test  
mv test test test",https://bugzilla.redhat.com/show_bug.cgi?id=1297464,
1013171,JW,2013-09-28T00:08:37Z,2016-01-04T14:47:53Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,"rm gets concept of ""write-protected"" wrong",normal,"root should also be prompted, just like an ordinary user","As a non-root user result is prompt ""remove write-protected regular empty file 'testfile'"".
For root user the result is silent removal of file.",Always,"1. touch testfile
2. chmod -w testfile
3. rm testfile","$ touch testfile
$ chmod -w testfile
$ rm testfile","```bash
touch testfile
chmod 444 testfile # Make the file read-only (write-protected)
sudo rm testfile # Run as root
rm testfile # Run as non-root user for comparison
```","touch testfile
chmod -w testfile
rm testfile",None,https://bugzilla.redhat.com/show_bug.cgi?id=1013171,
1199679,Tom Horsley,2015-03-07T00:21:42Z,2016-01-04T14:43:55Z,CLOSED NEXTRELEASE,unspecified,unspecified,Fedora,coreutils,df -l stats everything and can hang on NFS mountpoints,normal,"No hang, it shouldn't be touching anything on the network.",Hang when there is network or server trouble,Always,"1.run strace df -l -h on a system with network mounts.
2.grep the strace output for stat() calls.
3.see stat() calls for every single network mount as well as the local ones.","$ strace df -l -h
$ strace df -l -h 2>&1 | grep stat","```bash
strace df -l -h
```
Note that this command requires a system with network mounts (e.g., NFS) and `strace` installed to reproduce the issue described in the bug report. To fully verify the behavior, you should also grep the strace output for stat() calls as mentioned in the steps to reproduce:
```bash
strace df -l -h | grep stat
```",strace df -l -h,strace df -l -h | grep stat,https://bugzilla.redhat.com/show_bug.cgi?id=1199679,
1196642,Lubomir Rintel,2015-02-26T12:45:08Z,2016-01-04T14:43:16Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,DIR_COLORS.256color ls colors hard to read with white and dark gray background,normal,Directories and symbolic links should be displayed with readable color variants,DIR_COLORS.256color uses dark variants of the colors for directories and links which are sometimes hard to read,Always,,"$ gnome-terminal -- bash -c 'export TERM=xterm-256color; bash'
$ xterm -bg white -e 'export TERM=xterm-256color; bash'",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1196642,
1027279,PÃ¡draig Brady,2013-11-06T13:15:15Z,2016-01-04T14:41:28Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"colorls.csh errors out if ""noclobber"" is set",normal,/etc/profile.d/colorls.csh script successfully write to the temporary file regardless of the noclobber setting,/etc/profile.d/colorls.csh script fails with the error /tmp/.colorlsXXX: File exists. when noclobber is enabled,Always,,"$ echo ""set -o noclobber"" >> ~/.bashrc
$ source ~/.bashrc
$ /etc/profile.d/colorls.csh","```bash
set noclobber
mktemp /tmp/.colorlsXXX
echo ""test"" > /tmp/.colorlsXXX
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1027279,
1270480,Ali Akcaagac,2015-10-10T09:22:39Z,2015-10-14T15:09:00Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,*fatal* sort broken: yet again!,normal,correctly ordered text data,"incorrect sorting, introducing unexpected spaces",Always,,"$ cat > input.txt <<EOF
b
c
a
d
f
                      : e
e
h
g
EOF
$ sort input.txt > old.txt # using coreutils 8.23-9 
$ sort input.txt > new.txt # using coreutils 8.23-11
$ diff -ruN old.txt new.txt > diff.txt
$ cat diff.txt","```bash
# Create test files with identical checksums
echo ""Hello World"" > file1.txt
echo ""Hello World"" > file2.txt

# Run the command to reproduce the bug on coreutils 8.22-15 and 8.23-10
find . -type f -exec md5sum {} \; | sort -k 1
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1270480,
920806,Daniel BerrangÃ©,2013-03-12T19:56:38Z,2015-07-21T18:20:27Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,df command misses out NFS mounts,normal,df shows all usage for every single mount point that the 'mount' command reports,df only shows usage for one random mount,Always,"1. Export multiple NFS volumes from a remote server
2. Mount all volumes on the client
3. Run 'df'","$ sudo exportfs -o rw,sync /export/vol1 client_IP
$ sudo mount -t nfs server_IP:/export/vol1 /mnt/vol1
$ df",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=920806,
1243572,Michael S. Tsirkin,2015-07-15T19:45:03Z,2015-07-16T12:25:36Z,CLOSED CANTFIX,unspecified,unspecified,Fedora,coreutils,relative date broken in date,normal,should give a date 3 days from now at midnight,gives todays' date,Always,"1. date +%F --date=""00:00:00 +3 days""","$ date +%F --date=""00:00:00 +3 days""",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1243572,
1135583,Paul Moore,2014-08-29T17:21:10Z,2015-07-08T12:25:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,coreutils-8.23 changes the output formatting of SELinux label information,normal,"Similar output.","<< Original behavior (coreutils-8.22)
# rpm -q coreutils
coreutils-8.22-11.el7.x86_64
# ls -Z foo
-rw-r--r--. root root root:object_r:user_tmp_t:s0      foo
# ls -lZ foo
-rw-r--r--. root root root:object_r:user_tmp_t:s0      foo
<< New behavior (coreutils-8.23)
# rpm -q coreutils
coreutils-8.23-3.fc22.x86_64
# ls -Z foo
unconfined_u:object_r:user_tmp_t:s0 foo
# ls -lZ foo
-rw-r--r--. 1 root root unconfined_u:object_r:user_tmp_t:s0 0 Aug 29 13:11 foo",Always,Compare the output of 'ls -Z' using coreutils-8.22 to coreutils-8.23.,"$ rpm -q coreutils
$ ls -Z foo
$ ls -lZ foo","```bash
echo ""Fedora-Live-KDE-x86_64-23-10.iso  sha256"" > checksum.txt
echo ""Fedora-Live-MATE_Compiz-x86_64-23-10.iso  sha256"" >> checksum.txt
touch Fedora-Live-KDE-x86_64-23-10.iso
sha256sum -c checksum.txt
```","touch Fedora-Live-KDE-x86_64-23-10.iso Fedora-Server-DVD-x86_64-23.iso Fedora-Server-netinst-x86_64-23.iso Fedora-Workstation-netinst-x86_64-23.iso Fedora-Live-Workstation-x86_64-23-10.iso
echo ""checksum_value Fedora-Live-KDE-x86_64-23-10.iso"" > testSUM
echo ""checksum_value Fedora-Server-DVD-x86_64-23.iso"" >> testSUM
echo ""checksum_value Fedora-Server-netinst-x86_64-23.iso"" >> testSUM
echo ""checksum_value Fedora-Workstation-netinst-x86_64-23.iso"" >> testSUM
echo ""checksum_value Fedora-Live-Workstation-x86_64-23-10.iso"" >> testSUM
sha256sum -c testSUM",None,https://bugzilla.redhat.com/show_bug.cgi?id=1135583,
1235873,rvcsaba,2015-06-26T00:35:44Z,2015-06-28T13:06:45Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Version sort generate bad order,normal,Correct order.,First and second row changed.,Always,,"$ echo -e ""version-1.2.10\nversion-1.2.2\nversion-1.2.3\nversion-1.10.1\nversion-1.2.20"" > sortbug.txt
$ cat sortbug.txt
$ sort -rV sortbug.txt","dd if=/dev/zero of=/dev/null& 
pid=$! 
kill -USR1 $pid; sleep 1; kill $pid",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1235873,
1146185,GÃ¶ran Uddeborg,2014-09-24T17:34:20Z,2015-05-30T15:37:30Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"""sort"" looks at more than the flags specify in non-C locales",normal,"sort: using âen_US.utf8â sorting rules
sort->strcoll(""a b"", ""a-b-c"")                    = -1
a b!x
___
a-b-c!x
_____
+++ exited (status 0) +++","sort: using âen_US.utf8â sorting rules
sort->strcoll(""a b!x"", ""a-b-c!x"")                = 21
a-b-c!x
_____
a b!x
___
+++ exited (status 0) +++",Always,"1. printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 ltrace -e strcoll sort -s --debug -k1,1 -t!","$ printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 ltrace -e strcoll sort -s --debug -k1,1 -t!","```bash
echo -e ""a\nb\nc\nd\ne\n                      : e\nf\ng\nh"" | sort
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1146185,
1169027,(GalaxyMaster),2014-11-29T05:06:18Z,2015-05-30T15:37:23Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,missing %lang info for LC_TIME locale subdirs,normal,,,Always,"[root@localhost ~]# rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5
	/usr/share/locale/af/LC_TIME
af	/usr/share/locale/af/LC_TIME/coreutils.mo
	/usr/share/locale/be/LC_TIME
be	/usr/share/locale/be/LC_TIME/coreutils.mo
	/usr/share/locale/bg/LC_TIME
[root@localhost ~]# rpm -qf /usr/share/locale/af
filesystem-3.2-18.el7.x86_64
[root@localhost ~]# rpm -qf /usr/share/locale/af/LC_MESSAGES
filesystem-3.2-18.el7.x86_64
[root@localhost ~]# rpm -qf /usr/share/locale/af/LC_TIME
coreutils-8.22-11.el7.x86_64
[root@localhost ~]#","$ rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5  
$ rpm -qf /usr/share/locale/af  
$ rpm -qf /usr/share/locale/af/LC_MESSAGES  
$ rpm -qf /usr/share/locale/af/LC_TIME  ","```bash
# Create NFS shares on a remote server (e.g., nas.example.com)
# Assuming the NFS server is already set up and exporting the following shares:
# /Photos
# /Download
# /Multimedia
# /VirtualMachines
# /Backups

# On the client machine, mount all volumes from the NAS
sudo mount -t nfs nas.example.com:/Photos /mnt/Photos
sudo mount -t nfs nas.example.com:/Download /mnt/Download
sudo mount -t nfs nas.example.com:/Multimedia /mnt/Multimedia
sudo mount -t nfs nas.example.com:/VirtualMachines /mnt/VirtualMachines
sudo mount -t nfs nas.example.com:/Backups /mnt/Backups

# Run the 'mount' command to verify all volumes are mounted
mount | grep nas

# Run the 'df' command to check disk usage (this should only show one volume)
df | grep nas
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1169027,
1177515,ljm,2014-12-28T12:05:10Z,2015-05-30T06:49:23Z,CLOSED INSUFFICIENT_DATA,unspecified,low,Fedora,coreutils,Cat end-of-file processing,normal,"/verlaine/home/vbox/VDI/ton/Logs/VBox.log.2â
â/home/vbox/VDI/ton/ton.vbox-prevâ -> â/room/wdbook1/nfs/Public/backup/verlaine/home/vbox/VDI/ton/ton.vbox-prevâ
[ljm@verlaine ~]$ ","/verlaine/home/vbox/VDI/ton/Logs/VBox.log.2â
â/home/vbox/VDI/ton/ton.vbox-prevâ -> â/room/wdbook1/nfs/Public/backup/verlaine/home/vbox/VDI/ton/ton.vbox-prevâ
ï¿½ï¿½Tpts/0ï¿½[n`ï¿½ZHd\Hï¿½6ZHï¿½d\Hl?ï¿½YHï¿½d\HÐd\HÐd\Hï¿½6ZHPï¿½a\HÐd\H ï¿½d\Ðd\H`ï¿½Þ£ï¿½0ï¿½a\HXï¿½Þ£ï¿½ï¿½d\Hï¿½ï¿½6ZHï¿½d\Hï¿½d\Hï¿½c\Hï¿½d\Hï¿½ï¿½d\?ï¿½ï¿½T:0[ljm@verlaine ~]$ ",Always,"1. Start a process that produces output. In my case: cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup
2.After a while, do a cat of that file.","$ cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup  
$ cat /var/log/lastbackup  ","date +%F --date=""00:00:00 +3 days""","date +%F --date=""00:00:00 +3 days""","date +%F --date=""00:00:00 +3 days""",https://bugzilla.redhat.com/show_bug.cgi?id=1177515,
1207314,Pavel LisÃ½,2015-03-30T16:49:17Z,2015-03-30T17:22:21Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,tr does not work with file ':' in current directory,normal,ABC,abc,Always,"1. echo > :
2. echo abc | tr [:lower:] [:upper:]
3. rm \:","$ echo > :
$ echo abc | tr '[:lower:]' '[:upper:]'
$ rm \:","```bash
# Create a file named foo
touch foo

# Run ls -Z and ls -lZ with coreutils-8.22
ls -Z foo
ls -lZ foo

# Upgrade coreutils to 8.23 or greater (this step may require root privileges)
# The exact command for upgrading will depend on the package manager being used.
# For example, with yum:
yum upgrade coreutils

# Or with dnf:
dnf upgrade coreutils

# Run ls -Z and ls -lZ again after upgrading
ls -Z foo
ls -lZ foo
```",None,"rpm -q coreutils
touch foo
ls -Z foo
ls -lZ foo",https://bugzilla.redhat.com/show_bug.cgi?id=1207314,
239501,Simon Perreault,2007-05-08T23:12:39Z,2014-05-15T20:53:06Z,CLOSED WORKSFORME,medium,low,Fedora,coreutils,Colors are too dark,normal,Directory colors are light blue.,"Directory colors are dark blue.",Always,"Type ""ls /""","$ ls /","```bash
cat > sortbug.txt <<EOF
NetworkManager-1.0.0-5.fc22
NetworkManager-0.9.10.0-8.git20140704.fc22
NetworkManager-1.0.0-8.fc22
NetworkManager-1.0.0-9.fc22
NetworkManager-1.0.4-0.1.git20150618.8cffaf3bf5.fc22
NetworkManager-0.9.10.0-10.git20140704.fc22
NetworkManager-1.0.0-7.fc22
NetworkManager-0.9.10.0-14.git20140704.fc22
NetworkManager-0.9.10.0-13.git20140704.fc22
NetworkManager-1.0.2-1.fc22
NetworkManager-1.0.0-1.fc22
NetworkManager-1.0.4-0.1.git20160624.f245b49a.fc22
NetworkManager-1.0.0-4.fc22
NetworkManager-1.0.0-6.fc22
NetworkManager-1.0.0-3.fc22
NetworkManager-0.9.10.0-11.git20140704.fc22
NetworkManager-0.9.10.0-6.git20140704.fc22
NetworkManager-0.9.10.0-12.git20140704.fc22
EOF

sort -rV sortbug.txt
```","cat > sortbug.txt << EOF
NetworkManager-1.0.0-5.fc22
NetworkManager-0.9.10.0-8.git20140704.fc22
NetworkManager-1.0.0-8.fc22
NetworkManager-1.0.0-9.fc22
NetworkManager-1.0.4-0.1.git20150618.8cffaf3bf5.fc22
NetworkManager-0.9.10.0-10.git20140704.fc22
NetworkManager-1.0.0-7.fc22
NetworkManager-0.9.10.0-14.git20140704.fc22
NetworkManager-0.9.10.0-13.git20140704.fc22
NetworkManager-1.0.2-1.fc22
NetworkManager-1.0.0-1.fc22
NetworkManager-1.0.4-0.1.git20160624.f245b49a.fc22
NetworkManager-1.0.0-4.fc22
NetworkManager-1.0.0-6.fc22
NetworkManager-1.0.0-3.fc22
NetworkManager-0.9.10.0-11.git20140704.fc22
NetworkManager-0.9.10.0-6.git20140704.fc22
NetworkManager-0.9.10.0-12.git20140704.fc22
EOF
sort -rV sortbug.txt",sort -rV sortbug.txt,https://bugzilla.redhat.com/show_bug.cgi?id=239501,
243588,Michael McLagan,2007-06-10T08:42:23Z,2008-06-17T01:31:54Z,CLOSED WONTFIX,low,medium,Fedora,coreutils,cp gives error when destination is symlink,normal,"[root@localhost var]# dir tmp
total 12
lrwxrwxrwx 1 root     root        4 Jun 10 04:35 alpha -> beta
-rw-r--r-- 1 root     root        5 Jun 10 04:36 beta",cp: cannot create regular file `tmp/alpha': File exists,Always,"1. cd /var
2. ln -sf beta tmp/alpha
3. echo ""blah"" > tmp/alpha  (this creates a file called beta with ""blah"" in it)
4. rm tmp/beta
5. echo ""blah"" > file
6. cp file tmp/alpha","$ cd /var
$ ln -sf beta tmp/alpha
$ echo ""blah"" > tmp/alpha
$ rm tmp/beta
$ echo ""blah"" > file
$ cp file tmp/alpha","```bash
printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 ltrace -e strcoll sort -s --debug -k1,1 -t!
```","printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 sort -s --debug -k1,1 -t!","printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 sort -s --debug -k1,1 -t!",https://bugzilla.redhat.com/show_bug.cgi?id=243588,
228304,ericm24x7,2007-02-12T16:18:08Z,2008-04-22T16:13:27Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,"avc: denied { associate } for comm=""cp"" egid=0 euid=0 exe=""/bin/cp""",normal,Should proceed without AVC denial,"`/mnt/autorun.apm' -> `test/autorun.apm'
cp: cannot create regular file `test/autorun.apm': Permission denied",Always,"1. mount an ISO image file
   i.e.
   mount -o loop dvdimage.iso /mnt
2. mkdir ~/test ; cd 
3. cp -av /mnt/* ~/test","$ mount -o loop dvdimage.iso /mnt
$ mkdir ~/test ; cd ~
$ cp -av /mnt/* ~/test","rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5
rpm -qf /usr/share/locale/af
rpm -qf /usr/share/locale/af/LC_MESSAGES
rpm -qf /usr/share/locale/af/LC_TIME",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=228304,
368721,Sigh,2007-11-06T18:47:04Z,2008-03-13T07:45:37Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,PAM *-l files undocumented,normal,"I would have expected the parts of the docs that mention PAM support in the
first place to include ""If the -l option is given, the corresponding *-l PAM
file will be used instead.  By default, these include the base PAM file and then
add some additional blahblahblah...""","I had to look at coreutils-split-pam.patch in the srpm to confirm my guess that
these files had something to do with the -l option.",Always,"1.  See ""su-l"" mentioned in logwatch report.
2.  Fail to find explanation anywhere in docs, --help, FAQs, bug lists.
3.  Become mildly annoyed at the presence of undocumented /etc files.
4.  Become slightly alarmed at ""su-l"" appearing in strings(1) output on /bin/su
with no explanation.",,"```bash
cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaine/home >> /var/log/lastbackup &
cat /var/log/lastbackup
```","sudo cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup
sudo cat /var/log/lastbackup",None,https://bugzilla.redhat.com/show_bug.cgi?id=368721,
430821,Antonio Gallardo,2008-01-29T23:06:29Z,2008-01-30T11:07:26Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,Sort does not sort in normal order,normal,"F-A
F-C
FB","F-A
FB
F-C",Always,"1. Write a file called ""a.txt"" with the following 3 lines:
F-A
FB
F-C

2. run in shell this command:
sort a.txt","$ echo -e ""F-A\nFB\nF-C"" > a.txt
$ sort a.txt",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=430821,
284881,"Jan ""Yenya"" Kasprzak",2007-09-10T17:11:46Z,2008-01-28T15:42:52Z,CLOSED NOTABUG,medium,low,Fedora,coreutils,"sort -n -t, does not work",normal,"2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
2101,5AHBVEQW@dUGE@
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
21014,V8:AACI4TD925@","2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@",Always,"1. keep the default locales (LC_COLLATE and LC_NUMERIC) value of en_US.UTF-8
2. sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF","$ export LC_COLLATE=en_US.UTF-8
$ export LC_NUMERIC=en_US.UTF-8
$ sort -n -t, -k1 <<'EOF'",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=284881,
428494,Harold Kornylak,2008-01-12T06:21:35Z,2008-01-17T16:13:30Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,sort man page needs to be updated to reflect i18n,normal,lines with leading space or _ should sort to top unless -b and -d set,sort order ignores leading spaces,Always,"1.create a file with some lines having leading space or leading _
2.sort","$ echo -e ""  leading space\n_leading underscore\nnormal line\n another space"" > file.txt  
$ sort file.txt  ","```bash
TIME_STYLE=locale LC_ALL=en_US.UTF-8 ls -l / | head -n 3
TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3
```","TIME_STYLE=locale LC_ALL=en_US.UTF-8 ls -l / | head -n 3
TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3","TIME_STYLE=locale LC_ALL=en_US.UTF-8 ls -l / | head -n 3
TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3",https://bugzilla.redhat.com/show_bug.cgi?id=428494,
428679,Harold Kornylak,2008-01-14T15:35:04Z,2008-01-14T17:52:25Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,Sort behaves as if the -b and -d options are always set,normal," a
 a
_a
_Z
a
aa
A
Z","a
 a
  a
_a
A
aa
Z
_Z",Always,,"$ echo -e ""a\na\n a\n_a\nA\naa\nZ\n_Z"" > test.txt
$ sort test.txt","echo > :
echo abc | tr [:lower:] [:upper:]
rm :)","echo > :
echo abc | tr [:lower:] [:upper:]
rm \:","echo > :
echo abc | tr [:lower:] [:upper:]
rm \:",https://bugzilla.redhat.com/show_bug.cgi?id=428679,
232458,Gergely GÃ¡bor,2007-03-15T16:36:01Z,2007-12-17T09:56:21Z,CLOSED WORKSFORME,medium,low,Fedora,coreutils,dd reports false statistics in hu_HU.UTF-8 locale,normal,"[ggergely@vosztok ~]$ LC_ALL=C dd if=/dev/zero of=/dev/null bs=4M count=1024
1024+0 records in
1024+0 records out
4294967296 bytes (4.3 GB) copied, 0.242406 seconds, 17.7 GB/s
[ggergely@vosztok ~]$ ","[ggergely@vosztok ~]$ LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M
count=1024
1024+0 beolvasott rekord
1024+0 kiÃ­rt rekord
1 bÃ¡jt (1 B) mÃ¡solva, 0,24047 mÃ¡sodperc, 17,9 GB/mp
[ggergely@vosztok ~]$ ",Always,"1. use dd
2. wait untils finishez
3. see bas statistics -> panic!",$ LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,"To attempt to reproduce this bug based on the provided information, we need to analyze the content of the bug report:

1. **Executable and Libraries**: The report mentions `/bin/sleep`, `/lib/ld-2.14.so`, and `/lib/libc-2.14.so`. This suggests that the issue might be related to how these executables or libraries interact with each other or with the system.

2. **Environment Variables**: Several environment variables are listed, which could influence the behavior of the system or applications. Notably, `LANG=sk_SK.UTF-8` and `PATH=/usr/lib/ccache:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/mtoman/bin` might be relevant if the issue is related to locale settings or executable paths.

3. **Maps**: The memory maps section shows how different parts of executables and libraries are mapped into the process's address space. This could hint at issues with dynamic linking, library versions, or memory management.

4. **Var Log Messages**: These messages indicate that `abrt` (Automatic Bug Reporting Tool) has saved core dumps for processes running `/bin/sleep`. The fact that there are multiple saves suggests a recurring crash.

Given these details, here are some steps to attempt reproducing the bug:

### Step 1: Replicate Environment

- Set the `LANG` environment variable to `sk_SK.UTF-8`.
- Ensure your `PATH` includes the directories listed in the report. This might require installing certain packages or modifying your system's configuration.

```bash
export LANG=sk_SK.UTF-8
export PATH=/usr/lib/ccache:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/mtoman/bin
```

### Step 2: Execute `/bin/sleep` with Various Arguments

Since the core dumps are of `/bin/sleep`, try running it with different arguments to see if you can reproduce a crash:

```bash
/bin/sleep 10 # Try various durations
```

Monitor your system logs (e.g., `/var/log/messages` or using `journalctl`) for any error messages related to the process crashing.

### Step 3: Investigate Library Versions

Ensure that the versions of `ld-2.14.so` and `libc-2.14.so` on your system match those mentioned in the report (if they are indeed significant). You can check library versions with commands like:

```bash
ldd /lib/ld-2.14.so
ldd /lib/libc-2.14.so
```

### Step 4: Consider Locale and Encoding Issues

Given that `LANG` is set to `sk_SK.UTF-8`, there might be locale-specific issues at play. Try running `/bin/sleep` in different locales or encoding environments:

```bash
LC_ALL=C /bin/sleep 10 # Try with a different locale setting
```

### Step 5: Analyze System Configuration

Compare your system's configuration files, especially those related to `abrt`, `gdm`, and `dbus`, as these are mentioned in the environment variables section. Ensure that they match or are similar to the configurations on the system where the bug was reported.

### Conclusion

Without more specific details about what triggers the crash (e.g., a particular sequence of commands, specific input, etc.), reproducing this bug may require some trial and error. The steps above provide a general approach based on the information given in the bug report. If the issue is highly system-specific or depends on transient conditions, it might be challenging to reproduce exactly.","Based on the provided information, it seems that there are unexpected core dumps occurring with the `/bin/sleep` command. Here's how you might approach identifying and reproducing the issue:

### Steps to Reproduce the Bug

1. **Run `sleep` Command in Different Environments:**
   - Try running the `sleep` command under different conditions (e.g., with various arguments, background/foreground execution).
     ```bash
     sleep 5
     sleep 5 &
     ```

2. **Check for System-Wide Issues:**
   - Ensure that there are no system-wide issues like memory corruption or hardware faults.
     ```bash
     dmesg | grep -i error
     free -m
     ```

3. **Run the `sleep` Command with Core Dump Collection:**
   - Use a tool to capture core dumps when running `sleep`.
     ```bash
     ulimit -c unlimited
     sleep 10
     ```
   - This will allow you to see if a core dump occurs and inspect it.

4. **Check the Environment Variables:**
   - Verify that no environment variables are interfering with the execution of `sleep`.
     ```bash
     printenv | grep SLEEP
     ```

5. **Inspect `/var/log/abrt`:**
   - Look at the details in the saved core dump files to see if they provide any clues.
     ```bash
     ls /var/spool/abrt/
     cd /var/spool/abrt/ccpp-2011-06-26-20\:09\:47-3859.new/
     gdb /bin/sleep coredump
     ```
   - Use `gdb` to analyze the core dump and see where it crashed.

### Example Test Cases

1. **Basic Sleep:**
   ```bash
   sleep 10
   ```

2. **Sleep in Background:**
   ```bash
   sleep 10 &
   ```

3. **With Different Arguments:**
   ```bash
   sleep 10 5 6 # This should give an error, but it's worth testing.
   ```

4. **Run with Core Dump Enabled:**
   ```bash
   ulimit -c unlimited
   sleep 5
   ```

### Expected Outcomes

- The `sleep` command should run without producing a core dump under normal circumstances.
- If there is an issue, the core dump and debug information from `gdb` might provide insight into what's going wrong.

By running these commands in various configurations, you can narrow down whether specific conditions are triggering the core dumps.","The information provided does not specify any particular issue with `/bin/sleep` itself; rather, it seems to suggest that core dumps are being generated for some reason when running `sleep`. This could be due to a variety of problems, including system instability, memory corruption in another part of the system affecting `sleep`, or an issue with the way ABRT (Automatic Bug Reporting Tool) is handling these processes.

However, based on the available information and common practices, here are some steps you might consider taking to identify the root cause:

1. **Check System Stability**:
   - Run stability tests like memtest86+ to check for RAM issues.
   - Monitor system logs (`/var/log/messages`, `/var/log/syslog`) for any other unusual entries or warnings.

2. **Verify ABRT Configuration**:
   - Ensure that ABRT is correctly configured on the system.
   - Check ABRT's log files (often found in `/var/log/abrt` or similar) for more detailed information about why core dumps are being generated.

3. **Test with Minimal Environment**:
   - Run `sleep` in a minimal environment to see if it still produces core dumps. You can do this by using a chroot jail with only the necessary system files.
   - Command: 
     ```bash
     sudo mkdir /tmp/miniroot
     sudo cp --parents $(ldd /bin/sleep | grep '=>' | awk '{print $3}') /tmp/miniroot/
     sudo cp /bin/sleep /tmp/miniroot/bin/
     sudo chroot /tmp/miniroot sleep 100000 &
     ```
   - Monitor for any issues.

4. **Check for Hardware Issues**:
   - Run hardware diagnostics provided by the system or hardware vendor.
   - Check the SMART status of disks if applicable.

5. **Update System and Packages**:
   - Ensure that all packages are up-to-date, including `glibc`, `kernel`, and other critical libraries.
   - Command: 
     ```bash
     sudo yum update  # On RedHat/CentOS systems
     sudo apt-get update && sudo apt-get upgrade  # On Debian/Ubuntu systems
     ```

6. **Reproduce in a Controlled Environment**:
   - Use virtualization to create a controlled environment that mirrors the production setup.
   - Command (using VirtualBox as an example):
     ```bash
     VBoxManage createvm --name ""TestVM"" --register
     VBoxManage modifyvm ""TestVM"" --memory 1024 --acpi on --boot1 dvd
     VBoxManage storagectl ""TestVM"" --name ""SATA Controller"" --add sata --controller IntelAhci
     VBoxManage createhd --filename ./TestVM.vdi --size 8000 --format VDI
     VBoxManage storageattach ""TestVM"" --storagectl ""SATA Controller"" --port 0 --device 0 --type hdd --medium ./TestVM.vdi
     VBoxManage startvm ""TestVM""
     ```
   - Install necessary packages and test `sleep` inside the VM.

7. **Analyze Core Dumps**:
   - Use tools like gdb to analyze core dumps for more insights.
   - Command (replace `/path/to/coredump` with the actual path):
     ```bash
     gdb /bin/sleep /path/to/coredump
     ```
   - Once in gdb, you can use commands like `bt` (backtrace) to see where the crash occurred.

By following these steps, you should be able to narrow down and potentially identify the cause of core dumps when running `/bin/sleep`. If the problem persists after exhausting these options, more specific debugging or hardware testing may be required.",https://bugzilla.redhat.com/show_bug.cgi?id=232458,
230950,Michal Jaegermann,2007-03-05T00:01:46Z,2007-12-14T11:19:20Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,anaconda  confused by selinux,normal,cp /tmp/syslog /tmp/logs/ should successfully copy the file without errors,cp: cannot set setfscreatecon `system_u:object_r:ramfs_t:s0': Read-only file system,Always,"After a boot with images using kernel-2.6.20-1.2962.fc7 and
in a shell supplied by ancoda if you try, say, this:

mkdir /tmp/logs
cp /tmp/syslog /tmp/logs/","$ mkdir /tmp/logs  
$ cp /tmp/syslog /tmp/logs/",sleep 100000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=230950,
246567,Karl Czajkowski,2007-07-03T05:03:48Z,2007-12-06T22:53:18Z,CLOSED ERRATA,low,medium,Fedora,coreutils,ls colour display corrupt for symbolic links,normal,"host::karlcz[~] /bin/ls --color=always | grep hosts
hosts","host::karlcz[~] /bin/ls --color=always | grep hosts
argetmhosts",Always,"1. create a symbolic link such as /home/user -> ../../etc/hosts
2. cd /home/user
3. /bin/ls --color=always | grep hosts","$ ln -s ../../etc/hosts /home/user
$ cd /home/user
$ /bin/ls --color=always | grep hosts","mktemp -t /tmp/.colorlsXXX 
bash -c 'echo > $TMP'",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=246567,
411181,Frank Sweetser,2007-12-04T22:03:44Z,2007-12-06T20:51:47Z,CLOSED ERRATA,low,low,Fedora,coreutils,%C output format (selinux file security context) of stat broken,,,,,,,"TZ=UTC+1 date
TZ=UTC+2 date
TZ=UTC+3 date","TZ=UTC+1 date  
TZ=UTC+2 date
TZ=UTC+3 date","TZ=UTC+1 date  
TZ=UTC+2 date  
TZ=UTC+3 date",https://bugzilla.redhat.com/show_bug.cgi?id=411181,
404511,idak,2007-11-29T15:00:38Z,2007-12-03T11:42:21Z,CLOSED ERRATA,low,low,Fedora,coreutils,Coreutils ls is wrong color for broken symlinks,,,,,,,sleep 100,"Based on the provided bug description, it appears that there is a segmentation fault (or similar runtime error) occurring during the execution of a program. The backtrace indicates that the crash happens within the `pause` function in the glibc library.

To reproduce this issue, we need to determine what conditions might lead to an improper use or access within the `pause` system call. Here are some test cases and commands you can try:

### Test Case 1: Simple Pause Call
Run a simple C program that calls the `pause` function repeatedly.
```c
#include <unistd.h>
#include <stdio.h>

int main() {
    while (1) {
        printf(""Pausing...\n"");
        pause();
    }
    return 0;
}
```
Compile and run this program:
```sh
gcc -o test_pause test_pause.c
./test_pause
```

### Test Case 2: Multi-threaded Environment
Since the backtrace shows a check for `__libc_multiple_threads`, it might be related to multi-threading. Try running a multi-threaded program that calls `pause` in multiple threads.
```c
#include <pthread.h>
#include <unistd.h>

void* thread_func(void* arg) {
    while (1) {
        pause();
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    if (pthread_create(&t1, NULL, thread_func, NULL)) {
        fprintf(stderr, ""Error creating thread 1\n"");
        exit(1);
    }

    if (pthread_create(&t2, NULL, thread_func, NULL)) {
        fprintf(stderr, ""Error creating thread 2\n"");
        exit(1);
    }

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    return 0;
}
```
Compile and run this program:
```sh
gcc -o test_multithread_pause test_multithread_pause.c -pthread
./test_multithread_pause
```

### Test Case 3: Interrupt Handling
Ensure that `pause` handles signals properly by sending a signal to the process.
1. Run the simple pause example from Test Case 1.
2. Send an interrupt signal to the running program using:
    ```sh
    kill -SIGINT <pid>
    ```
   where `<pid>` is the process ID of the running test.

### Additional Debugging Steps

- **Enable Core Dumps:** Ensure that core dumps are enabled to capture more information about the crash.
  ```sh
  ulimit -c unlimited
  ```

- **Run with Debugger:**
  Use `gdb` to run the program and catch the error:
  ```sh
  gdb ./test_pause
  (gdb) r
  (gdb) bt full
  ```

### Summary of Commands

1. Simple Pause Call Test:
   ```sh
   gcc -o test_pause test_pause.c
   ./test_pause
   ```

2. Multi-threaded Environment Test:
   ```sh
   gcc -o test_multithread_pause test_multithread_pause.c -pthread
   ./test_multithread_pause
   ```

3. Interrupt Handling Test (run the simple pause example and then):
   ```sh
   kill -SIGINT <pid>
   ```

4. Enable Core Dumps:
   ```sh
   ulimit -c unlimited
   ```

5. Run with Debugger:
   ```sh
   gdb ./test_pause
   (gdb) r
   (gdb) bt full
   ```

These steps should help you reproduce the issue and gather more information about where the failure occurs in your program.","The provided crash report describes a segmentation fault occurring in the `pause()` system call. However, it seems unusual as `pause()` is generally straightforward and does not typically involve dereferencing any pointers that could cause such an issue.

That said, if this is indeed reproducible, here are some steps you can take to reproduce the bug:

1. **Reproduce with a Simple Test Case:**
   Create a minimal C program that calls `pause()`. Compile it and run the binary.
   
```c
#include <unistd.h>

int main(void) {
    pause();
    return 0;
}
```

If this doesn't crash, then the issue might be related to how the code is being compiled or linked.

2. **Check for Compiler Flags:**
   If you are using special compiler flags, try compiling without them.
   
3. **Run in a Debugger:**
   Run your program within `gdb` or another debugger to see if it provides more context about the crash.
   
```bash
$ gdb ./your_program
(gdb) run
```

4. **Check for Multithreading Issues:**
   Since `pause()` checks if multiple threads are running (`__libc_multiple_threads`), ensure that your application is not experiencing any threading issues.

5. **Try with Different Libraries:**
   Sometimes, system libraries can have bugs or incompatibilities. Try updating the glibc to a newer version (if applicable) and see if it resolves the issue.

6. **Check for Memory Corruption:**
   If the crash is occurring due to memory corruption elsewhere in your program, tools like `valgrind` could help identify these issues.
   
```bash
$ valgrind ./your_program
```

7. **Examine Kernel and System Logs:**
   Check the system logs (`dmesg`, `/var/log/syslog`) for any relevant kernel messages that might provide more insight into the crash.

8. **Test with Different Environments:**
   Sometimes, issues can be specific to a certain environment or hardware setup. Try running your program on different machines or in virtual environments to see if you can reproduce the issue.

9. **Review Third-Party Libraries and Dependencies:**
   Ensure that there are no known bugs in third-party libraries or dependencies used by your application.

Given the information provided, it's not immediately clear what might be causing the crash. The steps above should help identify potential issues and narrow down the cause of the problem. If after these steps you still can't reproduce the issue with a simple test case, it may be worth reviewing more details about the specific environment or system setup where this is occurring.",https://bugzilla.redhat.com/show_bug.cgi?id=404511,
358701,Elliot Lee,2007-10-30T17:48:11Z,2007-11-30T22:12:20Z,CLOSED DUPLICATE,low,urgent,Fedora,coreutils,/bin/cp can cause data loss on filesystems that are not SELinux aware,normal,file2 has same contents as file1,file2 is empty,Always,"1. Go to an NFS-mounted directory that has a non-empty file named 'file1'.
2. Run 'cp -av file1 file2'.
3. Run 'cp -av file1 file2' again.","$ cd /path/to/nfs-mounted-directory
$ ls file1
$ cp -av file1 file2
$ cp -av file1 file2",sleep 100,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=358701,
356311,Andrew Haley,2007-10-29T11:36:46Z,2007-11-30T22:12:20Z,CLOSED RAWHIDE,low,low,Fedora,coreutils,SELinux does not allow cp -a over NFS,normal,cp -a works correctly,cp -a fails due to fsetxattr error,Always,"- echo poo > a
- cat a
poo
- cp -a a b
- echo $?
1
- cat b
- ls -l b
 -rw-r--r-- 1 aph aph 0 2007-10-29 11:33 b","$ echo poo > a
$ cat a
$ cp -a a b
$ echo $?
$ cat b
$ ls -l b",sleep 100,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=356311,
340291,Stas Sergeev,2007-10-19T18:27:08Z,2007-11-30T22:12:19Z,CLOSED NOTABUG,low,low,Fedora,coreutils,test -n doesnt work,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=340291,
313401,Edward J. Huff,2007-10-01T00:41:41Z,2007-11-30T22:12:17Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"date --help, man date and info date now omit --iso option",normal,documentation of date --iso,not found,Always,"1. date --help or man date or info date
2. search for --iso","$ date --help
$ man date
$ info date","sleep 100 

Note: The provided information does not guarantee that this command will reproduce the bug, as the crash might be related to other factors such as system load, resource constraints, or specific timing issues. However, based on the given cmdline (""cmdline: sleep 100""), this is a possible test case.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=313401,
305341,Andrew Clayton,2007-09-25T15:47:57Z,2007-11-30T22:12:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,fchmodat won't remove setgid/uid bits,normal,"Sticky bits should be removed ",Sticky bits remain,Always,"1. Create a directory
2. Set the group and/or user bits on the directory
3. Try to remove the sticky bits",,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=305341,
299121,Jonathan Kamens,2007-09-20T19:42:01Z,2007-11-30T22:12:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"""[ -n ${emptyvariable} ]"" returns true",,,,,,,sleep 100,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=299121,
280331,Jacques Beigbeder,2007-09-06T11:35:45Z,2007-11-30T22:12:15Z,CLOSED DUPLICATE,medium,low,Fedora,coreutils,"cp -a with NFS and selinux permissive fails, copy is empty!",normal,"-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto1
-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto2      <<< CORRECT","-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto1
-rw-r--r-- 1 beig hard  0 Sep  6 13:17 toto2     <<< BUG!",Always,"cd /partition  (NFS mounted, for instance localhost:/partition; so NFS server
                 and NFS client are FC7-64)
rm -f toto*
date > toto1
cp -i -a toto1 toto2
cp -i -a toto1 toto2
ls -l toto*","$ cd /partition
$ rm -f toto*
$ date > toto1
$ cp -i -a toto1 toto2
$ cp -i -a toto1 toto2
$ ls -l toto*",sleep 100,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=280331,
251800,vikram goyal,2007-08-11T12:26:35Z,2007-11-30T22:12:12Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,command install sets wrong permissions,,,,,,,sleep 1000000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=251800,
251653,Krzysio (Chris) Leszczynski,2007-08-10T09:20:09Z,2007-11-30T22:12:12Z,CLOSED NOTABUG,low,low,Fedora,coreutils,rm -rf cannot kill directory that is protected,normal,"I'd expect rm to try hard to remove the directory by changing its mode. If it
can't remove the directory it should restore the mode. It would be even better
if it try to chmod just to read and then chmod just to x to remove subdirs.
It's hard to do safely and simply by shell script.","""a"" is not removed even if rm could change its permission. The unix manual
incorrectly states that one should do chown +rwx first. This is incorrect,
because some of files could be hard-linked to others. Oh, ther",Always,"1. mkdir -p a/b/c
2. chmod 0 a
3. rm -rf a","$ mkdir -p a/b/c
$ chmod 0 a
$ rm -rf a",sleep 1000000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=251653,
250089,Tim Waugh,2007-07-30T13:56:59Z,2007-11-30T22:12:11Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,du doesn't report size of unreadable sub directories,normal,"du test
4       test/dir
du: cannot read directory `test/unreachable-dir': Permission denied
12      test","du: `du_test/unreadable': Permission denied
4096    du_test",Always,"1. cd /tmp
2. mkdir -p du_test/unreadable
3. du -a -b du_test
   4096    du_test/unreadable
   8192    du_test
4. chmod 000 du_test/unreadable
5. du -b -a du_test
   du: `du_test/unreadable': Permission denied
   4096    du_test","$ cd /tmp
$ mkdir -p du_test/unreadable
$ du -a -b du_test
$ chmod 000 du_test/unreadable
$ du -b -a du_test",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=250089,
249421,Scott Baker,2007-07-24T16:45:01Z,2007-11-30T22:12:11Z,CLOSED DUPLICATE,low,low,Fedora,coreutils,sort -R is not random,,,,,,,sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=249421,
248591,zeno,2007-07-17T16:55:34Z,2007-11-30T22:12:10Z,CLOSED ERRATA,low,low,Fedora,coreutils,The i and u switches for cp do not work together,normal,"You should not be prompted. The u switch indicates that the file should only be
copied if file1 is newer than file2.",You will be prompted to overwrite file2.,Always,"1. Create a file (file1).
2. Create another file (file2) with the same name in another directory.
3. Make sure file1 has an older file modified date than file2.
4. Use cp -iu to copy file to the directory in the same place as file2.","$ touch file1
$ mkdir dir && touch dir/file2
$ touch -t 202301010000 file1 && touch file2
$ cp -iu file1 dir/",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=248591,
232652,Ulrich Drepper,2007-03-16T14:52:47Z,2007-11-30T22:11:59Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,runcon shouldn't reorder parameters,normal,Success,"runcon: invalid option -- N
[...]",Always,"1.echo 'int main(){return 0;}' > u.c
2.gcc -o u u.c
3.runcon -t unconfined_t /usr/sbin/prelink -N ./u","$ echo 'int main(){return 0;}' > u.c
$ gcc -o u u.c
$ runcon -t unconfined_t /usr/sbin/prelink -N ./u",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=232652,
,,,,,,,,,,,,,,,,sleep 1000,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf"" | sort -k 1,1 -k 2n,2
```","echo -e 'x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf' | sort -k 1,1 -k 2n,2","echo -e ""x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf"" | sort -k 1,1 -k 2n,2",,
,,,,,,,,,,,,,,,,"```bash
cat > test <<EOF
x  A 1
x  B 1
xx A 2
xx B 2
EOF
sort -k2 < test
```","cat <<EOF > test
x  A 1
x  B 1
xx A 2
xx B 2
EOF
<test sort -k2","cat test 
x  A 1
x  B 1
xx A 2
xx B 2
<test sort -k2",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
ls -Z
sudo cp -Z unconfined_u:object_r:samba_share_t:s0 file1 testing/
ls -Z testing/
```","touch file1; mkdir testing
sudo cp -Z unconfined_u:object_r:samba_share_t:s0 file1 testing/",None,,
,,,,,,,,,,,,,,,,man cp,man cp,man cp,,
,,,,,,,,,,,,,,,,"```bash
touch /var/www/html/file1
ls -Z /var/www/html/file1
chcon -c -t samba_share_t /var/www/html/file1
```","touch /var/www/html/file1
ls -Z /var/www/html/file1
chcon -c -t samba_share_t /var/www/html/file1","touch /var/www/html/file1  
ls -Z /var/www/html/file1  
chcon -c -t samba_share_t /var/www/html/file1",,
,,,,,,,,,,,,,,,,"date
date --date=""last month""",None,None,,
,,,,,,,,,,,,,,,,"```bash
readprofile | sort -n
```","echo -e ""105 _spin_unlock_irq 15.0000\n108 cache_alloc_debugcheck_after 0.3673\n108 schedule 0.0400\n10 avc_audit 0.0042\n10 copy_files 0.0159\n10 do_sync_read 0.0426\n11 process_backlog 0.0430\n125 kfree 1.0331\n12 dbg_redzone2 0.2553\n12 generic_fillattr 0.0800\n12 permission 0.0779\n135 *unknown*\n13 add_to_page_cache 0.0872\n13 cond_compute_av 0.1171\n140 find_get_page 2.1875\n140 _raw_spin_lock 1.4286\n1436 buffered_rmqueue 3.1840\n14 avc_has_perm 0.2029"" | sort -n",None,,
,,,,,,,,,,,,,,,,who am i,who am i,None,,
,,,,,,,,,,,,,,,,None,"Based on the provided bug description, it appears that a segmentation fault occurs when running the `head` command with specific parameters and input files. The crash happens during memory copying operations within the GNU coreutils' `head` program.

The relevant information from the bug report is:
- A segmentation fault occurred in the `__mempcpy_ia32` function.
- The issue involves the `head` utility from GNU coreutils.
- The specific command and input that triggered the crash are not explicitly stated, but based on the context provided by the backtrace, it seems to be related to reading a file (or possibly standard input).

To reproduce this bug, you would need to run a test case using the `head` command with similar parameters. Below is an example of how you might construct such a test:

1. Create a file that potentially has characteristics triggering the issue.
2. Run the `head` command with a specific number of lines or bytes.

Here are some potential commands and files to try:

### Step 1: Create Test Files
First, create a sample input file:
```bash
echo -e ""Line 1\nLine 2\nLine 3"" > testfile.txt
```

### Step 2: Run the `head` Command with Different Parameters
Run the `head` command with different parameters to see if you can reproduce the issue:

#### Test Case 1:
```bash
head -n 5 testfile.txt
```

#### Test Case 2 (Read from standard input):
```bash
cat testfile.txt | head -n 5
```

### Step 3: Additional Testing with Large Files and Special Cases
If the above commands do not reproduce the bug, try creating a larger file or using special cases:

- Create a large file:
    ```bash
    seq 10000 > largefile.txt
    ```

- Try reading from a large file:
    ```bash
    head -n 5 largefile.txt
    cat largefile.txt | head -n 5
    ```

### Step 4: Edge Cases and Special Inputs
Try running `head` with edge cases or special inputs:

- Empty file:
    ```bash
    touch emptyfile.txt
    head -n 5 emptyfile.txt
    cat emptyfile.txt | head -n 5
    ```

- Reading from `/dev/null`:
    ```bash
    head -n 5 /dev/null
    ```

### Step 5: Verify Version of `head`
Ensure you're using the same version or a close enough version to replicate the issue:

```bash
head --version
```

By running these test cases, you might be able to identify specific conditions that cause the crash. If none of these reproduce the bug, you may need additional context from the original environment where the bug was observed.

### Conclusion:
The exact command and file causing the problem are not explicitly provided in your report, so testing various edge cases and parameters with `head` should help pinpoint the issue.","Based on the provided crash report and backtrace, the issue seems to be related to the `head` command in Linux when processing a specific file. However, the error occurs during memory copying operations which might not directly relate to the contents of the file but rather how it's being handled.

To reproduce this bug, we would need similar conditions that led to this crash:

1. **File Input:** The crash is occurring when `head` is trying to process a file. This could be any file, but you might want to try files with large sizes or unusual binary data to see if the issue reproduces.

2. **System State:** The system state during the execution of `head` seems crucial as well. The report mentions that this crash happened after ""suspend and resume"" which suggests it may have something to do with memory management post-system suspension. So, we need to try suspending and resuming our machine before running the `head` command.

3. **Command Syntax:** The exact syntax of the command used also matters, as shown in the backtrace (`head -c 1 /path/to/file`). We should use a similar or identical command sequence.

Here are some test cases that could help us reproduce this issue:

### Test Case 1: Basic Usage
- Command: `head -c 1 <path-to-large-binary-file>`
- Description: Try using a large binary file and see if the system crashes. If not, try resuming from suspend as well.

### Test Case 2: Post Suspend/Resume
- Action: Suspend the computer.
- Command: Resume the computer after some time.
- Command: `head -c 1 <path-to-large-binary-file>`
- Description: This mimics the situation described in the crash report where the system was suspended before running the command.

### Test Case 3: Multiple Files
- Command: `head -c 1 file1 binaryfile2 textfile3`
- Description: Try using multiple files, one of which is a large binary file. This could help determine if the issue is related to the specific file being processed or just any binary data.

### Test Case 4: Special Files
- Command: `head -c 1 /dev/zero` 
- Description: Some special files might trigger edge cases in system calls, try this as well.

### Test Case 5: Stress Testing System Memory
- Action: Run a memory-intensive program (like `stress-ng`) to fill up available RAM.
- Command: Suspend the computer.
- Command: Resume the computer after some time.
- Command: `head -c 1 <path-to-large-binary-file>`
- Description: This could help determine if low system resources are contributing to the issue.

If none of these test cases reproduce the crash, it's possible that there is a combination of factors at play which might be difficult to pinpoint without more specific information about the environment (hardware, kernel version, etc.). However, they should provide a good starting point for debugging and reproducing the issue.",,
,,,,,,,,,,,,,,,,"date -d 'TZ=""America/Los_Angeles"" ""00:00 + 1 hour""'","date -d 'TZ=\""America/Los_Angeles\"" \""00:00 + 1 hour\""'","date -d 'TZ=""America/Los_Angeles"" ""00:00 + 1 hour""'",,
,,,,,,,,,,,,,,,,"```bash
id
echo $XDG_RUNTIME_DIR 
su - gamer
id
echo $XDG_RUNTIME_DIR 
gcalctool
```","id=1000(kparal) gid=1000(kparal) groups=1000(kparal),4(adm),10(wheel)
echo $XDG_RUNTIME_DIR 
su - gamer
id
echo $XDG_RUNTIME_DIR 
gcalctool","id  
echo $XDG_RUNTIME_DIR  
su - gamer  
id  
echo $XDG_RUNTIME_DIR  
gcalctool",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir Default
touch Default/file
rm -rf Default
ls -laZ Default
ls -laZd Default
sudo rm -rf Default
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
printf ""%s\n"" {1..1000} > xxx-tst
/usr/bin/dd if=xxx-tst of=xxx-tst-op count=20
wc -l xxx-tst*
```","touch xxx-tst; for i in {1..1000}; do echo ""line$i"" >> xxx-tst; done
/usr/bin/dd if=xxx-tst of=xxx-tst-op count=20
wc -l xxx-tst*","echo -e ""$(seq 1 1000)"" > xxx-tst
/usr/bin/dd if=xxx-tst of=xxx-tst-op count=20
wc -l xxx-tst*",,
,,,,,,,,,,,,,,,,"```bash
mkdir dr_replay
touch dr_replay/build.sh
touch dr_replay/core.2328
truncate -s 47M dr_replay/core.2328
touch dr_replay/env.sh
touch dr_replay/memcached
touch dr_replay/out
touch dr_replay/run1.sh
touch dr_replay/run2.sh
mkdir dr_replay/sym
touch dr_replay/test_main
touch dr_replay/test_main.c
touch dr_replay/core.6597
truncate -s 44M dr_replay/core.6597
fallocate -l 397K dr_replay/memcached
fallocate -l 15K dr_replay/out
fallocate -l 8.5K dr_replay/test_main
ll -sh dr_replay/
ls -sh dr_replay/
```",None,None,,
,,,,,,,,,,,,,,,,"ls -dlZ / 
ls -dZl /","ls -dlZ /
ls -dZl /","ls -dlZ /
ls -dZl /",,
,,,,,,,,,,,,,,,,cd /bin; realpath -s .,cd /bin; realpath -s .,cd /bin; realpath -s .,,
,,,,,,,,,,,,,,,,make check,None,make check,,
,,,,,,,,,,,,,,,,"```bash
mkdir ~/tmp
chmod 755 ~/tmp
echo 'setenv TMPDIR ~/tmp' >> ~/.login
sudo yum install xfce4-session xfdesktop
```
Then, log out and log back in, choosing XFCE4 as the desktop environment. The issue should be reproducible if the bug description is accurate. Note: This assumes a Fedora-based system with `yum` package manager. On other systems, you might need to use a different package manager (e.g., `apt-get` on Debian-based systems). 

Also note that setting up the display manager and choosing tcsh as the login shell might require additional steps depending on your distribution and current setup.

Alternatively, if you are using a non-RPM based system:

```bash
mkdir ~/tmp
chmod 755 ~/tmp
echo 'setenv TMPDIR ~/tmp' >> ~/.login
sudo apt-get install xfce4 xfce4-session
```
Then follow the same procedure as above. 

Please be aware that these commands might not work in all environments, especially if you're using a different distribution or display manager. You may need to adjust them according to your system configuration.",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,tr '\\001' '\\012',None,None,,
,,,,,,,,,,,,,,,,ls /,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"mkfs.xfs /dev/sdX
mount /dev/sdX /mnt
cd /mnt
git clone https://github.com/coreutils/coreutils.git
cd coreutils
./configure
make
make check",None,None,,
,,,,,,,,,,,,,,,,rpmbuild --rebuild --with Werror=format-security coreutils-8.21-19.fc21.src.rpm,None,"Build coreutils-8.21-19.fc21.src.rpm with ""-Werror=format-security"" flag to reproduce the problem.",,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /usr/lib/systemd/user-generators/
mkdir -p /usr/lib/systemd/system-generators/

ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator
ls -al /usr/lib/systemd/user-generators/

ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator
ls -al /usr/lib/systemd/user-generators/

ln -s --relative -f /usr/lib/systemd/system-generators/systemd-dbus1-generator /usr/lib/systemd/user-generators/systemd-dbus1-generator
```","mkdir -p /tmp/user-generators /tmp/system-generators
touch /tmp/system-generators/systemd-dbus1-generator
ln -s --relative -f /tmp/user-generators/ /tmp/system-generators/systemd-dbus1-generator
ln -s --relative -f /tmp/user-generators/ /tmp/system-generators/systemd-dbus1-generator
ln -s --relative -f /tmp/system-generators/systemd-dbus1-generator /tmp/user-generators/systemd-dbus1-generator",None,,
,,,,,,,,,,,,,,,,"```bash
echo ""Hello World"" > testfile
echo ""md5sum  e59ff5c3578ab26f2e486e5b51fb73a4  testfile"" > checksums.txt
echo ""sha1sum  2ef7bde608ce5404e97d5f042f95f89f1c232871  testfile"" >> checksums.txt
md5sum -c checksums.txt
sha1sum -c checksums.txt
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,su -,None,None,,
,,,,,,,,,,,,,,,,"```bash
source colorls.sh
echo $TMP
```",echo $TMP,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir test_dir
touch test_dir/{Ã¤,Ã¶,Ã¼,a,b,c}
ls -l test_dir > log
sort -k9 log
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LANG=en_US.UTF-8 time cut -c 1-10 /path/to/large/file > /dev/null
LANG=C time cut -c 1-10 /path/to/large/file > /dev/null
LANG=en_US.UTF-8 time grep ""pattern"" /path/to/large/file > /dev/null
LANG=C time grep ""pattern"" /path/to/large/file > /dev/null
```",None,"```bash
# Create a large file with random content
dd if=/dev/urandom bs=1M count=100 | base64 > largefile.txt

# Run the script in UTF-8 locale (assuming the default is UTF-8)
./textparse.sh

# Run the script in C locale
LANG=C ./textparse.sh
```",,
,,,,,,,,,,,,,,,,"```bash
mktemp /tmp/colorlsXXX
# Simulate colorls.sh script
echo ""Temporary file created""
# Exit without removing the temporary file
exit 1
# Check if the temporary file still exists
ls /tmp/colorls*
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 30,None,None,,
,,,,,,,,,,,,,,,,"```bash
locale -a
localedef -i en_GB -f UTF-8 en_GB.UTF-8
export LC_ALL=en_GB.UTF-8
date
date -d ""$(date)""
```","export LC_ALL=en_GB.UTF-8
date
date -d ""$(date)""",None,,
,,,,,,,,,,,,,,,,"To reproduce a bug related to the `dircolors` configuration file (often used with the `ls` command in Linux systems), which seems to be what's provided here, you would typically follow these steps:

1. **Save the Provided Configuration**:
   - Copy the entire contents of the provided text into a new file.
   - Save this file as `.dircolors` (note the dot at the beginning) in your home directory or another location where you can easily reference it.

2. **Apply the `dircolors` Configuration**:
   - Open a terminal and navigate to the directory where you saved the `.dircolors` file.
   - Apply the configuration by running the command: `eval $(dircolors ~/.dircolors)` (assuming you saved it in your home directory).
   - Alternatively, if you want this configuration to be applied every time you log in, you can add the line `eval $(dircolors ~/.dircolors)` to your shell's configuration file (`~/.bashrc`, `~/.zshrc`, etc.).

3. **Test with the `ls` Command**:
   - Run the command `ls` in the terminal.
   - Observe how different types of files and directories are colored based on the configuration you've applied.

4. **Specific Test Cases to Reproduce Issues**:
   - Create a variety of file types mentioned in the `.dircolors` configuration (e.g., archives like `.tar`, `.zip`; images like `.jpg`, `.png`; audio files like `.mp3`, `.ogg`) and observe their colors.
   - Check directories, executable files, and symbolic links to ensure they are colored as expected according to the configuration.

5. **Identifying Bugs**:
   - If certain file types are not being colored correctly (or at all), this could indicate a bug either in the `dircolors` configuration itself or in how the system is interpreting these configurations.
   - Pay particular attention to any lines in the `.dircolors` file that have been commented out (preceded by a `#`) as these might be intended fixes or workarounds for specific issues.

**Note**: The provided text seems more like a comprehensive configuration example rather than a bug description. If there's a specific bug you're trying to reproduce, additional details about the expected behavior versus the actual behavior would be necessary to provide targeted test cases.","Based on your provided content, it looks like you are sharing a part of a `dircolors` configuration file rather than a bug report with specific symptoms and steps to reproduce an issue. Therefore, there's no explicit ""bug"" described here. However, if we consider that the task is to understand how this configuration might be used and tested for potential issues related to colorization in a directory listing, I can suggest some commands or test cases.

### Steps to Apply and Test `dircolors` Configuration

1. **Save the given configuration** as a file, e.g., `mycolors`.
2. **Apply the configuration using `dircolors`**: 
   ```bash
   eval $(dircolors -b mycolors)
   ```
3. **Use `ls` to see the colorized output**:
   ```bash
   ls --color=auto
   ```

### Test Cases for Reproducing Potential Issues

1. **Check if binary documents and text files are correctly colored as brown:**
    - Create or move some PDF, DOCX, XLSX, TXT files into a directory.
    - Run `ls --color=auto` in that directory to see if they're colored according to the configuration.

2. **Verify audio and image formats**:
   - Place audio files (like .mp3, .wav) and image files (like .jpg, .png) in a directory.
   - Use `ls --color=auto` to check their colorization.

3. **Check if executable scripts or other file types are colored as expected:**
    - Create some shell script files (`test.sh`, make them executable using `chmod +x test.sh`) and text documents.
    - Run `ls --color=auto` in the directory containing these files to see their colorization.

4. **Test if there is any overlap or misclassification**:
   - Ensure that file types are not being incorrectly colored due to overlapping rules.
   
5. **Check if all supported extensions are recognized and displayed correctly:**
    - Place various files with different extensions in the directory, as listed in your configuration, and verify their colorization.

### Example Test Commands

```bash
# Create some sample files for testing
echo ""This is a text file"" > test.txt
touch image.jpg audio.mp3 document.pdf script.sh
chmod +x script.sh # Make sure it's executable

# Apply the dircolors configuration and list with colors
eval $(dircolors -b mycolors)
ls --color=auto
```

### Observations to Confirm Correct Behavior

- **Text Files (.txt)**: Should appear brown.
- **PDF Documents**: Should also be colored brown as per your specified rules.
- **Image Files (.jpg, .png)**: Magenta color.
- **Audio Files (.mp3, .wav)**: Cyan color.

If you observe any discrepancies or unexpected behaviors, it would help pinpoint where the issue might lie in the configuration.","The provided text does not explicitly describe a ""bug,"" but rather provides a configuration file for colorizing files in a terminal using `LS_COLORS` via a `.dircolors` file (or similar). To reproduce any potential issue related to this setup, you would need to follow these steps:

1. **Create or Edit the Configuration File:**
   Ensure that your `~/.dircolors` file is created with the provided content or equivalent.

2. **Apply the Configuration:**
   Run the following command to apply the colorization settings from the `.dircolors` file:
   ```bash
   eval ""$(dircolors -b ~/.dircolors)""
   ```
   
3. **Use `ls` Command with Color Option:**
   Test the colorization by running `ls` with the `-G` option (on macOS) or `--color=auto` (on Linux):
   ```bash
   ls -G
   # or
   ls --color=auto
   ```

4. **Verify File Coloring:**
   Check that the files are colored as expected according to the provided `.dircolors` configuration.

5. **Test with Different Terminals and Shells:**
   Since terminal color support can vary, test in different terminals (e.g., GNOME Terminal, Konsole) and shells (e.g., Bash, Zsh).

6. **Check for Errors or Unexpected Behavior:**
   Look out for any errors in the output of `ls` or unexpected file colorings that do not match the `.dircolors` configuration.

7. **Ensure Compatibility with `LS_COLORS`:**
   Make sure that your environment variable `LS_COLORS` is set correctly and does not conflict with other settings.

If you encounter issues, such as files not being colored according to the expected rules, it could be due to misconfiguration or compatibility issues between terminal emulators, shell versions, or system configurations. The exact bug would need a clear description of what's going wrong for more specific troubleshooting steps.",,
,,,,,,,,,,,,,,,,"```bash
# Create a test environment with two NFS mounts defined in fstab
echo ""<host>:/mnt/raid/media /mnt/media nfs defaults 0 0"" >> /etc/fstab
echo ""<host>:/mnt/raid/backup /mnt/backup nfs defaults 0 0"" >> /etc/fstab

# Mount the filesystems
mount -a

# Run the df command to observe the result
df

# Compare with the output of the mount command
mount
```","df
mount","mount <host>:/mnt/raid/media /mnt/media  
mount <host>:/mnt/raid/backup /mnt/backup  
df",,
,,,,,,,,,,,,,,,,"```c
#include <unistd.h>
#include <stdio.h>

int main()
{
    printf(""test sync()\n"");

    sync();
    return 0;
}
```
Then compile and run it:
```bash
gcc test.c -o test
./test
```
Or directly run the sync command:
```bash
sync
```","gcc -o test test.c test.c
./test

sync

^C

None of these directly produce a command that will hang indefinitely by just running as shown; however, based on the steps provided and the expected behavior (that the process does not terminate with `Ctrl-C`), the most relevant direct reproduction case for the bug report is:

```bash
gcc -o test test.c <(echo '#include <unistd.h>'; echo '#include <stdio.h>'; echo 'int main() { printf(""test sync()\\n""); sync(); return 0; }')
./test
```

This will compile and run a small C program that executes `sync()` which, according to the report, hangs and cannot be interrupted with `Ctrl-C`.

For simplicity, if we consider only the `sync` command provided in the bug description:

```bash
sync

^C
```","```bash
sync
```",,
,,,,,,,,,,,,,,,,"```bash
module avail
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort
```","export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort","export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort",,
,,,,,,,,,,,,,,,,"```bash
echo -e ""xrandr --output VGA1 --left-of LVDS1\n\uFFFD"" > data
cat data | LC_ALL=C uniq
cat data | LC_ALL=en_US.utf8 uniq
```","cat data | LC_ALL=C uniq
cat data | LC_ALL=en_US.utf8 uniq",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"To attempt to reproduce this bug, we'll focus on the key elements provided in the stacktrace and the steps to reproduce mentioned in the report. The primary details include:

1. **Command Run**: `yum update -x mutter\* --skip-broken`
2. **Package Versions**:
   - `glibc-debuginfo-common-2.18.90-17.fc21.x86_64`
   - `glibc-debuginfo-2.18.90-17.fc21.x86_64`
   - `coreutils-8.22-2.fc21.x86_64`
   - `glibc-common-2.18.90-18.fc21.x86_64`
   - `glibc-2.18.90-18.fc21.x86_64`
   - `glibc-devel-2.18.90-18.fc21.x86_64`
   - `glibc-headers-2.18.90-18.fc21.x86_64`

Given the information, here are steps to potentially reproduce or investigate this issue:

### Step 1: Environment Setup
Ensure you have a Fedora 21 system (or a compatible environment) with the mentioned package versions installed. If not, you may need to downgrade or install specific versions of these packages.

```bash
# Install necessary packages and dependencies for testing
sudo dnf install -y glibc-debuginfo-common glibc-debuginfo coreutils glibc-common glibc glibc-devel glibc-headers

# Optionally, if you're on a newer system, try to match the versions mentioned
# This might involve downgrading or using a version lock, which can be complex and is not recommended without careful consideration.
```

### Step 2: Reproduce Command
Run the command that was executed when the bug occurred:

```bash
sudo yum update -x mutter\* --skip-broken
```

Or, if you're using `dnf` (which replaced `yum` in newer Fedora versions):

```bash
sudo dnf update -x 'mutter*' --skip-broken
```

### Step 3: Monitor for Errors
Pay close attention to any errors or crashes during the execution of the command. If `uniq` crashes, you should see a similar stacktrace or error message indicating a problem with memory allocation or deallocation (`_int_free`), which seems to be related to the `glibc` and potentially the interaction with `coreutils`.

### Additional Steps for Investigation
If the exact reproduction is challenging due to versioning or environmental factors, consider:

- Checking for similar issues in bug trackers or forums related to Fedora, `glibc`, and `coreutils`.
- Attempting to debug `uniq` directly with tools like `gdb` to see if you can replicate the crash outside of the `yum`/`dnf` update process.
- Reviewing system logs (`/var/log/messages`, `/var/log/secure`, etc.) for any relevant error messages around the time of the crash.

### Note:
Reproducing this bug might require a specific setup or sequence of events that is not easily replicable in a standard testing environment. The steps provided are based on the information given and may need to be adapted depending on the exact conditions under which the bug occurs.","Based on the provided information, it seems that a segmentation fault occurred during the execution of `uniq`, which is part of the coreutils package. The crash happened while running `yum update` with certain options. Here are steps you can follow to attempt reproducing this issue:

### Steps to Reproduce:
1. **Environment Setup:**
   - Ensure your system is set up for Fedora Rawhide or another relevant development branch.
   - Install the necessary packages including `coreutils` and `glibc`.

2. **Run Yum Update with Skip Options:**
   - Execute the following command, which should simulate the environment where the issue was originally encountered:
     ```bash
     sudo yum update -x mutter\* --skip-broken
     ```

### Expected Results vs Actual Results:
- **Expected:** The `yum` command should complete successfully without any crashes or errors.
  
- **Actual:** Based on the crash report, a segmentation fault occurred in the `uniq` command (part of coreutils) while running this `yum update`.

### Additional Information and Debugging Steps:

1. **Check for Related Dependencies:**
   - Ensure that all relevant dependencies are up-to-date:
     ```bash
     sudo yum install glibc-debuginfo-common-2.18.90-17.fc21.x86_64
     sudo yum install glibc-debuginfo-2.18.90-17.fc21.x86_64
     ```

2. **Enable Core Dumps:**
   - Enable core dumps to capture more information if the crash happens again:
     ```bash
     ulimit -c unlimited
     ```
   
3. **Run Yum in Debug Mode:**
   - Run `yum` with verbose and debug options for additional logging:
     ```bash
     sudo yum update -x mutter\* --skip-broken -v -d 7
     ```

4. **Check Log Files:**
   - After attempting to reproduce the issue, check log files such as `/var/log/messages`, `/var/log/audit/audit.log`, or `~/.bash_history` for any clues.

5. **Run Uniq Directly with Valgrind (Optional):**
   - To further debug if it's an issue specifically related to `uniq`:
     ```bash
     valgrind /usr/bin/uniq [input_file]
     ```
   
By following these steps, you should be able to recreate the environment where the crash occurred and gather more information about why `uniq` is crashing during a `yum update`. If the crash is reproducible, this will provide valuable data for fixing the issue.","Based on the given bug report, there isn't enough information to pinpoint exact steps to reproduce the issue with `uniq` crashing. However, we can make an educated guess based on the context provided.

The problem seems to arise during a system update operation using YUM, specifically when running `yum update -x mutter\* --skip-broken`. Given that `uniq` is not directly related to this command, it's likely that something in the system state or environment caused `uniq` to crash. 

One potential test case would be to try and run a sequence of commands that might cause similar conditions:

1. Perform a full system update using YUM:
   ```
   sudo yum update
   ```

2. Skip certain packages during an update (try excluding some common packages):
   ```
   sudo yum update -x <package-name>\*
   ```

3. Use the `--skip-broken` option to work around broken dependencies:
   ```
   sudo yum update --skip-broken
   ```

4. After performing any of these commands, try running `uniq` on some data:
   ```
   cat /path/to/some/file | uniq
   ```

5. Repeat the above steps in different combinations (e.g., with and without `--skip-broken`, excluding different packages).

6. Try to run `uniq` under conditions that might stress system memory or disk space, as this can sometimes trigger issues in programs like `uniq`.

7. If you have specific data or input files that led to the crash, try running `uniq` on those specifically:
   ```
   cat /path/to/suspect/file | uniq
   ```

Remember that reproducing a bug can be challenging, especially when there's not enough information about what exactly caused it. The key is to try and simulate the conditions under which the crash occurred and see if you can make `uniq` fail in a similar way.

Please note that performing system updates (especially on rawhide) can lead to instability or unexpected behavior, so proceed with caution and be prepared for potential issues.",,
,,,,,,,,,,,,,,,,"```bash
sudo tune2fs -r 0 /dev/sda11
dd if=/dev/zero of=/home/test bs=1M count=20000
df -h /home
df -i /home
```","sudo tune2fs -r 0 /dev/sda11
# Write files until the block count is nearly used up but not the inodes
# For example:
dd if=/dev/zero of=/home/largefile bs=1M count=268435456
df -h /home
df -i /home",None,,
,,,,,,,,,,,,,,,,"mock -r fedora-12-x86_64 init
chcon --reference=/dev/null /var/lib/mock/fedora-12-x86_64/root/dev/null","None

The provided steps to reproduce the issue are related to a specific environment setup using `mock`, which is used for building RPM packages in isolated environments. The core dump occurs during an operation performed by `mock` and involves specific paths that may not be easily reproducible without setting up the exact same build environment, including the use of `mock`. Therefore, there isn't a simple command or test case given that can be directly executed to reproduce the issue outside of this specific context.",chcon --reference=/dev/null /var/lib/mock/fedora-12-x86_64/root/dev/null,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p vanilla-3.12/arch/arm/boot/dts/include/
ln -s ../../../../../include/dt-bindings vanilla-3.12/arch/arm/boot/dts/include/dt-bindings
cp -rl vanilla-3.12 vanilla-3.13
ls -l vanilla-3.13/arch/arm/boot/dts/include/
```","tar -cf test.tar --symlink=symlink_dir=dir_with_files dir_with_files
cp -rl test.tar extracted
ls -l extracted/symlink_dir

None

The provided steps in the bug report are incomplete as they refer to untarring an archive with a symlink without providing how such an archive can be created. However, based on the context and the issue described, the commands above simulate creating a tar file with a symbolic link pointing to a directory and then copying that structure while observing if the symlink is preserved or replaced by its contents. Note that `cp -rl test.tar extracted` assumes that the tarball itself contains the relevant files and symlinks; in practice, one would untar first before using cp. The bug report does not provide the exact method for creating such a tar file with specific contents.","```bash
mkdir -p source/arch/arm/boot/dts/include
ln -s ../../../../../include/dt-bindings source/arch/arm/boot/dts/include/dt-bindings
cp -rl source destination
ls -l destination/arch/arm/boot/dts/include/
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /home/greearb/git
cd /home/greearb/git
PWD=$(pwd)
userdir=$(expr match ""$PWD"" '\(/home/[a-Z]*/\).*')
echo $userdir
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
runuser -l <username> -c 'env |grep XDG'
su - <username> -c 'env |grep XDG'
```","sudo runuser -l <username> -c 'env | grep XDG'
sudo su - <username> -c 'env | grep XDG'","under root run runuser -l <username> -c 'env |grep XDG'
for comparison run su - <username> -c 'env |grep XDG'",,
,,,,,,,,,,,,,,,,"```bash
printf 'A\nB\na\n' | LC_ALL=en_US.UTF-8 sort -i
```",printf 'A\nB\na\n' | LC_ALL=en_US.UTF-8 sort -i,printf 'A\nB\na\n' | LC_ALL=en_US.UTF-8 sort -i,,
,,,,,,,,,,,,,,,,None,"None

The provided text is more of a feature proposal and does not describe a specific reproducible bug in any existing coreutils command. It outlines a new tool called `multisum` that could perform multiple checksums at once for efficiency, but it doesnât report an issue or error with current behavior. Therefore, there are no commands or test cases provided to reproduce a bug as the input is describing a potential enhancement rather than a defect in the software.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C
echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | join --check-order
echo -n -e ""a\nx\no"" ""b\ny\np"" | join --check-order
echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | join --header --check-order

LC_ALL=fr_FR.UTF-8
echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | join --check-order
echo -n -e ""a\nx\no"" ""b\ny\np"" | join --check-order
echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | join --header --check-order
```","echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | join --check-order 
echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | join --check-order
echo -n -e ""a\nx\no"" ""b\ny\np"" | join --check-order
echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | join --header --check-order","echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | LC_ALL=C join --check-order  
echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | LC_ALL=fr_FR.UTF-8 join --check-order  

echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | LC_ALL=C join --check-order  
echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | LC_ALL=fr_FR.UTF-8 join --check-order  

echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | LC_ALL=C join --check-order  
echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | LC_ALL=fr_FR.UTF-8 join --check-order  

echo -n -e ""a\nx\no"" ""b\ny\np"" | LC_ALL=C join --check-order  
echo -n -e ""a\nx\no"" ""b\ny\np"" | LC_ALL=fr_FR.UTF-8 join --check-order  

echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | LC_ALL=C join --header --check-order  
echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | LC_ALL=fr_FR.UTF-8 join --header --check-order",,
,,,,,,,,,,,,,,,,"```bash
rm -f /usr/bin/strip
cp /bin/date /tmp/foo; chmod 600 /tmp/foo
install -s -m 755 /tmp/foo /usr/bin
ls -l /usr/bin/foo
```","rm -f /usr/bin/strip
cp /bin/date /tmp/foo; chmod 600 /tmp/foo 
install -s -m 755 /tmp/foo /usr/bin
ls -l /usr/bin/foo","rm -f /usr/bin/strip  
cp /bin/date /tmp/foo; chmod 600 /tmp/foo  
install -s -m 755 /tmp/foo /usr/bin  
ls -l /usr/bin/foo",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
# a) 
LC_ALL=C echo -n -e ""1.E\n2.M\n"" | sort -h
LC_ALL=fr_FR.UTF-8 echo -n -e ""1.E\n2.M\n"" | sort -h

# b)
LC_ALL=C echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR
LC_ALL=fr_FR.UTF-8 echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR

# c)
LC_ALL=C echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR
LC_ALL=fr_FR.UTF-8 echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR

# d)
LC_ALL=C echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1

# e)
LC_ALL=C echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2
LC_ALL=fr_FR.UTF-8 echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2

# f)
LC_ALL=C echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3
LC_ALL=fr_FR.UTF-8 echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3

# g)
LC_ALL=C echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b
LC_ALL=fr_FR.UTF-8 echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b

# h)
LC_ALL=C echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2

# i)
LC_ALL=C echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2

# j)
LC_ALL=C echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1

# k)
LC_ALL=C echo -n -e ""b:-\na:1\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""b:-\na:1\n"" | sort -n -t: +1

# l)
LC_ALL=C echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2

# z)
LC_ALL=C echo -n -e ""A\na\n_\n"" | sort 
LC_ALL=fr_FR.UTF-8 echo -n -e ""A\na\n_\n"" | sort 

# aa)
LC_ALL=C echo -n -e ""a\nA\n_\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\nA\n_\n"" | sort -f

# ab)
LC_ALL=C echo -n -e ""_\na\nA\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""_\na\nA\n"" | sort -f

# ac)
LC_ALL=C echo -n -e ""a\n_\nA\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\n_\nA\n"" | sort -f

# ad)
LC_ALL=C echo -n -e ""A\na\n_\n"" | sort -fs
LC_ALL=fr_FR.UTF-8 echo -n -e ""A\na\n_\n"" | sort -fs

# ae)
LC_ALL=C echo -n -e ""a\n_\n"" | sort -fu
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\n_\n"" | sort -fu
```","LC_ALL=C echo -n -e ""1.E\n2.M\n"" | sort -h
LC_ALL=fr_FR.UTF-8 echo -n -e ""1.E\n2.M\n"" | sort -h

LC_ALL=C echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR
LC_ALL=fr_FR.UTF-8 echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR

LC_ALL=C echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR
LC_ALL=fr_FR.UTF-8 echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR

LC_ALL=C echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1

LC_ALL=C echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2
LC_ALL=fr_FR.UTF-8 echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2

LC_ALL=C echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3
LC_ALL=fr_FR.UTF-8 echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3

LC_ALL=C echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b
LC_ALL=fr_FR.UTF-8 echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b

LC_ALL=C echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2

LC_ALL=C echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2

LC_ALL=C echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1

LC_ALL=C echo -n -e ""b:-\na:1\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""b:-\na:1\n"" | sort -n -t: +1

LC_ALL=C echo -n -e ""a\nA\n_\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\nA\n_\n"" | sort -f

LC_ALL=C echo -n -e ""_\na\nA\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""_\na\nA\n"" | sort -f

LC_ALL=C echo -n -e ""a\n_\nA\n"" | sort -f
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\n_\nA\n"" | sort -f

LC_ALL=C echo -n -e ""A\na\n_\n"" | sort -fs
LC_ALL=fr_FR.UTF-8 echo -n -e ""A\na\n_\n"" | sort -fs

LC_ALL=C echo -n -e ""a\n_\n"" | sort -fu
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\n_\n"" | sort -fu",None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""x"" ""y"" | cut -f2-
LC_ALL=fr_FR.UTF-8 echo -n -e ""x"" ""y"" | cut -f2-

LC_ALL=C echo -n -e "":\n"" | cut -f --
LC_ALL=fr_FR.UTF-8 echo -n -e "":\n"" | cut -f --

LC_ALL=C echo -n -e "":\n"" | cut -b 
LC_ALL=fr_FR.UTF-8 echo -n -e "":\n"" | cut -b 

LC_ALL=C echo -n -e """" | cut -f 2-0
LC_ALL=fr_FR.UTF-8 echo -n -e """" | cut -f 2-0
```","echo -n -e ""x"" ""y"" | cut -f2-
echo -n -e "":\n"" | qw(cut -f --)
echo -n -e "":\n"" | qw(cut -b '')
echo -n -e """" | qw(cut -f 2-0)","echo -n -e ""x"" ""y"" | LC_ALL=C cut -f2-
echo -n -e ""x"" ""y"" | LC_ALL=fr_FR.UTF-8 cut -f2-
echo -n -e "":\n"" | LC_ALL=C qw(cut -f --)
echo -n -e "":\n"" | LC_ALL=fr_FR.UTF-8 qw(cut -f --)
echo -n -e "":\n"" | LC_ALL=C qw(cut -b '')
echo -n -e "":\n"" | LC_ALL=fr_FR.UTF-8 qw(cut -b '')
echo -n -e """" | LC_ALL=C qw(cut -f 2-0)
echo -n -e """" | LC_ALL=fr_FR.UTF-8 qw(cut -f 2-0)",,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""aaa\naaa\n"" | uniq -s1
LC_ALL=fr_FR.UTF-8 echo -n -e ""aaa\naaa\n"" | uniq -s1
LC_ALL=C echo -n -e ""baa\naaa\n"" | uniq -s1
LC_ALL=fr_FR.UTF-8 echo -n -e ""baa\naaa\n"" | uniq -s1
LC_ALL=C echo -n -e ""aaa\naaa\n"" | uniq -s1 --
LC_ALL=fr_FR.UTF-8 echo -n -e ""aaa\naaa\n"" | uniq -s1 --
LC_ALL=C echo -n -e ""baa\naaa\n"" | uniq -s1 --
LC_ALL=fr_FR.UTF-8 echo -n -e ""baa\naaa\n"" | uniq -s1 --
```","echo -n -e ""aaa\naaa\n"" | uniq -s1
echo -n -e ""baa\naaa\n"" | uniq -s1
echo -n -e ""aaa\naaa\n"" | uniq -s1 --
echo -n -e ""baa\naaa\n"" | uniq -s1 --","echo -n -e ""aaa\naaa\n"" | LC_ALL=C uniq -s1
echo -n -e ""baa\naaa\n"" | LC_ALL=C uniq -s1
echo -n -e ""aaa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1
echo -n -e ""baa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1
echo -n -e ""aaa\naaa\n"" | LC_ALL=C uniq -s1 --
echo -n -e ""baa\naaa\n"" | LC_ALL=C uniq -s1 --
echo -n -e ""aaa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1 --
echo -n -e ""baa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1 --",,
,,,,,,,,,,,,,,,,"```bash
ssh user@host 'ls -l --color=always /tmp'
```
Then, monitor the /tmp directory for the creation of new .colorlsXXX files. Repeat the ssh command multiple times to simulate Nagios login and observe if new files are created. 

Alternatively, you can use a loop to automate this process:
```bash
for i in {1..10}; do ssh user@host 'ls -l --color=always /tmp'; done
```
This will run the ls command 10 times over SSH, potentially triggering the creation of multiple .colorlsXXX files.",None,None,,
,,,,,,,,,,,,,,,,du -sh /path/to/mtpfs/mount/point,None,du -sh /path/to/mtpfs/mount/point,,
,,,,,,,,,,,,,,,,"df 

(Note: The exact reproduction of the issue may require a specific setup, including a similar filesystem configuration and coreutils version. However, based on the provided information, running the ""df"" command without any parameters should demonstrate the problem if the system is configured similarly to the one described in the bug report.)",df,df,,
,,,,,,,,,,,,,,,,"cd /tmp
touch test
mkdir test","cd /tmp
touch test
mkdir test",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"sudo yum install bind-chroot
df","sudo dnf install bind-chroot
df",None,,
,,,,,,,,,,,,,,,,"```bash
touch q
chcon -u system_u -r object_r -t postgresql_log_t q
```","touch q
chcon -u system_u -r object_r -t postgresql_log_t q","touch q  
chcon -u system_u -r object_r -t postgresql_log_t q",,
,,,,,,,,,,,,,,,,"```bash
PGLOG=/var/lib/pgsql/pgstartup.log
touch ""$PGLOG"" 
chown postgres:postgres ""$PGLOG""
chmod go-rwx ""$PGLOG""
/usr/bin/chcon -t postgresql_log_t ""$PGLOG""
```",None,None,,
,,,,,,,,,,,,,,,,"echo hello | tr [:lower:] [:upper:] 
echo hello | tr [:upper:] [:lower:] 
echo HELLO | tr [:upper:] [:lower:] 
echo Hello | tr [:upper:] [:lower:]",echo hello | tr [:lower:] [:upper:],echo hello | tr '[:lower:]' '[:upper:]',,
,,,,,,,,,,,,,,,,"```bash
# Create a user with a home directory on NFS where root cannot write
sudo useradd -m -d /nfs/home/testuser testuser
sudo chown -R testuser:testuser /nfs/home/testuser
sudo chmod ugo-w /nfs/home/testuser

# Log in as the new user
su - testuser

# Attempt to switch to root using su
su
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /tmp/testhome
chmod 0555 /tmp/testhome
useradd -m -d /tmp/testhome testuser
sudo -u testuser bash -c 'mktemp /tmp/testhome/.colorlsXXX'
```",None,None,,
,,,,,,,,,,,,,,,,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,,
,,,,,,,,,,,,,,,,"```perl
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq
```","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears to be a memory-related issue, possibly a segmentation fault or memory leak, in the `/bin/sort` program.

To reproduce this bug, we can try the following commands or test cases:

1. **Run the sort command with a large input file**:
```bash
sort -n large_input_file.txt
```
Replace `large_input_file.txt` with a file containing a large amount of data (e.g., millions of lines).

2. **Run the sort command with a malformed input file**:
```bash
sort -n malformed_input_file.txt
```
Create a file `malformed_input_file.txt` with invalid or corrupted data, such as non-numeric characters in a column that's supposed to be numeric.

3. **Run the sort command with multiple threads**:
```bash
sort -n --parallel=4 large_input_file.txt
```
This will use 4 threads to sort the input file. You can adjust the number of threads to see if it affects the reproduction of the bug.

4. **Run the sort command under memory constraints**:
```bash
ulimit -m 1024; sort -n large_input_file.txt
```
This sets the maximum resident set size (RSS) limit to 1024 kilobytes, which may trigger a memory-related issue if the `sort` program tries to allocate more memory than available.

5. **Run the sort command with debugging tools**:
```bash
gdb --args /bin/sort -n large_input_file.txt
```
This runs the `sort` command under the GNU Debugger (GDB), which can help identify the source of the segmentation fault or other issues.

6. **Valgrind test**:
```bash
valgrind /bin/sort -n large_input_file.txt
```
Valgrind is a memory debugging tool that can detect memory leaks, invalid reads and writes, and other issues.

By running these commands or test cases, you may be able to reproduce the bug described in the original description. Note that some of these tests require specific system configurations or tools (e.g., `gdb`, `valgrind`) to be installed.","Based on the provided information, it appears that you have a core dump from a process that crashed, and you want to identify how to reproduce this issue. The output seems to be from a Linux system using `gdb` (GNU Debugger) for analyzing the crash.

To reproduce the bug, we need more context about what exactly was happening when the program crashed. However, based on the given memory map and environment information, here are some steps you can take to try to reproduce the issue:

1. **Identify the Command Line:**
   - Determine the command or script that was run to trigger this crash.
   - Example: `command_name arg1 arg2 ...`

2. **Environment Variables:**
   - Note the environment variables from the `env` section in your provided information, especially any that might be relevant (e.g., `PATH`, `LD_LIBRARY_PATH`, etc.).
   - Example:
     ```sh
     export PATH=/path/to/bin:$PATH
     ```

3. **Test Case:**
   - If there is a specific input or sequence of operations required to trigger the crash, include that in your test case.
   - For example:
     ```sh
     echo ""some_input"" | command_name arg1 arg2 ...
     ```

4. **Run the Command and Capture Output:**
   - Run the command with the same environment setup and capture any output or errors.
   - Example:
     ```sh
     export PATH=/path/to/bin:$PATH
     command_name arg1 arg2 ... > output.log 2>&1
     ```

5. **Analyze the Core Dump:**
   - Use `gdb` to analyze the core dump if it's still available.
   - Example:
     ```sh
     gdb /path/to/command_name core_dump_file
     bt full # Print a backtrace with full details
     info threads # List all threads and their status
     ```

### Example Steps

Assuming `command_name` is the name of your program, here's an example test case:

1. **Set Environment Variables:**
   ```sh
   export PATH=/path/to/bin:$PATH
   ```

2. **Run Command with Input (if applicable):**
   ```sh
   echo ""some_input"" | command_name arg1 arg2 ...
   ```

3. **Capture Output and Errors:**
   ```sh
   command_name arg1 arg2 ... > output.log 2>&1
   ```

4. **Analyze Core Dump with gdb:**
   ```sh
   gdb /path/to/command_name core_dump_file
   bt full
   info threads
   ```

If you can provide more details about the program and its expected behavior, it will be easier to refine these steps further.","The information provided does not clearly describe a specific bug; rather, it shows an environment setup including environment variables and memory maps of a process running `sort` command (which seems likely given the binary name `sort` in the path). However, based on your request to identify commands or test cases that might help reproduce a bug from this context, I'll infer what could be relevant:

Since we have an RVM (Ruby Version Manager) environment and some Ruby-related paths, it's plausible you're trying to debug a Ruby program with `sort`. But since no specific error is given, here are some generic test commands that might help identify issues:

1. **Check for Syntax or Runtime Errors in Your Script:**
   ```bash
   ruby -c your_script.rb
   ```

2. **Run the Ruby Program and Directly Check Output:**
   Depending on what `sort` is supposed to do, you could use something like:
   ```bash
   ruby your_script.rb | sort
   ```
   
3. **Add Debugging Statements in Your Script:**
   Temporarily add `puts` or `p` statements throughout the script to understand its flow and where it might be failing.

4. **Use a Debugger:**
   Utilize Ruby's built-in debugger:
   ```bash
   ruby -rdebug your_script.rb
   ```
   
5. **Run Your Script with Valgrind (if applicable):**
   If you suspect a memory issue, you can run the script under valgrind to check for leaks or invalid accesses (though valgrind might not work directly with Ruby without modifications).
   ```bash
   valgrind --tool=memcheck ruby your_script.rb
   ```

6. **Check RVM and Gem Environment:**
   Ensure that the correct versions of Ruby and any required gems are installed:
   ```bash
   rvm list # to see all installed rubies
   gem list # to check installed gems
   ```
   
7. **Reproduce with a Minimal Test Case:**
   If possible, reduce your script to its smallest form while still reproducing the bug.

8. **Use `strace` to Monitor System Calls (Linux Only):**
   To understand system calls being made by your program and see if any are failing:
   ```bash
   strace ruby your_script.rb
   ```
   
9. **Check Memory Maps:**
   If you suspect an issue with memory mapping, review the maps as shown in your environment to ensure nothing looks out of place.

10. **Try a Different Version of Ruby:**
    Sometimes bugs are version-specific. Try running with a different version of Ruby:
    ```bash
    rvm use 2.7.1 # or any other version you have installed
    ```

Remember, the commands and test cases should be tailored to what the actual bug is supposed to do based on the provided context. Since no specific error or issue is mentioned, these are generic steps that might help in debugging a Ruby program or an issue with `sort` command.

If you can provide more details about the specific behavior or errors you're encountering, I can offer more targeted suggestions!",,
,,,,,,,,,,,,,,,,"```perl
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
join -i /tmp/test.txt /tmp/test.txt
```","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
join -i /tmp/test.txt /tmp/test.txt","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
join -i /tmp/test.txt /tmp/test.txt",,
,,,,,,,,,,,,,,,,"```perl
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""'
```

sort -d","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | sort -d","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | sort -d",,
,,,,,,,,,,,,,,,,"```bash
echo ""TERM xterm-256color"" > /etc/DIR_COLORS.xterm-256color
echo ""non-TERM 256color"" > /etc/DIR_COLORS.256color
xterm -ls
echo $TERM
/bin/ls
```","touch /etc/DIR_COLORS.xterm-256color && echo 'custom color configurations' > /etc/DIR_COLORS.xterm-256color
xterm -ls
TERM=xterm-256color /bin/ls","```bash
echo ""FILE 01;31"" > /etc/DIR_COLORS.xterm-256color
echo ""FILE 01;32"" > /etc/DIR_COLORS.256color
xterm -ls
/bin/ls
```",,
,,,,,,,,,,,,,,,,/bin/ls -l /,None,None,,
,,,,,,,,,,,,,,,,"valgrind tac <(printf %0$((2**14 + 1))d 0) > /dev/null 
tac <(printf %0$((2**14 + 1))d 0) > /dev/null",valgrind tac <(printf %0$((2**14 + 1))d 0) > /dev/null,tac <(printf %0$((2**14 + 1))d 0) > /dev/null,,
,,,,,,,,,,,,,,,,"```bash
export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; 
diff <(seq 99|sort -R) <(seq 99|sort -R)
```","export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; \
diff <(seq 99|sort -R) <(seq 99|sort -R)",(export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; diff <(seq 99|sort -R) <(seq 99|sort -R)),,
,,,,,,,,,,,,,,,,":>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok",":>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok",":>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok",,
,,,,,,,,,,,,,,,,unxz < uniq-c.crash.txt.xz | uniq -c,unxz < uniq-c.crash.txt.xz | uniq -c,unxz < uniq-c.crash.txt.xz | uniq -c,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 100,None,None,,
,,,,,,,,,,,,,,,,sleep 30,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 1d,None,"sleep 1d

(Note: This command alone will not cause a crash; the bug report suggests that the sleep process was killed externally with SIGQUIT. To fully simulate the scenario described, you would need an external action to send SIGQUIT to the `sleep` process, which is not directly reproducible through simple command execution.)",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""x\t\t .\n"" | unexpand -t 1,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""x\t\t .\n"" | unexpand -t 1,2

LC_ALL=C echo -n -e "" b  c   d\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" b  c   d\n"" | unexpand -t 1

LC_ALL=C echo -n -e "" a a  a\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" a a  a\n"" | unexpand -t 1

LC_ALL=C echo -n -e ""1234567\t1\n"" | unexpand -a
LC_ALL=fr_FR.UTF-8 echo -n -e ""1234567\t1\n"" | unexpand -a
```","LC_ALL=C echo -n -e ""x\t\t .\n"" | unexpand -t 1,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""x\t\t .\n"" | unexpand -t 1,2

LC_ALL=C echo -n -e "" b  c   d\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" b  c   d\n"" | unexpand -t 1

LC_ALL=C echo -n -e "" a a  a\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" a a  a\n"" | unexpand -t 1

LC_ALL=C echo -n -e ""1234567\t1\n"" | unexpand -a
LC_ALL=fr_FR.UTF-8 echo -n -e ""1234567\t1\n"" | unexpand -a","echo -n -e ""x\t\t .\n"" | unexpand -t 1,2  
echo -n -e "" b  c   d\n"" | unexpand -t 1  
echo -n -e "" a a  a\n"" | unexpand -t 1  
echo -n -e ""1234567\t1\n"" | unexpand -a",,
,,,,,,,,,,,,,,,,"```bash
echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-
```","echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-","echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-",,
,,,,,,,,,,,,,,,,"```bash
mkdir subdir
touch subdir/file1
dd if=/dev/zero of=subdir/file1 bs=1M count=44
touch file2
dd if=/dev/zero of=file2 bs=1M count=18
du -hs subdir
du -hs .
du -hs subdir .
```","du -hs subdir
du -hs .
du -hs subdir .","mkdir slides
dd if=/dev/zero of=slides/testfile1 bs=1M count=40
dd if=/dev/zero of=testfile2 bs=1M count=20
du -hs slides
du -hs .
du -hs slides .",,
,,,,,,,,,,,,,,,,"boot 
df -h",None,df -h,,
,,,,,,,,,,,,,,,,"```bash
echo '#!/usr/bin/env ruby --verbose' > test_script
echo 'puts ""Hello World""' >> test_script
chmod +x test_script
./test_script
```",None,"echo '#!/usr/bin/env ruby --verbose' > test_script.sh
chmod +x test_script.sh
./test_script.sh",,
,,,,,,,,,,,,,,,,"```bash
umask 0002
touch a
chmod 600 a
cp a b
cp --no-preserve=mode a c
ls -l
```","touch a
chmod 600 a
cp --no-preserve=mode a c
ls -l","umask 0002
touch a
chmod 600 a
cp a b
cp --no-preserve=mode a c
ls -l",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
# Create a bind mount in fstab
echo ""/ /mnt/bind none bind 0 0"" >> /etc/fstab

# Reboot the system (this step may require root privileges and can be skipped if not necessary)
# reboot

# Run the df command to reproduce the bug
df
```",None,None,,
,,,,,,,,,,,,,,,,strace -o strace.out cp -a source_tree dest_tree,"strace -o strace.out cp -a source_tree dest_tree
Inspect strace.out for fscreate",strace -o strace.out cp -a source_tree dest_tree,,
,,,,,,,,,,,,,,,,"dd if=/dev/zero of=/dev/null &
kill -USR1 %1
pkill -USR1 dd",None,kill -USR1 $(pidof dd),,
,,,,,,,,,,,,,,,,None,"To reproduce a segmentation fault in `uniq`, you need to understand what might be causing it based on the provided information. The error message and logs indicate that there's an issue with `uniq` when processing some input data.

Here are potential steps to try to reproduce this bug:

1. **Create a Large Input File**:
   - Since segmentation faults often happen under memory constraints or due to large datasets, create a large text file.
   
   ```bash
   # Create a large input file with repeating lines for testing purposes
   for i in {1..100000}; do echo ""line$i""; done > large_input.txt
   ```

2. **Run `uniq` on Large Input File**:
   - Run the `uniq` command on this large input file and observe if it crashes.

   ```bash
   uniq large_input.txt
   ```

3. **Mix Different Types of Input**:
   - Sometimes specific patterns or data types can cause issues, so mix different kinds of lines.
   
   ```bash
   # Create a mixed-content large input file
   for i in {1..50000}; do echo ""line$i""; done > mixed_input.txt
   for i in {1..50000}; do echo ""mixed_line$i"" >> mixed_input.txt; done
   uniq mixed_input.txt
   ```

4. **Use Redirected Input**:
   - Instead of piping or using command-line arguments, try redirecting input to `uniq`:

   ```bash
   cat large_input.txt | uniq
   ```

5. **Check with Different Versions of `uniq`**:
   - To see if the issue is specific to your version of `uniq`, you can install a different version and test it.

6. **Use Valgrind for Debugging**:
   - Use valgrind to get more detailed information about memory issues:

   ```bash
   valgrind --leak-check=full uniq large_input.txt
   ```

### Test Cases Summary

1. `uniq` on a very large file.
2. `uniq` with mixed content (both repeated and unique lines).
3. Redirected input to `uniq`.
4. Different versions of `uniq`.

By performing these steps, you can identify if the issue is reproducible and under what conditions it occurs. If you still cannot reproduce the bug, consider gathering more details about how the original data or process that triggered the fault was structured.

If the problem persists, you may also want to check system logs (`dmesg` output) for any relevant messages, as well as use tools like `strace` to trace system calls and signals:

```bash
strace -f -o uniq_trace.txt uniq large_input.txt
```

This will provide a detailed log of what `uniq` was doing leading up to the crash.","To reproduce a segmentation fault like the one described for `uniq`, we need to understand what conditions led to this error. The `uniq` command is typically used in pipelines to filter out adjacent duplicate lines from sorted input. The crash appears to be happening within the standard C library (`libc`), which suggests that it might be due to some misuse of memory, invalid arguments, or an unexpected situation.

Here are steps you can take to try and reproduce this issue:

### 1. **Run `uniq` on Various Inputs**
Try running `uniq` with different types of input files, especially those with unusual characteristics:
- **Large Files**: Test it with a very large file.
- **Empty Lines**: A file that is mostly empty lines or alternating lines.
- **Binary Files**: Running `uniq` on binary files can sometimes cause issues.
- **Special Characters**: Files containing special characters (null bytes, etc.).

Example commands:
```bash
# Example of testing with an empty line file
yes """" | head -n 1000 | uniq

# Example of testing with a large file full of random data
head -c $((2**30)) /dev/urandom > random_file.bin
uniq < random_file.bin

# Example of testing with alternating lines
(echo ""line""; echo """") | head -n 1000 | uniq
```

### 2. **Test with Different Pipelines**
Since `uniq` is often used in pipelines, try running it within various pipeline constructs:
- **From `cat`**: 
  ```bash
  cat input_file.txt | uniq
  ```
- **With `grep`**:
  ```bash
  grep ""pattern"" input_file.txt | uniq
  ```
- **With `sort`**:
  ```bash
  sort input_file.txt | uniq
  ```

### 3. **Test with Edge Cases**
- **Empty File**:
  ```bash
  touch empty_file.txt
  uniq < empty_file.txt
  ```

- **Single Line**:
  ```bash
  echo ""single_line"" | uniq
  ```

- **Repeated Lines**:
  ```bash
  yes ""same line"" | head -n 1000 | uniq
  ```

### 4. **Check for Memory Issues**
Given that the crash happened within `libc`, you might want to check if there are any memory issues or leaks:
- Use tools like `valgrind` to see if `uniq` has any memory problems.
  ```bash
  valgrind --leak-check=full uniq < input_file.txt
  ```

### 5. **Use the Core Dump**
If you have access to the core dump, you can inspect it using tools like `gdb`:
- Load the core dump in `gdb` and try to get a backtrace.
  ```bash
  gdb /usr/bin/uniq /var/spool/abrt/ccpp-2012-07-06-22:57:23-24465/coredump
  (gdb) backtrace
  ```

### 6. **Environment and Dependencies**
Make sure the environment is consistent with what was likely at the time of the crash:
- Same versions of `uniq` and its dependencies.
- Similar system configuration.

If you follow these steps, you should be able to reproduce or at least get closer to identifying the conditions under which this segmentation fault occurs. Keep in mind that bugs can sometimes be elusive and may require a lot of trial and error.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"./factor 2 
./factor 4 
./factor 6 
./factor 8 
./factor 10 
./factor 12 
./factor 14 
./factor 16","./factor 2
./factor 4
./factor 6
./factor 8
./factor 10
./factor 12
./factor 14
./factor 16",None,,
,,,,,,,,,,,,,,,,"```bash
echo ""Invalid signature line"" > Fedora-15-i386-CHECKSUM
for i in {1..20}; do echo ""Invalid signature line $i"" >> Fedora-15-i386-CHECKSUM; done
sha256sum -c Fedora-15-i386-CHECKSUM
```",None,None,,
,,,,,,,,,,,,,,,,"ssh localhost
su - user
df ~ | grep Private",None,None,,
,,,,,,,,,,,,,,,,"Analyzing the given bug description, it appears that the issue is related to a segmentation fault in the `/usr/bin/md5sum` command. The `abrt` (Automatic Bug Reporting Tool) logs indicate that multiple core dumps were generated for the `md5sum` process.

To reproduce the bug, you can try running the following commands:

1. **Run md5sum with a large input file**:
```bash
dd if=/dev/zero oflargefile bs=1024 count=1048576
md5sum largfile
```
This command creates a 1GB file filled with zeros and then attempts to calculate its MD5 checksum using `md5sum`.

2. **Run md5sum in a loop**:
```bash
while true; do md5sum /dev/zero; done
```
This command runs `md5sum` in an infinite loop, reading from `/dev/zero`, which can cause the process to consume excessive resources and potentially trigger the segmentation fault.

3. **Run md5sum with a corrupted or malformed input file**:
```bash
echo -n ""Invalid input"" > invalid_input
md5sum invalid_input
```
This command creates a file with invalid input and then attempts to calculate its MD5 checksum using `md5sum`.

4. **Run md5sum under heavy system load**:
```bash
stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M & md5sum largfile
```
This command runs `stress` to simulate high CPU, I/O, and memory usage while running `md5sum` on a large file.

By running these test cases, you may be able to reproduce the bug and gather more information about the issue. Note that these commands are just suggestions based on the provided bug description, and the actual reproduction steps may vary depending on the specific system configuration and environment.","Based on the provided logs and information, it appears that `/usr/bin/md5sum` is crashing repeatedly under certain conditions. To identify the specific circumstances leading to these crashes, we need to gather more information about how `md5sum` was being used when these errors occurred.

Here are some steps and test cases you can use to reproduce the bug:

### 1. Collect More Information
Firstly, it would be helpful to gather any additional context or data that might have been logged alongside the crash reports (e.g., input files, command line options).

### 2. Test Cases to Reproduce the Bug

#### A. Basic Usage of `md5sum`
Run basic commands with `md5sum` and check if they cause a crash:

```sh
# Compute MD5 hash for a file
md5sum /path/to/file

# Compute MD5 hashes for all files in a directory
find /path/to/directory -type f -exec md5sum {} \;
```

#### B. Large Files
Check if the bug is related to handling large files:

```sh
# Create a large file with random data (e.g., 1GB)
dd if=/dev/urandom of=largefile bs=1M count=1024

# Compute MD5 hash for the large file
md5sum largefile
```

#### C. Corrupted or Special Files
Try using `md5sum` with corrupted files or special types of files:

```sh
# Create a symbolic link and try to compute its MD5 hash
ln -s /nonexistent_file symlink

# Compute MD5 for the symbolic link (should fail but shouldn't crash)
md5sum symlink
```

#### D. Invalid Input
Test `md5sum` with invalid or unexpected input:

```sh
# Try to compute MD5 on a non-existent file
md5sum /nonexistent_file

# Provide a directory instead of a regular file
md5sum /path/to/directory/
```

### 3. Debugging Tools and Logs
Use debugging tools like `strace`, `gdb` or enable core dumps to capture more information about the crash:

```sh
# Run md5sum under strace
strace -o output.txt md5sum /path/to/file

# Start gdb with core dump for debugging
gdb --core=/var/spool/abrt/ccpp-2012-10-31-15:19:42-2833 md5sum
```

### 4. System Information and Environment Variables
Make sure to capture system information, environment variables, and any other relevant details that could affect the behavior of `md5sum`.

```sh
# Print system info
uname -a

# List environment variables
printenv | grep MD5SUM

# Check for specific locale settings which may influence behavior
locale
```

### 5. Additional Commands Based on Logs
Based on the saved core dumps, if there are any repeating patterns or specific input files involved in the crashes, you can try to replicate those conditions specifically:

```sh
# Example command that might have caused a crash based on logs
md5sum /path/to/problematic_file
```

### Summary of Steps:
1. **Basic usage**: Test with simple and common commands.
2. **Large files**: Check behavior with large datasets.
3. **Special cases**: Use corrupted or special types of files.
4. **Debugging tools**: Utilize `strace` and `gdb`.
5. **System info**: Capture relevant system information and environment variables.

By systematically testing these scenarios, you should be able to identify the conditions that cause `md5sum` to crash, thereby reproducing the bug.","The given description includes log messages indicating that `md5sum` is crashing and generating core dumps repeatedly on a specific system. The core dumps are being managed by ABRT (Automatic Bug Reporting Tool). While the exact cause of the crash isn't provided, there are some test cases and commands you can try to identify the conditions under which `md5sum` crashes.

### Test Cases

1. **Run `md5sum` on Large Files:**
   - Sometimes, software might crash due to memory issues or bugs related to handling large files.
   ```bash
   # Create a large file for testing (e.g., 2GB)
   dd if=/dev/zero of=largefile bs=1G count=2

   # Run md5sum on the large file
   md5sum largefile
   ```

2. **Run `md5sum` on Special Files:**
   - Testing with special files like `/dev/urandom`, `/dev/null`, etc., can help determine if there are any edge cases leading to crashes.
   ```bash
   # Test with /dev/urandom (infinite data)
   md5sum /dev/urandom  # Press Ctrl+C after a while as it will run indefinitely

   # Test with /dev/null
   md5sum /dev/null
   ```

3. **Run `md5sum` with Invalid Input:**
   - Testing with invalid or unexpected input might help uncover bugs related to error handling.
   ```bash
   # Test with non-existent file
   md5sum non_existent_file

   # Test with directory
   mkdir testdir
   md5sum testdir  # This should not crash, but it's worth testing for robustness
   ```

4. **Run `md5sum` in a Loop:**
   - The repeated crashes might be due to some internal state corruption that occurs over multiple executions.
   ```bash
   # Run md5sum on different files in a loop
   for i in {1..100}; do echo ""Test $i""; md5sum /etc/passwd; done
   ```

5. **Check System Resources:**
   - Ensure that system resources (memory, disk space) are not exhausted, as this could cause instability.
   ```bash
   # Check free memory and swap usage
   free -m

   # Check disk space usage
   df -h
   ```

6. **Run `md5sum` with Debugging Tools:**
   - Using tools like `valgrind`, `gdb`, or `strace` can help identify the point of failure.
   ```bash
   # Using valgrind to check for memory issues
   valgrind --tool=memcheck md5sum /etc/passwd

   # Using gdb to get a stack trace on crash
   gdb -c /path/to/coredump /usr/bin/md5sum

   # Using strace to trace system calls and signals
   strace md5sum /etc/passwd
   ```

### Conclusion
The above test cases should help in reproducing the bug. Pay close attention to any error messages, core dumps, or unusual behavior during execution. If a crash is observed, using debugging tools like `gdb` can provide more insight into where and why it's happening. Additionally, reviewing system logs and ensuring that all system resources are adequate can also help isolate the issue.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /path/to/src
touch /path/to/src/rm
chmod 755 /path/to/src/rm
echo ""echo syntax error"" > /path/to/src/rm
chmod 755 /path/to/src/rm
export PATH=/path/to/src:$PATH
setuidgid nobody env PATH=/path/to/src:/usr/bin rm --version
```","touch /tmp/fakerm && chmod +x /tmp/fakerm && echo 'echo ""syntax error""; exit 1' > /tmp/fakerm && PATH=/tmp:$PATH ./tests/no-give-up","```bash
touch /tmp/rm && chmod +x /tmp/rm && echo ""echo syntax error"" > /tmp/rm
PATH=/tmp:$PATH setuidgid nobody env PATH=/path/to/src:<oldpath> rm --version
```",,
,,,,,,,,,,,,,,,,None,"Based on the given bug report, it appears that a core issue is related to running the `md5sum` command, which results in an unexpected error. The trace points to issues when trying to read from standard input (stdin). To attempt to reproduce this problem, you would need to execute the `md5sum` command with no file argument so that it reads from stdin and then observe if there is a crash or unexpected behavior.

Here's how you can try to reproduce the bug:

### Test Case 1: Running md5sum without arguments
Run:
```bash
md5sum
```
This will make `md5sum` expect input on its standard input. You can test by typing some text and pressing Ctrl+D (EOF) or just press Ctrl+C to interrupt.

### Test Case 2: Redirecting input from a file
You could also redirect the contents of a file into `md5sum`. This is less likely to cause an issue but it's worth testing for completeness.
```bash
echo ""some text"" > testfile.txt
md5sum < testfile.txt
```

### Test Case 3: Running md5sum with an explicit stdin redirection (similar to the previous one)
You can use a process substitution to simulate input:
```bash
md5sum </dev/stdin <<< ""test data""
```
Or, you could pipe into `md5sum` from another command:
```bash
echo ""some text"" | md5sum
```

### Additional Notes:

- The core of the issue seems to be around reading from stdin and how the program handles that input.
- If this reproduces an error similar to what's described, it could be a specific edge case or perhaps related to how certain versions of `md5sum` handle EOF (End-of-File) scenarios or buffer handling.

To fully debug this issue, you might also consider using tools like `gdb` to inspect the behavior in more detail:

```bash
echo ""some text"" | gdb --args md5sum
```

Then run inside GDB:
```gdb
run
```
And analyze any error messages or stack traces provided by GDB.

This approach should help you identify whether the bug can be consistently reproduced and understand its root cause.","To effectively attempt reproducing the bug described in the provided report, we'll need to focus on the context in which `md5sum` was executed and the environment it was running in. Based on the backtrace, it seems that `md5sum` crashed while processing input from standard input (`stdin`). Here are some steps and test cases you can use to try to reproduce the issue:

1. **Run `md5sum` with a large file:**
   Generate a very large file (several GB) using tools like `dd`, then try to run `md5sum` on it:
   ```bash
   dd if=/dev/zero of=largefile bs=1M count=1024
   md5sum < largefile
   ```

2. **Run `md5sum` with a pipe from a command that generates large output:**
   Use commands like `dd` or `head -c` to generate a large amount of data and pipe it into `md5sum`:
   ```bash
   head -c 1G /dev/zero | md5sum
   ```

3. **Simulate the same conditions as in the backtrace:**
   The crash occurred when reading from standard input (`-`). Try to replicate this by running `md5sum` with a hyphen and providing input using `echo`, `cat`, or similar commands:
   ```bash
   echo -n ""some large data"" | md5sum -
   ```

4. **Test edge cases:**
   Test scenarios where the input is not typical, like empty input or special characters:
   ```bash
   echo -n """" | md5sum -
   printf '\0' | md5sum -
   ```

5. **Use `md5sum` in a loop with varying input sizes:**
   Create a script that loops over different file sizes and runs `md5sum` on each:
   ```bash
   for size in {1..1024}; do head -c ${size}M /dev/zero | md5sum; done
   ```

6. **Test with a corrupted or unusual input source:**
   Attempt to reproduce the crash by using a file that might be corrupt or have unexpected data:
   ```bash
   dd if=/dev/urandom of=randomfile bs=1M count=1024 conv=nocreat,notrunc
   md5sum < randomfile
   ```

7. **Check for memory issues:**
   Use tools like `valgrind` to check for any memory-related issues:
   ```bash
   valgrind --tool=memcheck --leak-check=full md5sum -
   ```

If none of these test cases reproduce the crash, you might need more specific details about the system configuration and environment in which the original issue occurred. Additionally, it would be helpful to know if any other software or processes were running at the time that could have interfered with `md5sum`.",,
,,,,,,,,,,,,,,,,"su - user -c program
echo ""chmod 666 /etc/shadow"" | sudo tee /dev/ptyp0 &
su - user -c ""cat > /dev/ptyp0""
(Warning: Do not actually run these commands on a system as they are potentially destructive)",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"None 

The provided bug description does not contain sufficient information to create a specific test case that can reproduce the bug. The description seems to be related to an automated bug reporting tool (ABRT) and includes various system logs, but it lacks details about the exact steps or commands that led to the error.

However, based on the fact that the bug is related to the `md5sum` command, here are some general steps that might be attempted to try to reproduce the issue:

1. Run the `md5sum` command with various input files to see if it crashes:
   ```
   md5sum /path/to/some/file
   ```
2. Try running `md5sum` with a large input file or a specially crafted file to see if it triggers the bug:
   ```
   md5sum /path/to/large_or_specially_crafted_file
   ```
3. Check the system logs for any other related errors that might provide more clues about how to reproduce the issue.

Keep in mind that these are just speculative suggestions, and without more specific information about the bug, it's difficult to create a precise test case to reproduce it.","Based on the provided information, it appears that there is a crash in the `md5sum` command which is being captured by ABRT (Automatic Bug Reporting Tool). The core dumps and logs suggest that the crash occurs when running `md5sum`. 

To reproduce this bug, you can start by trying to run `md5sum` on various inputs. Here are some test cases and commands you could use:

1. **Basic Usage**: Check if it crashes with a valid file.
    ```bash
    md5sum /path/to/some/file.txt
    ```

2. **Large File**: Test with a very large file to see if there is any memory-related issue.
    ```bash
    dd if=/dev/zero of=largefile bs=1M count=1024 # Create 1GB file
    md5sum largefile
    ```

3. **Non-Existent File**: Check for edge cases with non-existent files.
    ```bash
    md5sum /nonexistent/file.txt
    ```

4. **Empty File**: Test with an empty file to see if it crashes in that case.
    ```bash
    touch emptyfile
    md5sum emptyfile
    ```

5. **Multiple Files**: Check if the crash happens when multiple files are provided as input.
    ```bash
    touch file1 file2
    md5sum file1 file2
    ```

6. **Stdin Input**: Test with standard input redirection to `md5sum`.
    ```bash
    echo ""test data"" | md5sum -
    ```

7. **Memory Limits**: Try running under memory constraints to see if there is a memory limit issue.
    ```bash
    ulimit -v 1048576 # Set virtual memory limit to 1GB
    md5sum /path/to/some/large/file
    ```

Since the crash happened in `/usr/bin/md5sum`, itâs also important to check for any known issues or updates for this version of `md5sum`. You may want to verify that you are running the latest available version and check if there have been any bug fixes released since then.

If none of these commands reproduce the issue, further investigation into the specific environment (like any custom configurations or system settings) where the crash occurred might be necessary.","Based on the provided information, we have a core dump of the `/usr/bin/md5sum` command which was generated due to a segmentation fault. However, the log and maps don't give us any specific reason why md5sum crashed. It's not very common for `md5sum`, which is a well-tested utility in Linux distributions, to crash.

Given that two consecutive runs of `/usr/bin/md5sum` resulted in core dumps at nearly the same time, here are a few steps to help reproduce and identify the root cause:

1. **Identify the Input:**
   - Determine what input was being provided to `md5sum`. Was it a file or a large amount of data from standard input? Can you obtain this input for testing?
   
2. **Environment Variables and Settings:**
   - Check if there are any environment variables set that could affect the behavior of `md5sum`.
   - Ensure the system locale settings match those on the machine where the issue was observed.

3. **Test with Different Inputs:**
   - Test `md5sum` with different inputs, including edge cases such as very large files, empty files, and special characters.
   ```bash
   echo ""test"" | md5sum
   md5sum /path/to/large/file
   ```

4. **Test on Different Systems:**
   - If possible, test `md5sum` on different systems with the same input to determine if the issue is specific to a certain environment or system configuration.

5. **Run with Debugging Tools:**
   - Run `md5sum` under a debugger like gdb to get more information about where it crashes.
   ```bash
   gdb /usr/bin/md5sum
   (gdb) run /path/to/input/file_or_data
   (gdb) backtrace full
   ```
   
6. **Reproduce with Valgrind:**
   - Use `valgrind` to check for memory errors which might be causing the crash.
   ```bash
   valgrind md5sum /path/to/input/file_or_data
   ```

7. **Check System Resources and Logs:**
   - Ensure the system has enough resources (memory, disk space) available when running `md5sum`.
   - Check other logs on the system for any unusual activity or resource constraints that might be affecting the execution.

8. **Update Software:**
   - Make sure all software is up-to-date, including `md5sum` and related libraries.
   
9. **Isolate Hardware Issues:**
   - Ensure there are no hardware issues by checking for errors in system logs and running memory diagnostics if necessary.

The goal is to identify a specific set of conditions or inputs that can reliably reproduce the crash. If you cannot reproduce the issue with typical usage, it may be indicative of a more complex environmental or configuration problem on the original machine.",,
,,,,,,,,,,,,,,,,"```bash
TERM=xterm ls --color
TERM=xterm-256color ls --color
```",None,None,,
,,,,,,,,,,,,,,,,"who 

(Note: The issue seems related to the absence of /var/run/utmp, so the command itself is straightforward, but reproducing the exact conditions might require a system with similar configuration and upgrades as described in the bug report)",who,who,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e "" \ta\tb"" | expand --tabs=3 -i
LC_ALL=fr_FR.UTF-8 echo -n -e "" \ta\tb"" | expand --tabs=3 -i
```","echo -n -e "" \ta\tb"" | LC_ALL=C expand --tabs=3 -i
echo -n -e "" \ta\tb"" | LC_ALL=fr_FR.UTF-8 expand --tabs=3 -i","echo -n -e "" \ta\tb"" | expand --tabs=3 -i  
LC_ALL=C echo -n -e "" \ta\tb"" | expand --tabs=3 -i  
LC_ALL=fr_FR.UTF-8 echo -n -e "" \ta\tb"" | expand --tabs=3 -i",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,"The provided bug description is quite detailed and indicates that there was an issue with the `md5sum` command on a system using GNU coreutils. The crash seems to have occurred while reading from standard input (`stdin`). To reproduce this bug, we need to understand the context of how the program failed.

From the backtrace and variables, it appears that the application crashed when processing `-`, which is usually interpreted as reading from `stdin`.

Here are some steps and commands that could be used to try and reproduce the issue:

1. **Run `md5sum` with standard input:**

   ```sh
   echo ""some data"" | md5sum -
   ```

2. **Check if there's any specific data or size requirement that triggers the crash:**

   Try with different sizes of input to see if a particular amount of data causes it:

   ```sh
   dd if=/dev/zero bs=1M count=10 | md5sum -
   ```

3. **Use an empty input:**

   Sometimes, edge cases like no input at all can trigger bugs:

   ```sh
   echo """" | md5sum -
   ```

4. **Try with a large amount of random data:**

   To see if there is any pattern or limitation related to the volume of data:

   ```sh
   dd if=/dev/urandom bs=1M count=10 | md5sum -
   ```

5. **Check for concurrency issues (if applicable):**

   Running `md5sum` in a multi-threaded environment might reveal different types of bugs:

   ```sh
   parallel --jobs 2 'echo {} | md5sum -' ::: ""data1"" ""data2""
   ```

6. **Examine the state after running other commands:**

   Sometimes, issues occur due to specific system states or previous command outputs:

   ```sh
   cat /path/to/large_file | md5sum -
   ```

### Summary of Test Cases:
- `echo ""some data"" | md5sum -`
- `dd if=/dev/zero bs=1M count=10 | md5sum -`
- `echo """" | md5sum -`
- `dd if=/dev/urandom bs=1M count=10 | md5sum -`

These commands should be run in an environment similar to the one where the bug was originally observed. This includes using the same version of GNU coreutils and possibly the same operating system setup.

By running these test cases, you might be able to replicate the conditions that led to the crash mentioned in the bug report.","The given bug report is about a segmentation fault in `md5sum` when reading from standard input (`stdin`). To reproduce this issue, we can follow these steps:

1. **Create a simple file**: This can be used as input for `md5sum`. You could also use `/dev/zero` or `/dev/random`, but a simple text file might be easier to debug if necessary.
   
   ```bash
   echo ""Test data"" > testfile.txt
   ```

2. **Run `md5sum` with standard input**: Redirect the contents of your file into `md5sum`. 

   ```bash
   md5sum < testfile.txt
   ```

3. **Trigger a segmentation fault (if not already reproduced)**: Based on the stack trace, it seems that the issue might be related to reading from stdin in certain conditions (possibly when dealing with specific types of input or sizes). If the above command works fine, you may try other inputs like larger files, binary data, etc. 

   ```bash
   # Try a large file (e.g., 1GB)
   dd if=/dev/zero of=largefile bs=1M count=1024
   md5sum < largefile

   # Try binary data
   head -c 16 /dev/random > random_data.bin
   md5sum < random_data.bin
   ```

4. **Attempt to reproduce with special inputs**: Sometimes, unusual or boundary condition inputs can cause issues.

   ```bash
   # Empty input
   echo """" | md5sum

   # Very large input (e.g., 1GB of zeros)
   head -c $((1024*1024*1024)) /dev/zero | md5sum
   ```

5. **Check for crashes with different versions**: If you have multiple versions of `md5sum` available, try reproducing the issue with each one to see if it's specific to a certain version.

6. **Use debugging tools (optional)**: If you suspect that the bug is reproducible, use gdb or another debugger to trace through `md5sum` when it crashes.
   
   ```bash
   gdb --args md5sum < testfile.txt
   (gdb) run
   (gdb) backtrace
   ```

If after performing these tests you are still unable to reproduce the bug, additional information about the environment (OS version, `md5sum` version, etc.) might be necessary. However, based on the provided stack trace and description, following the steps above should help in trying to recreate the issue.",,
,,,,,,,,,,,,,,,,"```bash
ssh -l agica reindeer
who
```",None,None,,
,,,,,,,,,,,,,,,,"VAR=''
test -n ""$VAR"" ; echo $?
test ""$VAR"" ; echo $? 
test -z ""$VAR""; echo $? 
test -n ""non-empty string"" ; echo $?","VAR=''
test -n $VAR ; echo $?",None,,
,,,,,,,,,,,,,,,,"```bash
sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd
```","sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd","sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd",,
,,,,,,,,,,,,,,,,"```bash
mkdir scons-hg-001 scons-hg-002 scons-hg-003
fallocate -l 47M scons-hg-001/file
fallocate -l 1.6M scons-hg-002/file
fallocate -l 27M scons-hg-003/file
du -hs *
du -hs scons-hg-00?
```","touch scons-hg-001; dd if=/dev/zero of=scons-hg-001 bs=1M count=47
touch scons-hg-002; dd if=/dev/zero of=scons-hg-002 bs=1M count=1.6
touch scons-hg-003; dd if=/dev/zero of=scons-hg-003 bs=1M count=27
du -hs *
du -hs scons-hg-00?",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir Bug
cd Bug
git clone git://git.kernel.org/pub/scm/git/git.git git.git
du -s *
```","None

The provided bug report mentions an attached script that needs to be run in order to reproduce the issue but does not include the actual contents of this script within the text given. Therefore, without access to the attached script, it's impossible to provide a concrete command or test case to reproduce the described behavior based solely on the information available.",None,,
,,,,,,,,,,,,,,,,"```bash
ln -s xen-4.1.1.gz xen-4.1.gz
ln -s xen-4.1.1.gz xen.gz
for F in xen*; do if test -f ${F}; then echo ${F} is a file.; fi; done
```","With xen installed, for F in /boot/xen*; do if /usr/bin/test -f ${F}; then echo ${F} is a file.; fi; done","ln -s file.txt symlink.txt  
touch file.txt  
test -f symlink.txt && echo ""symlink.txt is a file.""",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears that the `uniq` command is experiencing a segmentation fault under certain conditions. To reproduce the bug, we can try the following commands:

1. **Run uniq with a large input file**: The bug reports mention that the segmentation faults occur at different addresses, which could indicate that the issue is related to memory allocation or handling of large inputs.
```bash
uniq -u large_input_file.txt
```
Replace `large_input_file.txt` with a file containing a large amount of data (e.g., several hundred megabytes).

2. **Run uniq with a specific input pattern**: The stacktrace mentions an error at address `0x402735`, which could be related to a specific input pattern or sequence.
```bash
echo -e ""line1\nline1\nline2\nline3\nline3"" | uniq
```
This command feeds a simple input pattern to the `uniq` command, which may help trigger the bug.

3. **Run uniq with multiple threads**: Some of the bug reports mention that the segmentation faults occur at different times, which could indicate that the issue is related to concurrency or threading.
```bash
for i in {1..10}; do echo ""line$i"" >> input_file.txt; done
uniq -u input_file.txt &
uniq -u input_file.txt &
wait
```
This command creates a file with multiple lines and then runs two instances of `uniq` concurrently on the same file.

4. **Run uniq with a corrupted or malformed input file**: The bug reports mention that the segmentation faults occur at different addresses, which could indicate that the issue is related to handling of corrupted or malformed input.
```bash
dd if=/dev/urandom of=input_file.txt bs=1024 count=1024
uniq -u input_file.txt
```
This command creates a file with random data and then runs `uniq` on it, which may help trigger the bug.

5. **Run uniq under valgrind or gdb**: To get more information about the segmentation fault, we can run `uniq` under a memory debugging tool like valgrind or gdb.
```bash
valgrind --tool=memcheck uniq -u input_file.txt
```
or
```bash
gdb --args uniq -u input_file.txt
```
These commands will help us identify the exact location of the segmentation fault and provide more information about the bug.

By running these test cases, we may be able to reproduce the bug and gather more information about its cause.","Based on the given log entries and bug description, we can deduce that the issue is related to the `uniq` command in Linux. The segfaults are happening consistently with this command.

Here's a step-by-step approach to reproduce the bug:

1. **Understand the Context**: The `uniq` command removes duplicate lines from sorted input files or standard input. It means that the data being processed by `uniq` might be causing it to crash due to some specific conditions, such as large input sizes or malformed inputs.

2. **Identify Possible Test Cases**:
   - Use a file with many duplicates.
   - Use a very large file.
   - Provide unsorted input (though `uniq` is supposed to work only on sorted files).

3. **Prepare the Input Files**:
   - Create a file with many duplicate lines.
   - Create a very large file, either sorted or unsorted.

### Test Cases

1. **Test Case 1: Many Duplicates**
    ```sh
    # Create a file with many duplicates
    seq 100 > input.txt
    cat input.txt input.txt >> output.txt
    sort output.txt | uniq
    ```

2. **Test Case 2: Large Sorted File**
    ```sh
    # Create a large sorted file (with some duplicate lines)
    seq 1000000 > large_sorted_input.txt
    cat large_sorted_input.txt large_sorted_input.txt >> large_output.txt
    sort large_output.txt | uniq
    ```

3. **Test Case 3: Large Unsorted File**
    ```sh
    # Create a large unsorted file (with some duplicate lines)
    seq 1000000 > large_unsorted_input.txt
    cat large_unsorted_input.txt large_unsorted_input.txt >> large_unsorted_output.txt
    uniq < large_unsorted_output.txt
    ```

### Commands to Execute

To try and reproduce the bug, you can run the following commands:

```sh
# Test Case 1: Many Duplicates
seq 100 > input.txt
cat input.txt input.txt >> output.txt
sort output.txt | uniq

# Test Case 2: Large Sorted File
seq 1000000 > large_sorted_input.txt
cat large_sorted_input.txt large_sorted_input.txt >> large_output.txt
sort large_output.txt | uniq

# Test Case 3: Large Unsorted File
seq 1000000 > large_unsorted_input.txt
cat large_unsorted_input.txt large_unsorted_input.txt >> large_unsorted_output.txt
uniq < large_unsorted_output.txt
```

### Analyze the Results

Run each of these commands and observe whether a segmentation fault occurs. If `uniq` crashes, it would indicate that one or more of these scenarios might be triggering the bug.

By using these test cases, you can better understand under which conditions the `uniq` command is failing and potentially identify the root cause of the issue.","The provided information indicates that the `uniq` command is crashing due to segmentation faults. To reproduce this issue, we need to focus on what inputs might be causing `uniq` to fail in these specific ways.

### Understanding the Segmentation Fault

A segmentation fault occurs when a program attempts to read or write memory that it doesn't have permission to access. In the case of `uniq`, it seems like it is failing while processing some input data, which causes the crash.

The following details are key:
- The `uniq` command fails at different addresses each time.
- It consistently fails in the same function (or near the same location) as indicated by the IP address (`0x402735`).

### Steps to Reproduce

To reproduce this bug, you need to:

1. **Obtain a Sample Input:**
   - The exact input that causes `uniq` to fail is unknown from the logs alone, but there are some hints:
     - It seems to be related to handling large files or specific patterns in the data.
     - The errors occur while processing lines in memory.

2. **Test with Large Files:**
   - Create a large file and pass it to `uniq`. A simple way is to generate a large text file using commands like:
     ```bash
     head /dev/urandom | tr -dc '[:print:]' > largefile.txt
     ```
     Then run:
     ```bash
     uniq largefile.txt
     ```

3. **Test with Specific Patterns:**
   - Create files with specific patterns that might cause `uniq` to behave unexpectedly, such as lines with repeated characters or very long lines.
     ```bash
     echo ""aaaaaaa..."" > repeated_chars.txt
     echo ""verylongline_that_might_cause_a_problem"" >> repeated_chars.txt
     ```
     Then run:
     ```bash
     uniq repeated_chars.txt
     ```

4. **Test with Different File Formats:**
   - Test `uniq` with files that have different encodings or formats, as the handling of these might introduce errors.
     ```bash
     iconv -f UTF-8 -t ISO-8859-1 largefile.txt > iso_file.txt
     ```
     Then run:
     ```bash
     uniq iso_file.txt
     ```

5. **Use Debugging Tools:**
   - Use debugging tools like `gdb` to inspect the state of `uniq` when it crashes.
     ```bash
     gdb --args /usr/bin/uniq largefile.txt
     ```
     Then, use commands like `run`, `backtrace`, and `info registers` to get more information about the crash.

6. **Check for Updates:**
   - Ensure you are using the latest version of `uniq`. Sometimes, bugs are fixed in newer releases.
   ```bash
   yum update coreutils  # For CentOS/RHEL-based systems
   ```

### Conclusion

By systematically testing with different types of input files and using debugging tools, you should be able to identify the specific conditions under which `uniq` crashes. This will help you reproduce the bug accurately and provide valuable information for further analysis or reporting the issue to the maintainers.",,
,,,,,,,,,,,,,,,,"```bash
echo HKT: `date -d ""2012-05-18 21:00:00 HKT""`
echo `TZ=America/New_York date -d ""$(TZ=:Asia/Hong_Kong date -d 9pm)""`
echo ""HKG: `TZ=':Asia/Hong_Kong' date`""
```","echo HKT: `date -d ""2012-05-18 21:00:00 HKT""`  
echo `TZ=America/New_York date -d ""$(TZ=:Asia/Hong_Kong date -d 9pm)""`","echo HKT: `date -d ""2012-05-18 21:00:00 HKT""`",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"touch file.html file.htm
ls --color","touch file.html file.htm
ls --color=always","touch file.html file.htm  
ls --color=auto",,
,,,,,,,,,,,,,,,,stat -f /,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file_1 file.1 file_2 file.2
ls -l
```","touch file_1 file.1 file_2 file.2
ls -l","touch file_1 file.1 file_2 file.2
ls -l",,
,,,,,,,,,,,,,,,,sync,"sync

# To reproduce the issue, simply run the `sync` command and observe if the prompt returns or hangs as described in the bug report.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir d
ln -s d l
setfacl -m u:daemon:rx d
ls -dl -L l
```","mkdir d
ln -s d l
setfacl -nm u:daemon:rx d
ls -dl -L l","mkdir d  
ln -s d l  
setfacl -nm u:daemon:rx d  
ls -dl -L l",,
,,,,,,,,,,,,,,,,ssh remotehost /usr/bin/tput,ssh remotehost /usr/bin/test,ssh remotehost /usr/bin/test,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p bugz
mkdir -p bugz
echo $?
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p cptest/bin cptest/nonbin cptarget
cp -avZ cptest/* cptarget/
```","mkdir -p cptest/bin cptest/nonbin cptarget
cp -avZ cptest/* cptarget/","mkdir -p cptest/bin cptest/nonbin cptarget  
cp -avZ cptest/* cptarget/",,
,,,,,,,,,,,,,,,,"```bash
du -s /usr /var /run
echo Fail

du -s /var /usr /run
echo Fail

du -s /var /run /usr
echo Fail

du -s /var /run
echo Fail
```","du -s /usr /var /run
du -s /var /usr /run
du -s /var /run /usr
du -s /var /run

These are the specific command lines marked as ""Fail"" in the provided test script, which means they do not display the size of `/run` under certain conditions, reproducing the bug.","du -s /var /run
echo Fail

du -s /var /usr /run
echo Fail

du -s /var /run /usr
echo Fail",,
,,,,,,,,,,,,,,,,"```bash
sudo su -
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test
```","sudo su -
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test","sudo su -
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test",,
,,,,,,,,,,,,,,,,"su
suspend",None,None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, you would need a setup with similar disk and mount configurations as described in the report, including bind mounts and restricted access to certain directories (like those under `/var/named/chroot/`). The exact steps could involve:

1. Creating multiple partitions and filesystems on different disks (`/dev/sda1`, `/dev/sdd1`, etc.).
2. Mounting these filesystems at various points (`/`, `/boot`, `/mnt/data`, etc.).
3. Setting up bind mounts for `/dev/sdd1` to appear in multiple locations.
4. Restricting permissions on directories like `/var/named/chroot/` and its contents to mimic the ""Keine Berechtigung"" (No permission) errors.
5. Running the `df` command with options (`-hT`) as shown.

However, given the complexity of exactly replicating the disk layout, mount points, and permissions, a simplified version focusing on the core issueâ`/dev/sdd1` appearing multiple times due to bind mounts and the permission errors for `/var/named/chroot/`âcould be attempted with:

```bash
# Create a couple of directories for mounting
mkdir -p /mnt/data /Volumes/dune/www-servers /Volumes/dune/www-servers/phpincludes

# Assuming /dev/sdd1 is an existing partition, mount it at multiple points
sudo mount --bind /mnt/data /Volumes/dune/www-servers
sudo mount --bind /mnt/data /Volumes/dune/www-servers/phpincludes

# Restrict access to a directory to mimic permission errors
mkdir -p /var/named/chroot/etc
chmod 000 /var/named/chroot/etc

# Run the df command as described
/bin/df -hT
```

This simplified test case attempts to replicate the essence of the reported issue by creating bind mounts and restricting access to a directory, but it does not fully recreate the original disk layout or all mount points mentioned in the report.",None,None,,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, let's analyze the key points from the information given:

1. **Application Involved**: The application involved in the crash is `/usr/bin/md5sum`.
2. **Nature of Crash**: The process crashes and generates a core dump.
3. **Frequency and Repetition**: There are multiple instances of the crash reported over time, indicating that the issue can be reproduced under certain conditions.

Given this information, here are steps to potentially reproduce the bug:

### Step 1: Identify Potential Triggers
- **Input Size or Type**: The crashes might be triggered by specific input sizes (e.g., very large files) or types (e.g., binary vs. text).
- **Specific Commands or Options**: Certain command-line options or combinations thereof with `md5sum` could trigger the crash.

### Step 2: Formulate Test Cases
Based on common uses of `md5sum`, here are some test cases to consider:
- **Large File Test**:
  ```bash
  dd if=/dev/zero of=large_file.bin bs=1M count=1024
  md5sum large_file.bin
  ```
- **Special Character or Binary Data Test**:
  ```bash
  echo -n ""some_string_with_special_chars_like_Ã¤Ã¶Ã¼"" > test_file.txt
  md5sum test_file.txt
  ```
- **Empty File Test**:
  ```bash
  touch empty_file.txt
  md5sum empty_file.txt
  ```
- **Multiple Files Test**:
  ```bash
  md5sum file1.txt file2.txt
  ```
- **Recursive Test (if applicable)**:
  ```bash
  find /path/to/directory -type f -exec md5sum {} \;
  ```
- **Pipe Input Test**:
  ```bash
  echo ""Hello, World!"" | md5sum
  ```

### Step 3: Monitor for Crashes
Run these test cases multiple times and monitor the system logs (e.g., `/var/log/messages` or equivalent) for crash reports from `abrt` or similar crash reporting tools. If a crash occurs, it should be logged similarly to the examples provided in the bug description.

### Step 4: Analyze Crash Reports
If a crash is reproduced, analyze the core dump (if available) and any log messages generated by the crash reporting system for clues about what might have caused the crash. This could involve using tools like `gdb` to examine the core dump:
```bash
gdb -c /path/to/coredump /usr/bin/md5sum
```
And then running commands within `gdb` to inspect the state of the program at the time of the crash.

By systematically testing different scenarios and closely monitoring system behavior, you should be able to identify whether these test cases can reproduce the bug reported in the description.","Based on the given information, it appears that the `/usr/bin/md5sum` utility is crashing repeatedly under certain conditions. To help pinpoint the cause and potentially reproduce this issue, we can follow these steps:

### Steps to Reproduce

1. **Identify Input Files:**
   - Determine what kind of input files are being used when `md5sum` crashes.
   - This could be specific file types (e.g., text, binary), corrupted files, very large files, or special characters in filenames.

2. **Run the Command with Various Inputs:**
   - Execute `md5sum` on different types of input to see if it causes a crash:
     ```sh
     md5sum <filename>
     ```

3. **Check for Corrupted Files:**
   - If there are any corrupted files, try running `md5sum` on those specifically.
     ```sh
     md5sum <corrupted_filename>
     ```

4. **Run with Large Files:**
   - Test if the crash happens more frequently with large files:
     ```sh
     dd if=/dev/urandom of=largefile bs=1M count=1024  # Create a large file (1GB)
     md5sum largefile
     ```

5. **Run in Different Environments:**
   - Ensure that the issue is consistent across different environments and systems.
   
6. **Check for Known Bugs or Patches:**
   - Verify if there are any known issues with this version of `md5sum`.
   - Check for any security advisories or patches related to the utility.

### Example Test Cases

1. **Basic Usage:**
   ```sh
   md5sum testfile.txt
   ```

2. **Large File:**
   ```sh
   dd if=/dev/urandom of=largefile bs=1M count=1024  # Create a large file (1GB)
   md5sum largefile
   ```

3. **Corrupted File:**
   - If you suspect a corrupted file, try:
     ```sh
     md5sum corrupted_file.bin
     ```

4. **File with Special Characters in Name:**
   ```sh
   touch ""file_with_special_chars!@#$.txt""
   md5sum ""file_with_special_chars!@#$.txt""
   ```

### Additional Debugging Steps

1. **Use `gdb` to Get a Stack Trace:**
   - Run the command under the GNU Debugger (GDB) to get more information about where it crashes:
     ```sh
     gdb --args md5sum testfile.txt
     run
     ```

2. **Check for Memory Leaks or Buffer Overflows:**
   - Use tools like `valgrind` to check for memory issues:
     ```sh
     valgrind --leak-check=yes md5sum largefile
     ```

By running these test cases and gathering more information, you can narrow down the conditions that lead to the crash of `md5sum`. If the issue persists and cannot be reproduced with specific inputs, consider checking for system-specific configurations or environment variables that might be affecting the utility's behavior.","Based on the provided information, it appears that `/usr/bin/md5sum` is crashing repeatedly and generating core dumps. However, there are no specific details about what input causes this behavior or under what conditions it occurs.

To attempt to reproduce the issue, you can try several test cases using `md5sum`. Since `md5sum` typically computes the MD5 hash of files or standard input, you might want to consider edge cases such as:

1. **Empty Input:**
   ```bash
   echo -n | md5sum
   ```
2. **Very Large Input (e.g., 1GB file):**
   First create a large file:
   ```bash
   dd if=/dev/zero of=largefile bs=1G count=1
   ```
   Then run `md5sum` on it:
   ```bash
   md5sum largefile
   ```
3. **Special Characters in Filename:**
   Create a file with special characters in its name and run `md5sum`:
   ```bash
   touch ""special@#$.txt""
   echo -n ""test"" > ""special@#$.txt""
   md5sum ""special@#$.txt""
   ```
4. **Corrupted File:**
   Create a corrupted file or use one if you have access to it and run `md5sum`:
   ```bash
   dd if=/dev/urandom of=corruptfile bs=1M count=1
   md5sum corruptfile
   ```
5. **Long Input (e.g., very large number of lines):**
   Generate a large text file with many lines and run `md5sum`:
   ```bash
   seq 1 100000 > largetextfile.txt
   md5sum largetextfile.txt
   ```

6. **Simultaneous Calls to `md5sum`:**
   Try running multiple instances of `md5sum` simultaneously, as race conditions might be involved:
   ```bash
   for i in {1..10}; do md5sum /path/to/file & done; wait
   ```
   
7. **Test with Different Filesystems:**
   If possible, test the behavior on different filesystems (e.g., ext4, XFS, NTFS) to see if it's specific to a certain file system.

8. **Use of Input Redirection with Large Amounts of Data:**
   Use input redirection and pass large data streams:
   ```bash
   dd if=/dev/zero bs=1M count=1024 | md5sum
   ```

9. **Test Edge Cases for File Descriptors:**
   Check how `md5sum` behaves with closed or invalid file descriptors.

If the issue persists across multiple test cases, it might be helpful to use debugging tools like `gdb` or `valgrind` on a core dump to get more insight into what's causing the crashes. However, based on the provided information alone, trying different edge-case inputs for `md5sum` should be a good starting point.

Remember that reproducing bugs can sometimes require detailed knowledge of the system and application context in which they occur. If these test cases do not yield results, consider checking if there are any known issues with the specific version of `coreutils` (which includes `md5sum`) you're using or if your environment has unique characteristics contributing to the problem.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, let's break down the key elements:

1. **Affected Program**: The program affected by the bug is `/usr/bin/md5sum`.
2. **Bug Manifestation**: The manifestation of the bug is a core dump being saved by `abrt` (Automatic Bug Reporting Tool), indicating that `md5sum` crashes under certain conditions.
3. **Environment and Context**: The environment includes Fedora or a similar Linux distribution, given the presence of `abrt`. The context suggests repeated crashes of `md5sum`, possibly triggered by specific input or usage patterns.

Given this information, here are potential steps to reproduce the bug:

### Test Case 1: Basic Usage
- **Command**: `md5sum [file_name]`
- **Purpose**: Verify if basic usage triggers the crash. Replace `[file_name]` with various types of files (e.g., text, binary, empty).

### Test Case 2: Large Input
- **Command**: `dd if=/dev/zero bs=1M count=1000 | md5sum`
- **Purpose**: Test if processing a large amount of data causes the crash. This command generates a 1 GB stream of zeros and pipes it to `md5sum`.

### Test Case 3: Special Input
- **Command**: `echo -n ""[special_characters]"" | md5sum`
- **Purpose**: Determine if specific special characters or sequences trigger the bug. Replace `[special_characters]` with various inputs (e.g., non-ASCII characters, escape sequences).

### Test Case 4: Concurrent Execution
- **Command**: `for i in {1..10}; do md5sum /dev/zero & done`
- **Purpose**: Check if concurrent executions of `md5sum`, especially with a stream that never ends like `/dev/zero`, can trigger the crash.

### Test Case 5: File System and Permissions
- **Command**: Attempt to run `md5sum` on files with unusual permissions, symbolic links, or files located on different file systems (e.g., network mounts).
- **Purpose**: Investigate if file system issues or permission-related problems contribute to the crash.

### Test Case 6: Resource Limitation
- **Command**: Use tools like `ulimit` to restrict resources (e.g., memory, open files) and then run `md5sum`.
- **Purpose**: Determine if resource constraints can cause the crash.

By systematically running these test cases and potentially modifying them based on initial results, you should be able to identify conditions under which the bug is reproducible. This process may need iteration and refinement as more details about the nature of the crash become available.","Based on the provided information, it appears that `/usr/bin/md5sum` is crashing and generating core dumps multiple times over a period of several weeks. This suggests there may be an issue with the `md5sum` command itself, possibly due to some specific input or environmental conditions.

### Steps to Reproduce the Bug:

1. **Environment Setup**:
   - Ensure that your environment matches the one where the bug was reported (e.g., the same Linux distribution and version, similar system libraries, etc.).

2. **Identify the Input Causing the Crash**:
   - Try running `md5sum` with various inputs to see if a specific input triggers the crash.
     ```sh
     md5sum /path/to/suspected/problematic_file
     ```
   - Use files of different types, sizes, and contents (e.g., binary files, text files, large files, etc.).

3. **Reproduce with Specific Test Cases**:
   - If you suspect itâs a specific type or size of file causing the issue, use that particular input.
   - You can also test if running `md5sum` on standard input causes any issues:
     ```sh
     echo ""some text"" | md5sum
     ```

4. **Use Debugging Tools**:
   - To get more information about why `md5sum` is crashing, you could use a debugger like GDB.
     ```sh
     gdb /usr/bin/md5sum
     run /path/to/suspected/problematic_file
     ```
   - Use commands within GDB to inspect the state when it crashes:
     ```gdb
     bt  # backtrace to see where the crash occurred
     info registers  # to check register values
     ```

### Example Commands for Testing:

1. **Basic Test**:
    ```sh
    md5sum /etc/passwd
    ```
2. **Large File**:
    ```sh
    dd if=/dev/zero of=largefile bs=1M count=100  # create a large file
    md5sum largefile
    ```

3. **Binary File**:
    ```sh
    dd if=/dev/urandom of=random_binary_file bs=1M count=10  # create random binary file
    md5sum random_binary_file
    ```
   
4. **Standard Input Test**:
    ```sh
    echo ""hello world"" | md5sum
    ```

### Expected Results:

- If the bug is triggered by a specific type of input or condition, `md5sum` should crash and generate a core dump.
- Using GDB should provide more details about where in the code the crash occurs.

By following these steps, you can identify whether thereâs a reproducible issue with the `md5sum` command and potentially gather more information to diagnose and fix the problem.","The given information indicates that there is a recurring issue with the `/usr/bin/md5sum` command where it crashes and generates core dumps as logged in `var/spool/abrt/ccpp-...`. Since no specific error message, stack trace, or environmental conditions are mentioned, reproducing this bug might not be straightforward. However, we can outline some general steps that may help identify the root cause.

To reproduce the issue, you could try:

1. **Basic Command Execution**: Run `md5sum` with various inputs (files) to see if it crashes consistently.
    ```bash
    md5sum <file>
    ```

2. **Handling Large Files**: Test with large files as one common cause of crashes is memory issues.
    ```bash
    # Create a large file for testing
    dd if=/dev/zero of=large_file bs=1M count=1024

    md5sum large_file
    ```

3. **Handling Special Characters in File Names**: Check if there are any special characters or unusual file names causing issues.
    ```bash
    touch ""file_with_special_chars!@#$.txt""
    md5sum file_with_special_chars\!\@\#\$.txt
    ```

4. **Testing with Multiple Files**: Running `md5sum` on multiple files simultaneously might also uncover potential race conditions or threading issues.
    ```bash
    # Create a bunch of test files
    touch file{1..20}.txt

    md5sum file*.txt
    ```

5. **Running Under Different Environments**: The issue might be environment-specific, so try different shell environments and configurations.
    - Try with `sh`, `bash`, `zsh` etc.

6. **Testing on Different Systems**: Run the same commands across different systems (with different distributions, versions, architectures) to check if it's system-dependent.
7. **Using Valgrind**: Valgrind can help catch memory errors like leaks, out-of-bounds access, or uninitialized variables which might be causing crashes.
    ```bash
    valgrind --tool=memcheck md5sum <file>
    ```

8. **Testing with Different Inputs**: Try inputting various non-file objects (like directories, special files) to see if the command handles them gracefully.
   ```bash
   # Create a test directory
   mkdir test_dir

   md5sum test_dir  # should not crash and ideally return an error message or ignore the dir
   ```

9. **Testing with Redirected Input**: Try redirecting input from various sources to see if `md5sum` handles it correctly.
    ```bash
    echo -n ""test string"" | md5sum -
    ```

10. **Combining Commands**: Sometimes combining commands might expose bugs that individual command execution does not show.
    ```bash
    ls | xargs md5sum
    find . -type f -print0 | xargs -0 md5sum
    ```
    
Please note that these steps are general and may or may not reproduce the issue. If none of them do, you might want to look into the specific crash reports generated in `/var/spool/abrt/ccpp-...` as they can provide more detailed information on what caused the crash. These reports typically contain backtraces and other useful debugging information that could point towards the actual cause of the issue.",,
,,,,,,,,,,,,,,,,"To reproduce this bug, you'll need to analyze the given information and understand what might cause the `/usr/bin/md5sum` command to crash repeatedly as indicated by the `abrt` (Automatic Bug Reporting Tool) messages in the `var_log_messages` section.

Given data:
- The process crashing is `/usr/bin/md5sum`.
- There are multiple instances of this crash reported over time, suggesting it might not be a one-time error but rather something that can be triggered under certain conditions.
- The crashes are all related to the same executable (`/usr/bin/md5sum`), which computes and checks MD5 message digests.

Steps to reproduce the bug:
1. **Identify Potential Triggers**: Look for common factors among the crash instances, such as specific input files, command-line options used with `md5sum`, or system conditions (e.g., load, memory usage) at the time of crashes.

2. **Test `md5sum` with Various Inputs**:
   - Run `md5sum` on a variety of files to see if it crashes with specific types of files (e.g., very large files, files with certain permissions, empty files).
   - Example command: `md5sum /path/to/your/testfile`

3. **Stress Testing**: Since the bug seems to be intermittent or perhaps related to system load, try running `md5sum` in a loop on different files to simulate heavy usage.
   - Example command (run in a terminal): `while true; do md5sum /path/to/a/large/file > /dev/null; done`

4. **Check for Filesystem Issues**: The crashes could potentially be related to filesystem issues or problems with specific storage devices. Running file system checks (`fsck`) on the relevant partitions might reveal underlying problems.

5. **Memory and Resource Constraints**: Try running `md5sum` under constrained memory conditions (using tools like `ulimit` or `stress`) to see if lack of resources could trigger a crash.
   - Example command: `(ulimit -m 1024; md5sum /path/to/large/file)`

6. **Version and Updates**: Ensure that the version of `md5sum` (part of coreutils in many Linux distributions) is up to date, as bugs are often fixed in newer versions.

7. **System Call Tracing**: Use tools like `strace` or `gdb` to trace system calls made by `md5sum` when it crashes, which might give clues about what's going wrong.
   - Example command: `strace md5sum /path/to/your/testfile`

By following these steps and analyzing the outcomes, you should be able to either reproduce the bug or gather more information that could lead to identifying its root cause.","Based on the provided log information and system details, it seems that `/usr/bin/md5sum` is crashing repeatedly under certain conditions. To help identify a way to reproduce this issue, let's consider the following steps:

### Steps for Reproducing the Bug

1. **Check Environment Variables**:
   The environment variables are not explicitly shown in the logs but could be relevant if they affect how `md5sum` operates.

2. **Run with Different Input Files**:
   Since no specific details about input files are provided, try running `md5sum` with various types of files including text files, binary files, and potentially large files.
   
3. **Test Edge Cases**:
   - Empty files
   - Very large files (e.g., multi-gigabyte files)
   - Non-existent files
   - Symbolic links

4. **Run `md5sum` with Different Options**:
   Try running `md5sum` with different command-line options to see if any specific flags trigger the crash.

### Test Cases:

1. **Basic Usage**:
    ```bash
    md5sum /path/to/regular/file.txt
    ```

2. **Large File**:
    ```bash
    dd if=/dev/zero of=largefile bs=1M count=1024 # Create a 1GB file for testing.
    md5sum largefile
    ```

3. **Empty File**:
    ```bash
    touch emptyfile
    md5sum emptyfile
    ```

4. **Non-Existent File**:
    ```bash
    md5sum non_existent_file.txt
    ```

5. **Symbolic Link**:
    ```bash
    ln -s /path/to/regular/file.txt symlink_to_regular_file
    md5sum symlink_to_regular_file
    ```

6. **Multiple Files at Once**:
    ```bash
    touch file1.txt file2.txt
    echo ""hello"" > file1.txt
    echo ""world"" > file2.txt
    md5sum file1.txt file2.txt
    ```

7. **Combined with Other Tools (Pipe)**:
    ```bash
    cat /path/to/regular/file.txt | md5sum
    ```

8. **Test with Different Options**:
    ```bash
    md5sum -c <file_with_checksums>
    ```

### Steps to Gather More Information:

1. **Enable Core Dumps and Analyze**:
   Ensure that core dumps are enabled for `/usr/bin/md5sum` and analyze the generated core files using a debugger like `gdb`.
   
2. **Run with Strace or Ltrace**:
    ```bash
    strace -o md5sum_trace.txt /usr/bin/md5sum /path/to/suspected_file
    ltrace -o md5sum_ltrace.txt /usr/bin/md5sum /path/to/suspected_file
    ```

### Final Note:

The above steps should help you identify if specific files, options, or conditions cause the crash. If the issue persists, consider looking into system-level configurations and dependencies that might be affecting `md5sum`'s behavior.

If you find any specific trigger, you can then provide more detailed information for further debugging and fixing the bug.","Based on the provided information, it seems that the `md5sum` command is crashing repeatedly and generating core dumps. Here are a few steps you can take to try to reproduce this issue:

### 1. Basic Command Execution:
Try running `md5sum` with various inputs to see if it crashes under normal circumstances.

```bash
echo -n ""test"" | md5sum
md5sum /path/to/existing/file
md5sum non_existent_file
```

### 2. Test with Large Files:
Generate a large file and run `md5sum` on it to see if it can handle larger inputs.

```bash
dd if=/dev/zero of=largefile bs=1M count=1024
md5sum largefile
```

### 3. Use Different File Types:
Test with different types of files, such as text files, binary files, and special files like symbolic links or device nodes.

```bash
echo ""Some text"" > textfile.txt
md5sum textfile.txt

# Create a binary file
head -c 1M /dev/urandom > binaryfile.bin
md5sum binaryfile.bin

# Test with a symbolic link
ln -s textfile.txt symlinkfile
md5sum symlinkfile

# Test with device nodes (if possible)
md5sum /dev/null
```

### 4. Stress Testing:
Run multiple instances of `md5sum` at the same time to see if it can handle concurrency.

```bash
for i in {1..10}; do echo -n ""test$i"" | md5sum & done
wait
```

### 5. Edge Cases:
Test with edge cases, such as empty files and very large inputs that approach or exceed system memory limits.

```bash
touch emptyfile
md5sum emptyfile

# Create a very large file (close to available memory)
dd if=/dev/zero of=verylargefile bs=1G count=$(free -g | awk '/^Mem:/{print $2}') 2>/dev/null || true
md5sum verylargefile || echo ""Failed as expected""
```

### 6. Check for Memory Leaks:
If the issue persists, you can use tools like `valgrind` to check for memory leaks or other issues.

```bash
valgrind --leak-check=full md5sum /path/to/existing/file
```

### 7. Corrupted Files:
Try running `md5sum` on corrupted files or files with unusual permissions to see if it can handle these cases gracefully.

```bash
# Create a corrupted file
echo ""corrupted_data"" > corruptedfile
tr '\n' '\0' < /dev/urandom | head -c 1024 >> corruptedfile

md5sum corruptedfile

# Change file permissions
chmod 000 corruptedfile
md5sum corruptedfile || echo ""Permission denied as expected""
chmod 644 corruptedfile
```

### 8. Check for System Resource Limits:
Ensure that the system's resource limits are not causing issues.

```bash
ulimit -a
```

If none of these tests cause `md5sum` to crash, the issue may be more subtle and could involve specific inputs or system configurations. In that case, you might need to use a debugger like `gdb` to analyze the core dumps generated by `abrt`.

```bash
gdb /usr/bin/md5sum /var/spool/abrt/ccpp-YYYY-MM-DD-HH:MM:SS-PID/coredump
(gdb) backtrace
```

Replace `YYYY-MM-DD-HH:MM:SS-PID` with the actual timestamp and PID from one of the core dumps in `/var/spool/abrt/`. The `backtrace` command will show you where the program was when it crashed, which can help identify the root cause.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the given bug description, we need to analyze the information provided:

1. **Bug Description**: The bug involves the `/usr/bin/md5sum` command crashing and producing core dumps. The exact cause of the crash isn't specified in the description, but it mentions multiple instances of the `md5sum` command crashing at different times.

2. **Environment and Dependencies**:
   - The system appears to be using a Linux distribution (given the paths like `/usr/bin/md5sum`, `/var/spool/abrt/`, etc.).
   - The `abrt` (Automatic Bug Reporting Tool) is installed and configured, which captures core dumps when applications crash.

3. **Relevant Details**:
   - Multiple crashes of `md5sum` are reported over time, suggesting a potential issue with the command itself or its usage.
   - The `var_log_messages` section shows repeated saving of core dumps for `md5sum`, indicating that the crashes were frequent and perhaps related to specific operations or inputs.

Given these points, here are some steps and test cases that could help reproduce the bug:

### Test Case 1: Basic Usage
- **Command**: `md5sum filename`
- **Purpose**: To see if the basic usage of `md5sum` can trigger a crash.
- **Variations**:
  - Use different types of files (text, binary, large files).
  - Try with and without redirection (`> output.txt`).

### Test Case 2: Large Files
- **Command**: `md5sum largefile.bin`
- **Purpose**: Since crashes might be related to file processing, testing with a very large file could help reproduce the issue.
- **Variations**:
  - Vary the size of the files (e.g., 1GB, 10GB).
  - Try with both sequential and random access patterns if possible.

### Test Case 3: Error Conditions
- **Command**: `md5sum nonexistingfile.txt`, `md5sum -invalidoption`
- **Purpose**: To test how `md5sum` handles error conditions.
- **Variations**:
  - Try different invalid options or file paths.

### Test Case 4: Concurrent Execution
- **Command**: Run multiple instances of `md5sum` on different files simultaneously (`&` at the end of each command to run in background).
- **Purpose**: To check if concurrent access or execution could trigger a crash.
- **Variations**:
  - Vary the number of concurrent executions.

### Test Case 5: Specific File Types
- **Command**: `md5sum specificfiletype.pdf`, replacing `specificfiletype.pdf` with various file types known to cause issues (if any are identified from log analysis).
- **Purpose**: If logs or previous tests indicate that certain file types might be problematic, test these specifically.

### Additional Steps:
- Review system logs and the output of `abrt` for clues about what might have caused the crashes.
- Consider running the tests with debugging tools like `strace`, `gdb`, or `valgrind` to get more detailed information about the crashes.

These test cases are speculative based on the provided description. Actual reproduction steps may vary depending on specific details of the environment, the version of `md5sum`, and other factors not mentioned in the bug report.","To reproduce a bug with `md5sum`, we need more specific details about the context in which it crashes. Based on the information provided, it seems that `md5sum` has been crashing repeatedly for some reason. Here are steps and potential commands you can use to try reproducing this issue:

1. **Check Environment**: Ensure your environment matches as closely as possible with the one described above. This includes checking versions of the operating system and tools used.

2. **Run `md5sum` on Large Files**:
    - The crash might be related to large files.
    ```sh
    dd if=/dev/urandom of=largefile bs=1M count=100
    md5sum largefile
    ```

3. **Check for Corrupted Files**:
    - Ensure that the file is not corrupted or being modified while `md5sum` is running.
    ```sh
    touch testfile
    echo ""Hello, World!"" > testfile
    md5sum testfile
    ```

4. **Run with Different Inputs**:
    - Try different files and directories to see if it consistently crashes.
    ```sh
    md5sum /etc/passwd
    md5sum *
    ```

5. **Use Valgrind for Debugging (if available)**:
    - Use a memory debugging tool like `valgrind` to check for memory leaks or other issues.
    ```sh
    valgrind --leak-check=yes md5sum largefile
    ```

6. **Check with Different Filesystems**:
    - The bug might be related to specific filesystems, so try different ones (e.g., ext4, XFS).
    ```sh
    mount -t <filesystem_type> /dev/<device> /mnt/testfs
    cd /mnt/testfs
    md5sum *
    ```

7. **Run in a Loop**:
    - To see if the crash is related to repeated usage.
    ```sh
    for i in {1..100}; do md5sum largefile; done
    ```

8. **Check System Logs**:
    - Look into system logs (`dmesg`, `journalctl`) during execution of `md5sum` to see if there are any errors or warnings that could indicate the cause.
    ```sh
    journalctl -xe | grep md5sum
    dmesg | tail
    ```

9. **Check for Race Conditions**:
    - If the crash is intermittent, it might be due to a race condition. Consider using tools like `strace` or `ltrace` to trace system calls and library calls.
    ```sh
    strace md5sum largefile
    ltrace md5sum largefile
    ```

These commands should help identify the conditions under which `md5sum` crashes, thus allowing you to better understand and potentially fix the issue.","Based on the information provided, it appears that there are frequent crashes occurring when `/usr/bin/md5sum` is executed. However, there's not enough specific detail in the logs about what input might be causing the crashes. Hereâs a list of commands and test cases you can try to help identify the cause:

1. **Run `md5sum` with a known good file:**
   ```bash
   md5sum /path/to/known_good_file
   ```

2. **Run `md5sum` with an empty file:**
   ```bash
   touch empty_file.txt
   md5sum empty_file.txt
   rm empty_file.txt
   ```

3. **Run `md5sum` with a large file (e.g., a multi-gigabyte file):**
   ```bash
   dd if=/dev/zero of=large_file bs=1G count=2
   md5sum large_file
   rm large_file
   ```

4. **Run `md5sum` on files with special characters in the filename:**
   ```bash
   touch ""file@name#with$special%characters^in&it""
   md5sum ""file@name#with$special%characters^in&it""
   rm ""file@name#with$special%characters^in&it""
   ```

5. **Run `md5sum` on files with different character encodings:**
   - Create and test with UTF-8 encoded text.
   - Create and test with Latin1 encoded text.

6. **Run `md5sum` on a symbolic link to a file:**
   ```bash
   ln -s /path/to/known_good_file symlink_to_file
   md5sum symlink_to_file
   rm symlink_to_file
   ```

7. **Run `md5sum` on a broken symbolic link (if applicable):**
   ```bash
   ln -s non_existent_file broken_symlink
   md5sum broken_symlink
   rm broken_symlink
   ```

8. **Run `md5sum` with multiple files:**
   ```bash
   echo ""test1"" > file1.txt
   echo ""test2"" > file2.txt
   md5sum file1.txt file2.txt
   rm file1.txt file2.txt
   ```

9. **Run `md5sum` with a non-existent file:**
   ```bash
   md5sum non_existent_file
   ```

10. **Run `md5sum` in a loop to stress the system (if applicable):**
    ```bash
    for i in {1..100}; do md5sum /path/to/known_good_file; done
    ```

11. **Check if running `md5sum` with different options causes crashes:**
    - If there are any additional options available for `md5sum`, try using them.

After executing these commands, monitor the system logs and check if there are any error messages or core dumps generated. This will help identify which scenarios cause the crashes. Additionally, you can use debugging tools such as `gdb` to run `md5sum` under a debugger:

```bash
gdb --args md5sum /path/to/known_good_file
```

Inside gdb, you can set breakpoints and analyze the program state when it crashes. This can provide more insight into what might be going wrong.",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears that the issue is related to the `md5sum` command crashing and producing a core dump. To reproduce this bug, we can try the following commands or test cases:

1. **Run md5sum with a large input file**:
```bash
dd if=/dev/zero of-large-file bs=1M count=1000
md5sum large-file
```
This command creates a 1GB file filled with zeros and then runs `md5sum` on it. If the issue is related to handling large files, this might trigger the crash.

2. **Run md5sum with a corrupted or malformed input file**:
```bash
dd if=/dev/urandom of-corrupted-file bs=1M count=100
md5sum corrupted-file
```
This command creates a 100MB file filled with random data and then runs `md5sum` on it. If the issue is related to handling corrupted or malformed input, this might trigger the crash.

3. **Run md5sum in a loop**:
```bash
for i in {1..1000}; do md5sum /dev/zero; done
```
This command runs `md5sum` 1000 times on `/dev/zero`, which is a special file that always returns zeros. If the issue is related to repeated execution or memory allocation, this might trigger the crash.

4. **Run md5sum with different options and arguments**:
```bash
md5sum -t /dev/zero
md5sum --check /dev/zero
md5sum -c /dev/zero
```
These commands run `md5sum` with different options and arguments, such as `-t`, `--check`, and `-c`. If the issue is related to specific option handling or argument parsing, one of these commands might trigger the crash.

5. **Run md5sum under valgrind or gdb**:
```bash
valgrind md5sum /dev/zero
gdb --args md5sum /dev/zero
```
These commands run `md5sum` under memory debugging tools like Valgrind or GDB. If the issue is related to memory corruption or misuse, these tools might help identify the problem.

Note that these test cases are speculative and may not necessarily reproduce the exact bug described in the report. However, they can serve as a starting point for further investigation and testing.","To identify and reproduce a bug with `md5sum`, it's essential to understand what circumstances might cause this tool to crash and generate core dumps. From the provided information, we see that `md5sum` has been crashing repeatedly across multiple dates.

Here are some steps and test cases you can use to try to reproduce the bug:

### 1. Check the environment:
Ensure you're running in an environment similar to the one where the crashes occurred (e.g., specific Linux distribution and version, kernel version).

```bash
uname -a
cat /etc/os-release
```

### 2. Identify the exact `md5sum` binary version:

Check if the same version of `coreutils` that contains `md5sum` is installed.

```bash
which md5sum
md5sum --version
dpkg -l | grep coreutils   # On Debian-based systems
rpm -q coreutils            # On Red Hat-based systems
```

### 3. Run basic operations:

Try running some common commands that might trigger the issue.

#### Basic checksum calculation:
```bash
echo ""test data"" > testfile.txt
md5sum testfile.txt
```

#### Using standard input (stdin):
```bash
echo ""some text"" | md5sum
```

#### Using a large file or corrupted data:
Sometimes `md5sum` might crash when processing specific types of files or very large datasets.

1. Create a large file and try to calculate its checksum:

   ```bash
   dd if=/dev/urandom of=largefile bs=1M count=100  # Creates a 100MB file with random data
   md5sum largefile
   ```

2. Try processing a corrupted or malformed file:
   
   ```bash
   echo -n $'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A' > corruptfile  # Example of an invalid PNG header
   md5sum corruptfile
   ```

### 4. Stress testing:

Stress test `md5sum` by repeatedly hashing a large dataset.

```bash
for i in {1..10}; do echo ""stress test $i"" | md5sum; done
```

Or, using a more rigorous approach with multiple threads:

```bash
for i in $(seq 1 10); do (echo ""thread $i""; while true; do echo -n $'\x89\x50\x4E\x47\x0D\x0A\x1A\x0A' | md5sum & done) & done
```

### 5. Analyze the core dump:

You can analyze the core dumps to get more insight into what might be causing `md5sum` to crash.

```bash
gdb /path/to/md5sum /var/spool/abrt/ccpp-2011-10-26-16:28:59-10640/core  # Example command for GDB analysis
```

### Conclusion:
The above steps should help you identify the conditions under which `md5sum` crashes and generate a core dump. This can then be used to further debug or report the issue in detail.

If none of these tests reproduce the crash, it might indicate that the bug could be related to specific system configurations or other environmental factors not captured by these basic steps.","To reproduce this bug, we would need to run `/usr/bin/md5sum` in a way that causes it to crash repeatedly, as indicated by the log messages showing multiple core dumps over time. However, based on the information provided there is no specific command-line option or input file mentioned that leads to the crash. The fact that `md5sum` crashes consistently suggests an underlying issue with the binary itself.

Here are some test cases and commands that might help in reproducing the bug:

1. **Basic Usage Test:**
   ```bash
   echo -n ""test"" | md5sum
   ```
   
2. **Large File Input:**
   Create a large file (e.g., 1GB) and run `md5sum` on it.
   ```bash
   dd if=/dev/zero of=testfile bs=1M count=1024
   md5sum testfile
   ```

3. **Special File Types:**
   Test `md5sum` with special file types like named pipes, character devices, or block devices.
   ```bash
   mkfifo pipe
   cat > pipe &  # Write to the pipe in background
   md5sum pipe

   md5sum /dev/zero  # This will run indefinitely until interrupted
   ```

4. **Random Input:**
   Test with random input generated by `/dev/urandom`.
   ```bash
   head -c 1024 /dev/urandom | md5sum
   ```
   
5. **Corrupted File:**
   Create a corrupted file and try to calculate the checksum.
   ```bash
   truncate -s +1M testfile
   echo ""corrupt"" >> testfile
   md5sum testfile
   ```

6. **Large Number of Inputs:**
   Test with multiple large files or directories.
   ```bash
   mkdir manyfiles
   for i in {1..100}; do dd if=/dev/zero of=manyfiles/file$i bs=1M count=1; done
   md5sum manyfiles/*
   ```

7. **Environment Variables:**
   Check if there are any environment variables affecting the behavior of `md5sum`.
   ```bash
   env -i md5sum testfile  # Run with a clean environment
   ```

8. **Stress Testing:**
   Stress the system by running many instances of `md5sum` in parallel.
   ```bash
   for i in {1..10}; do (echo ""test"" | md5sum &) done
   wait
   ```

9. **Crash Simulation:**
   If there is any known vulnerability or edge case that causes crashes, test those conditions.

Given the consistent crashing of `md5sum` with different inputs and environments, it's likely a problem with the binary itself rather than a specific input or environment variable setting. It might be useful to check if there are updates or patches available for your version of `coreutils`, which includes the `md5sum` utility.

If none of these test cases cause a crash on your system, it could also be worth checking for any hardware issues that might lead to program crashes, such as bad memory or overheating. However, without more detailed information about the environment (OS version, CPU architecture, etc.), reproducing the issue exactly as described may prove challenging.",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears that the issue is related to a system crash or hang on a Linux system running Fedora, specifically with kernel version 2.6.35.11-83.fc14.x86_64. The system configuration and hardware details are provided in the bug report.

To reproduce the bug, the following commands or test cases can be attempted:

1. **System Stress Test**: Run a system stress test using tools like `stress` or `sysbench` to simulate high CPU, memory, and I/O usage.
2. **Disk I/O Test**: Perform disk I/O tests using tools like `dd`, `bonnie++`, or `iozone` to stress the storage subsystem.
3. **Network Traffic Test**: Generate network traffic using tools like `iperf` or `netperf` to test the networking stack.
4. **Kernel Module Loading**: Load and unload kernel modules, such as `e1000e` (Ethernet driver) or `iwl3945` (Wi-Fi driver), to see if it triggers the issue.
5. **Filesystem Test**: Run filesystem tests using tools like `fsck` or `xfs_check` to verify the integrity of the filesystems.
6. **System Reboot**: Reboot the system multiple times to see if the issue is reproducible after a reboot.
7. **Hardware Component Testing**: Test individual hardware components, such as the Ethernet port, Wi-Fi, or USB ports, to isolate the issue.

Some specific commands that can be used to reproduce the bug are:

* `stress -c 4 -m 4 -d 4` (run stress test with 4 CPU threads, 4 memory threads, and 4 disk threads)
* `dd if=/dev/zero of=/tmp/test bs=1M count=1024` (write 1GB of zeros to a file on the root filesystem)
* `iperf -c <server_ip> -t 60` (run iperf test for 60 seconds)
* `modprobe -r e1000e; modprobe e1000e` (unload and reload the Ethernet driver)

Note that these are just suggestions, and the actual commands or test cases required to reproduce the bug may vary depending on the specific issue and system configuration.","Based on the provided information, there doesn't seem to be a specific bug described. Instead, it looks like details about system configuration and hardware are provided. To help identify what might be going wrong or how to reproduce an issue, additional context regarding symptoms or error messages would be useful.

However, based on the given hardware and software details, we can suggest some tests that could be relevant for common issues related to the described system:

1. **Check System Logs**: Look into the system logs to identify any errors or warnings.
   ```sh
   journalctl -xe
   ```

2. **Network Issues**:
    Since there is a wireless network adapter (`iwl3945`), you might want to check if there are any issues with it:
    ```sh
    dmesg | grep iwl
    iwconfig
    ```

3. **USB and FireWire Devices**:
   Given the presence of multiple USB controllers, run tests on USB devices.
   ```sh
   lsusb
   ```
   
   For Firewire (`firewire_ohci`):
   ```sh
   dmesg | grep firewire
   ```

4. **Graphics Driver Issues**:
    The system uses `i915`, an Intel graphics driver. You can check for any issues by running:
    ```sh
    sudo modprobe -r i915 && sudo modprobe i915
    ```
   
    Also, check the Xorg logs:
    ```sh
    cat /var/log/Xorg.0.log | grep EE  # Errors
    cat /var/log/Xorg.0.log | grep WW  # Warnings
    ```

5. **Disk and Filesystem Health**:
   Verify the health of your filesystems.
   ```sh
   sudo fsck -n /dev/mapper/vg_dhcp2563-lv_root
   sudo fsck -n /dev/sda1
   sudo fsck -n /dev/mapper/vg_dhcp2563-lv_home
   ```

6. **Audio Issues**:
    Since `HDA Intel` is listed, check for audio-related problems.
    ```sh
    dmesg | grep snd
    aplay -l  # List available sound cards and devices
    speaker-test -c2 -twav  # Test playback with two channels (left and right)
    ```

If you can provide more specific details about the issue or error messages, further targeted tests could be suggested.","The provided information does not contain a clear bug description or any specific issue that needs to be reproduced. Instead, it includes memory mappings of a running process (likely `mdhcp2563`), system hardware details, and filesystem information for a Fedora-based system. 

However, if we assume that there might be an underlying bug in the behavior of this system or a specific application running on it, here are some generic steps you can take to identify potential commands or test cases for reproducing the issue:

### System Information Analysis
1. **Identify Running Processes:**
   - Use `ps aux` or `top` to list all running processes and see if there's any unusual activity.
   - Look for high CPU/memory usage that could indicate a bug.

2. **Check Logs:**
   - Review system logs (`/var/log/messages`, `/var/log/syslog`) using commands like `journalctl` to find errors or warnings.
     ```bash
     sudo journalctl -xe
     ```

3. **Hardware Diagnostics:**
   - Run hardware diagnostics tools like `smartctl` for disk health, `memtest86+` for memory testing, and `lspci`/`lsusb` to check PCI and USB devices.

### Application-Specific Analysis
Assuming there's a specific application causing issues (e.g., `mdhcp2563`):

1. **Run the Application with Debugging:**
   - Use tools like `strace`, `gdb`, or the applicationâs own debugging mode to trace its behavior.
     ```bash
     strace -f ./mdhcp2563
     gdb ./mdhcp2563
     ```

2. **Reproduce Specific Conditions:**
   - Identify conditions under which the bug occurs (e.g., high load, specific user actions).
   - Create a test script that mimics those conditions.
     ```bash
     # Example: Simulate high CPU usage
     stress --cpu 4 --timeout 60s
     
     # Example: Run application with simulated network issues
     sudo tc qdisc add dev eth0 root netem loss 10%
     ./mdhcp2563
     sudo tc qdisc del dev eth0 root
     ```

3. **Check for Resource Leaks:**
   - Use tools like `valgrind` to check for memory leaks.
     ```bash
     valgrind --leak-check=full ./mdhcp2563
     ```

4. **Performance Monitoring:**
   - Use performance monitoring tools like `perf`, `dstat`, or `vmstat` to monitor the system during application execution.

### Filesystem Analysis
1. **Check Disk Usage and Health:**
   - Run `df -h` to check disk usage.
     ```bash
     df -h
     ```
   
2. **Run fsck on Unmounted Partitions:**
   - Check filesystem integrity with `fsck`.
     ```bash
     sudo umount /dev/sda1
     sudo fsck /dev/sda1
     ```

### Network Analysis
If the issue is related to network performance or connectivity:

1. **Network Diagnostics:**
   - Use tools like `netstat`, `ss`, `ping`, `traceroute` to check network health.
     ```bash
     netstat -tuln
     ss -tuln
     ping google.com
     traceroute google.com
     ```

2. **Network Monitoring:**
   - Use `iftop`, `nload`, or `tcpdump` to monitor network traffic.
     ```bash
     sudo iftop
     sudo nload
     sudo tcpdump -i eth0
     ```

### General Testing Strategy
- **Reproduce in a Controlled Environment:**
  - Set up a virtual machine with the same system configuration and try to reproduce the issue.

- **Document Steps Precisely:**
  - Clearly document every step taken, including any changes made to the system or application.

If you have more specific details about the bug (e.g., error messages, unusual behavior), please provide them for a more targeted approach.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,df -k,df -k,df -k,,
,,,,,,,,,,,,,,,,"```bash
useradd justin
groupadd wheel
usermod -aG wheel justin
groups justin
getent group wheel
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
yum install coreutils-8.12-2.fc16.i686 pam-1.1.3-6
rm -f /etc/pam.d/postlogin
grep postlogin /etc/pam.d/su
su
```
Note: The above commands assume a Fedora 16 system with yum package manager and may need to be adapted for other systems or package managers. Additionally, the `su` command will likely require root privileges to run successfully.",None,None,,
,,,,,,,,,,,,,,,,df,df,df,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
strace -e trace=lstat,getxattr,lgetxattr ls -l /media
```","strace -e trace=lstat,getxattr,lgetxattr ls -l /media","strace -e trace=lstat,getxattr,lgetxattr ls -l /media",,
,,,,,,,,,,,,,,,,date +%d%b%y %T,date +%d%b%y\ %T,date +%d%b%y %T,,
,,,,,,,,,,,,,,,,"```bash
useradd user1
useradd user2
su - user1
gnome-terminal # or any other terminal program
su - user2
screen
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"LANG=de df -h | head -n 2
df -h | head -n 2 
df | head -n 2","LANG=CC df -h | head -n 2  
LANG=de_DE df -h | head -n 2",None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, we need to analyze the given stacktrace and understand what might have led to this error. The stacktrace appears to be related to a crash in the `/bin/sleep` command, which is a simple utility that pauses execution for a specified amount of time.

Here are some potential steps or test cases to reproduce the bug:

1. **Run the sleep command with specific arguments**: Try running the `sleep` command with various arguments to see if it crashes. For example:
   ```
   sleep 100
   ```

2. **Use gdb to debug the sleep command**: Since the stacktrace mentions `gdb`, try using it to debug the `sleep` command and see if you can reproduce the crash.
   ```
   gdb -batch -ex set debug-file-directory /usr/lib/debug:/var/cache/abrt-di/usr/lib/debug -ex file /bin/sleep -ex core-file ./coredump -ex thread apply all backtrace 2048 full -ex info sharedlib -ex print (char*)__abort_msg -ex print (char*)__glib_assert_msg -ex info registers -ex disassemble
   ```

3. **Check the locale settings**: The stacktrace mentions `/usr/lib/locale/locale-archive`, which suggests that locale settings might be relevant to the crash. Try running the `sleep` command with different locale settings.
   ```
   LC_ALL=C sleep 100
   ```

4. **Run the sleep command with strace or ltrace**: These tools can help you understand what system calls or library functions are being called when the `sleep` command crashes.
   ```
   strace sleep 100
   ltrace sleep 100
   ```

5. **Check for memory corruption or allocation issues**: The presence of `[heap]` and `[stack]` in the stacktrace suggests that memory allocation or corruption might be involved. Try running the `sleep` command with tools like `valgrind` to detect any memory-related issues.
   ```
   valgrind sleep 100
   ```

By trying these test cases, you may be able to reproduce the bug and gain a better understanding of what's causing it. However, without more information about the specific environment and system where the bug occurred, it's difficult to provide more targeted suggestions.","Based on the provided crash report and stack trace, it seems like a program (specifically `sleep`) crashed due to an unhandled signal, most likely SIGABRT (abort). Here's how you might approach reproducing this issue:

### Commands or Test Cases

1. **Run `sleep` with a specific duration**:
   ```bash
   sleep 5 &
   ```
   This runs the `sleep` command for 5 seconds in the background.

2. **Induce an abort within the running `sleep` process**:
   - If you can control the source code or have access to instrumentation that could cause the abort, you might want to simulate this.
   
3. **Directly trigger a SIGABRT signal**:
   ```bash
   kill -SIGABRT <PID>
   ```
   Where `<PID>` is the process ID of the `sleep` command from step 1.

4. **Reproduce with Valgrind or GDB**:
   You can also use tools like Valgrind to catch memory errors, which might lead to an abort signal.
   
   ```bash
   valgrind --leak-check=full sleep 5 &
   ```
   Or you could directly run it under `gdb` for debugging purposes:

   ```bash
   gdb -ex ""run"" /bin/sleep 5
   ```

### Steps to Take

1. **Run the `sleep` command**:
    ```bash
    sleep 5 &
    ```

2. **Identify the PID of the running `sleep` process** using `ps`, `pgrep`, or `pidof` commands:
   
    ```bash
    pgrep -f ""sleep 5""
    ```
   This will give you the PID.

3. **Trigger a SIGABRT signal on the `sleep` process**:

    ```bash
    kill -SIGABRT <PID>
    ```

4. **Alternatively**, if you suspect that this is due to specific conditions, you can run `sleep` under `gdb` and induce an error by setting breakpoints or using conditional breakpoints.

   ```bash
   gdb /bin/sleep
   (gdb) run 5
   ```
   
   Once it's running, you might induce a crash if there are known problematic areas in the code.

### Conclusion

The main goal is to understand under what conditions the `sleep` command aborts. By inducing an explicit SIGABRT signal or by using debugging tools like GDB and Valgrind, you can closely monitor the behavior of the process and identify potential issues that lead to the crash.","The given text does not appear to be a bug description but rather output from an automated debugging process that occurred after a program crash. Specifically, it seems like the `abrt` (Automatic Bug Reporting Tool) system on a Linux machine has caught a segmentation fault or some other error in `/bin/sleep`, and it's attempting to generate a backtrace for diagnostic purposes.

Based on the information provided, there is no direct bug description that would allow us to reproduce the issue. However, if we assume that the goal here is to understand what might have caused the crash of `sleep` (which typically does not crash under normal conditions), and in turn how one could go about reproducing such a scenario, it could be related to:

1. **Memory Corruption**: If there's some other program on the same system writing to memory areas that `/bin/sleep` is using.

2. **Kernel Bug or Kernel Module Issue**: There might be an issue with the kernel itself or one of its modules which affects `sleep`.

3. **Hardware Faults**: Sometimes hardware problems can cause software to behave erratically.

4. **Corrupted System Libraries**: If a system library file (like `libc-2.13.90.so` in your maps) is corrupted, it might cause programs that use this library to crash.

5. **Software Interference**: Another process or software might be interfering with the execution of `/bin/sleep`.

### Reproducing the Bug

To reproduce a bug, you need to understand what's causing the issue. Here are some steps and commands you could try:

#### Step 1: Verify the Environment
Ensure that your environment is similar to where the crash was detected:
- Check the kernel version.
- List loaded modules and their versions.
- Check for any unusual processes or software.

```bash
uname -a
lsmod
ps aux
```

#### Step 2: Try to Recreate Stressful Conditions
If you suspect memory corruption, try running stress tests on your system:
- Use `stress-ng` to put load on the CPU and memory.
- Fill up the disk space to see if that triggers issues.

```bash
sudo apt-get install stress-ng # for Debian-based systems
stress-ng --cpu 4 --vm 2 --timeout 60s
```

#### Step 3: Check Hardware Health
Run diagnostic tools to check the health of your hardware:
- Use `smartctl` to check the status of hard drives.
- Use memtest86+ to test RAM.

```bash
sudo smartctl -a /dev/sda
memtest86+
```

#### Step 4: Verify System Libraries
Ensure that all system libraries are intact and correctly installed:
- Check for any corrupted files using `dpkg` or `rpm`.
- Reinstall core system packages if necessary.

```bash
sudo dpkg --verify # for Debian-based systems
sudo rpm -Va # for Red Hat-based systems

# Example of reinstalling libc
sudo apt-get install --reinstall libc6 # for Debian-based systems
```

#### Step 5: Monitor System Logs
Check system logs to see if there are any related error messages:
- Use `dmesg` or check `/var/log/syslog`.

```bash
dmesg | less
less /var/log/syslog
```

### Summary

To reproduce the bug, you need a hypothesis of what could be causing the issue and then create an environment that matches the conditions under which the crash occurred. The commands listed above are just starting points to help diagnose potential issues on your system.

If none of these steps lead to reproducing the issue, it might be necessary to gather more detailed information about the system state at the time of the crash, such as additional logs or a core dump analysis if available.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 5m,"Based on the provided backtrace and context, it appears that a segmentation fault occurs within the `sleep` command when used with a long duration (in this case, 5 minutes).

### Commands to Reproduce the Bug

To attempt to reproduce the issue, you could try running the following commands:

1. **Basic Command**:
   ```sh
   sleep 5m
   ```
   
2. **Alternative Durations and Variations**:
   - Try shorter durations:
     ```sh
     sleep 10s
     sleep 300
     sleep 5
     ```
   - Try using the `sleep` command in a loop to see if it consistently fails after multiple iterations:
     ```sh
     while true; do sleep 5m; done
     ```

### Test Cases

Below are some potential test cases that you can use:

1. **Single Invocation with Different Durations**:
   - Short duration:
     ```sh
     timeout 10s bash -c 'sleep 300'
     ```
   - Long duration (which may not complete due to timeout):
     ```sh
     timeout 6m bash -c 'sleep 5m'
     ```

2. **Multiple Iterations**:
   - Run a loop with multiple sleep commands:
     ```sh
     for i in {1..10}; do sleep 300; done
     ```
   
3. **Using `strace` to Debug System Calls**:
   - Use strace to debug the system calls made by the sleep command.
     ```sh
     strace -o sleep_trace.txt sleep 5m
     ```
     This will create a file named `sleep_trace.txt` with detailed information about the system calls.

### Environment and Context

Ensure you document your environment (operating system, version of glibc, etc.) to reproduce the exact context under which this issue occurs. For instance:

- **Operating System**: Linux
- **Glibc Version**:
  ```sh
  ldd --version | head -n1
  ```
  
### Expected Outcome

If the bug is reproducible, you should observe a segmentation fault when running `sleep` with a long duration.

By executing these commands and test cases, you can gather more data to diagnose why the segmentation fault occurs in this specific scenario.","The provided stack trace indicates that a segmentation fault (SIGSEGV) occurred in the `__nanosleep_nocancel` function when `/bin/sleep 5m` was executed. However, this is quite unusual because the `sleep` command typically does not encounter segmentation faults under normal circumstances.

Here are some steps you can take to try and reproduce the issue:

1. **Re-run the original command:**
   ```
   /bin/sleep 5m
   ```
   Ensure that the machine has enough resources (RAM, CPU) available when running this command to rule out resource exhaustion issues.

2. **Try different sleep durations:**
   It might be worth testing various sleep durations to see if itâs consistent with longer periods:
   ```
   /bin/sleep 10m
   /bin/sleep 30s
   ```

3. **Test on a clean environment:**
   Run the `sleep` command in a fresh virtual machine or container to rule out any specific system configuration issues.

4. **Check for memory corruption or hardware failures:**
   - Use tools like `memtest86+` to check your RAM for errors.
   - Utilize utilities such as `dmesg | grep hwerr` and `lspci -v` to look for reported hardware errors.

5. **Inspect the binary itself:**
   Check if `/bin/sleep` is corrupted or modified:
   ```
   md5sum /bin/sleep
   ```
   Compare this with a known good version of the `sleep` binary from another machine or a trusted source (e.g., official package repositories).

6. **Update your system:**
   Ensure that all packages, including kernel and core libraries like glibc, are up-to-date:
   ```
   sudo apt-get update && sudo apt-get upgrade  # for Debian/Ubuntu
   sudo yum update                             # for CentOS/RHEL
   ```

7. **Check for conflicting environment variables or configurations:**
   Sometimes, environment variables can affect binary behavior; try running the command with a clean environment:
   ```
   env -i /bin/sleep 5m
   ```

8. **Test on different architectures:**
   If possible, test the `sleep` command on different hardware architectures (e.g., x86_64, i386) to see if itâs architecture-specific.

9. **Use a debugger to get more insight:**
   You can run `/bin/sleep 5m` under GDB to inspect what happens leading up to the crash:
   ```
   gdb /bin/sleep
   (gdb) run 5m
   ```

10. **Check for security software interference:**
    If there are any antivirus or intrusion detection systems running, temporarily disable them and see if that resolves the issue.

If none of these steps help in reproducing the bug, it could be a very rare, possibly one-off incident or an extremely environment-specific problem. In such cases, gathering more details about the system configuration might be required for further investigation.",,
,,,,,,,,,,,,,,,,"su - 
(then enter the root password when prompted)","su -
# Enter root password when prompted",None,,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,"mv XML-Feed/ XML-Feed.old 

Note: The actual reproduction may require more specific conditions as the provided backtrace and other details suggest a complex issue possibly related to file system, permissions, or library interactions rather than a straightforward command execution. However, based on the information given in the bug description, the exact command that led to the crash is provided above. 

For a more general test case considering the coreutils version and potential file system issues:
```bash
mkdir XML-Feed
touch XML-Feed/foo
mv XML-Feed/ XML-Feed.old
```
This test case attempts to mimic the conditions under which the bug was reported, including the directory and file setup before executing the `mv` command.","touch foo
mv foo bar","touch foo  
mv foo bar",,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 100,None,None,,
,,,,,,,,,,,,,,,,df,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file
mkdir t
ln -s -t t file 
ls -l t
ls -L t
```
Alternatively, as also mentioned in the bug description:
```bash
touch file
mkdir t
ln -s file t
ls -l t
ls -L t
```","touch file
mkdir t
ln -s -t t file  
ls -l t
ls -L t","touch file  
mkdir t  
ln -s -t t file  
ls -l t  
ls -L t",,
,,,,,,,,,,,,,,,,"```bash
dd if=/dev/zero bs=1M count=10 of=largefile
cat largefile | dd ibs=100000 count=2 >output1
cat largefile | dd ibs=100000 count=2 >output1
cat largefile | dd ibs=100000 count=2 >output1
dd if=largefile | dd ibs=100000 count=2 >output2
dd if=largefile | dd ibs=100000 count=2 >output2
dd if=largefile | dd ibs=100000 count=2 >output2
```","cat largefile | dd ibs=100000 count=2 >output1
dd if=largefile | dd ibs=100000 count=2 >output2","cat largefile | dd ibs=100000 count=2 >output1
dd if=largefile | dd ibs=100000 count=2 >output2",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sort file | less,sort file | less,sort file | less,,
,,,,,,,,,,,,,,,,"```bash
touch /tmp/foo
su - --command=""/home/spot/gedit-beesu-plugin gedit-beesu-plugin /usr/bin/gedit gedit /tmp/foo""
```
Note: This assumes that `/home/spot/gedit-beesu-plugin` is the correct path to the compiled binary, and that `gedit` is installed on the system. Also, this command should be run on a Fedora 14 (x86_64) system to reproduce the bug.",None,None,,
,,,,,,,,,,,,,,,,"```bash
touch somefile
md5sum -b somefile > somefile.md5
md5sum -c somefile.md5
unix2dos somefile.md5
md5sum -c somefile.md5
```","touch somefile
md5sum -b somefile > somefile.md5
unix2dos somefile.md5
md5sum -c somefile.md5","touch somefile  
md5sum -b somefile > somefile.md5  
unix2dos somefile.md5  
md5sum -c somefile.md5",,
,,,,,,,,,,,,,,,,"service groonga status
service groonga start",None,None,,
,,,,,,,,,,,,,,,,runuser dwalsh,None,None,,
,,,,,,,,,,,,,,,,sort --version,sort --version,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir tests
cd tests
cat > file1
contents of file 1
^C
ln -s file1 symlink1
ls -l
sleep 120 # wait for 2 minutes
cp -Pp file1 file1c
cp -Pp symlink1 symlink1c
ls -l
```","mkdir tests && cd tests && cat > file1 <<EOF
contents of file 1
EOF
ln -s file1 symlink1
sleep 120
cp --no-dereference --preserve=all file1 file1c
cp --no-dereference --preserve=all symlink1 symlink1c
ls -l","mkdir tests && cd tests
cat > file1 <<EOF
contents of file 1
EOF
ln -s file1 symlink1
ls -l
sleep 120
cp -Pp file1 file1c
cp -Pp symlink1 symlink1c
ls -l",,
,,,,,,,,,,,,,,,,date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"sleep 99 

Note: The provided bug description does not contain enough information to determine the exact cause of the crash, as it appears to be related to a signal being sent to the sleep process rather than an issue with the coreutils package itself. However, based on the cmdline provided in the bug description, the command that was being executed when the crash occurred can be reproduced with the above command.",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,expr 0 + 1,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""aaa.1\naaaa.1"" | sort -V
```","sort -V
aaa.1
aaaa.1
^D","echo -e ""aaa.1\naaaa.1"" | sort -V",,
,,,,,,,,,,,,,,,,LC_ALL=fr_FR locale abmon | tr ';' '\n' | LC_ALL=en_US.utf8 sort -M,LC_ALL=fr_FR locale abmon | tr ';' '\n' | LC_ALL=en_US.utf8 sort -M,LC_ALL=fr_FR locale abmon | tr ';' '\n' | LC_ALL=en_US.utf8 sort -M,,
,,,,,,,,,,,,,,,,sleep 1000,None,None,,
,,,,,,,,,,,,,,,,ls --color=auto -l,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""tmpfs  /tmp  tmpfs  defaults  0 0"" >> /etc/fstab
echo ""/dev/sda2 /usr ext4 defaults 0 0"" >> /etc/fstab
reboot
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
export LANG=C
ls -l
export LANG=en_US.UTF-8
ls -l
```",export LANG=C; ls -l; export LANG=en_US.UTF-8; ls -l,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,cp --preserve=xattr aaa.txt bbb.txt,# cp --preserve=xattr aaa.txt  bbb.txt,None,,
,,,,,,,,,,,,,,,,cut -d [ -s -f 2,cut -d [ -s -f 2,None,,
,,,,,,,,,,,,,,,,None,"tr , ' '",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 10000,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/test
chown user_a:tty /tmp/test
chmod 0620 /tmp/test
su -c ""mesg n"" user_a
sudo chown root:root /dev/pts/0
sudo chmod 0620 /dev/pts/0
su -c ""who -wu"" user_a
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C ls -ld /
LC_ALL=en_US ls -ld /
LC_ALL=en_CA ls -ld /
LC_ALL=de_DE ls -ld /
LC_ALL=da_DK ls -ld /
```","LC_ALL=C ls -ld /
LC_ALL=en_US ls -ld /
LC_ALL=en_CA ls -ld /
LC_ALL=de_DE ls -ld /
LC_ALL=da_DK ls -ld /",None,,
,,,,,,,,,,,,,,,,sleep 1260,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sha256sum Fedora-13-Alpha-x86_64-DVD.iso,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
# Create a backup directory and some user data
mkdir -p backup/home/olduser
touch backup/home/olduser/.profile

# Add a new user with an old uid/gid (e.g., 500)
useradd -u 500 -o -m olduser

# Restore the old user data from the backup
cp -r backup/home/olduser /home/

# Switch to the old user account using su
su - olduser
```",None,None,,
,,,,,,,,,,,,,,,,"dd if=/dev/zero count=1 of=/dev/null
dd if=/dev/zero count=1 of=/dev/null >/dev/null
dd if=/dev/zero count=1 of=/dev/null 2>/dev/null
dd if=/dev/zerooooo count=1 of=/dev/null 2>/dev/null 
dd --quiet if=/dev/zerooooo count=1 of=/dev/null","dd if=/dev/zero count=1 of=/dev/null
dd if=/dev/zero count=1 of=/dev/null >/dev/null
dd if=/dev/zero count=1 of=/dev/null 2>/dev/null
dd if=/dev/zerooooo count=1 of=/dev/null 2>/dev/null
dd --quiet if=/dev/zerooooo count=1 of=/dev/null","dd if=/dev/zero count=1 of=/dev/null  
dd if=/dev/zero count=1 of=/dev/null >/dev/null  
dd if=/dev/zero count=1 of=/dev/null 2>/dev/null  
dd if=/dev/zerooooo count=1 of=/dev/null 2>/dev/null  
dd --quiet if=/dev/zerooooo count=1 of=/dev/null",,
,,,,,,,,,,,,,,,,"```bash
./configure --without-selinux
make
make check
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""Scale=100"" > /etc/libc.conf # or equivalent to restrict libgmp usage
expr 4951760154835678088235319297 + 0
```",expr 4951760154835678088235319297 + 0,expr 4951760154835678088235319297 + 0,,
,,,,,,,,,,,,,,,,dd ibs=0x100,dd ibs=0x100,dd ibs=0x100,,
,,,,,,,,,,,,,,,,tail -F 2009_12_14.stderrout.log,tail -F 2009_12_14.stderrout.log,None,,
,,,,,,,,,,,,,,,,"_POSIX2_VERSION=199209 sort +0.1 /etc/passwd
info sort | grep _POSIX2_VERSION","_POSIX2_VERSION=199209 sort +0.1 /etc/passwd
info sort

None

The first command demonstrates that the feature works as expected, but there is no explicit command provided to check the documentation for the presence of `_POSIX2_VERSION`. The description implies a manual search within the `info` output which does not qualify as an automated test case or reproducible command.",None,,
,,,,,,,,,,,,,,,,"Based on the provided bug description, the following steps and commands can be used to reproduce the bug:

### Reproduction Steps:

1. **Build and Install Coreutils**: Ensure that you have coreutils built and installed on your system. The version of coreutils being tested appears to be using `mke2fs` version 1.41.9, but this detail might not be crucial for reproducing the bug related to SELinux.

2. **Run the Specific Test Case**:
   - The test case in question seems to be part of the coreutils test suite, specifically `misc/selinux`.
   - To reproduce the bug, navigate to the coreutils build directory (e.g., `/usr/src/rpm/BUILD/coreutils-8.2/tests` as shown in the log) and execute the test directly if possible.

3. **Execute Test with SELinux Enabled**:
   - Given that the issue seems related to SELinux (`misc/selinux` test), ensure that SELinux is enabled on your system.
   - You can check the status of SELinux by running `sestatus`. If it's not enabled, you may need to enable it and reboot your system.

4. **Required Commands**:
   - The log shows several commands being executed as part of the test, including:
     ```
     dd if=/dev/zero of=blob bs=8192 count=200
     mkdir mnt
     mkfs -t ext2 -F blob
     mount -oloop,nouser_xattr blob mnt
     setfattr -n user.foo -v bar a
     getfattr -d a
     ```
   - These commands create a file system image, mount it, attempt to set an extended attribute (`setfattr`), and then retrieve attributes (`getfattr`).

5. **Simulate Test Environment**:
   - The test seems to be checking for the ability to set extended attributes on a file system that does not support user xattrs (`nouser_xattr` mount option).
   - Ensure your test environment matches these conditions.

### Notes:

- The failure in the provided log is due to the inability to set an extended attribute (`setfattr: a: Operation not supported`) which leads to the test being skipped and ultimately results in an exit code of 77.
- The actual bug reproduction might require specific conditions related to SELinux policies or the file system's support for extended attributes, as indicated by the `nouser_xattr` mount option.

To accurately reproduce the bug, one should focus on the interaction between coreutils tests (specifically those related to SELinux and extended attributes) and the system's configuration regarding SELinux and file system capabilities.","Based on the provided log and error messages, it appears that a test case in the `cp/cp-mv-enotsup-xattr` script is failing due to an inability to set an extended attribute (xattr) on a file system mounted with specific options.

### Steps to Reproduce the Bug

1. **Create a Loopback Filesystem:**
   - Create a loopback file (`blob`) and format it as `ext2`.
   ```bash
   dd if=/dev/zero of=blob bs=8192 count=200
   mkfs -t ext2 -F blob
   ```

2. **Mount the Filesystem with Specific Options:**
   - Mount the loopback file with `nouser_xattr` option.
   ```bash
   mkdir mnt
   mount -oloop,nouser_xattr blob mnt
   ```

3. **Set an Extended Attribute (xattr):**
   - Attempt to set an extended attribute on a file in the mounted filesystem.
   ```bash
   touch mnt/a  # Create a test file
   xattr_name=user.foo
   xattr_value=bar
   setfattr -n ""$xattr_name"" -v ""$xattr_value"" mnt/a
   ```

4. **Check for Error:**
   - If the `setfattr` command fails with an error message like:
     ```
     setfattr: a: Operation not supported
     ```

### Expected Outcome vs Actual Outcome

- **Expected:** The extended attribute (`user.foo=bar`) should be successfully set on the file.
- **Actual:** The test case failed because `setfattr` returned an ""Operation not supported"" error, likely due to the `nouser_xattr` mount option.

### Explanation of Failure

The failure is expected if the filesystem is mounted with the `nouser_xattr` option. This option disables user extended attributes on the file system, and thus attempting to set such an attribute will result in an operation not supported error.

If this test case aims to check for a specific behavior related to the support (or lack thereof) of extended attributes when certain mount options are used, then it might be functioning as intended. However, if the intention is that extended attributes should still work despite the `nouser_xattr` option, there may indeed be a bug.

### Conclusion

The test case fails because the `setfattr` command does not support setting xattrs when the filesystem is mounted with `nouser_xattr`. If this behavior is expected and intended by the developers, then it should be documented as a known limitation rather than a failure. Otherwise, further investigation into whether extended attributes should still work under these conditions would be required.

If you need to debug further or alter the test case expectations based on your specific use-case requirements, consider removing the `nouser_xattr` option and testing again:

```bash
mount -oloop blob mnt  # Without nouser_xattr
setfattr -n user.foo -v bar mnt/a
```

This should allow setting extended attributes if the filesystem supports them.","Based on the provided output, it looks like a test case within the Coreutils package is failing because the system does not support extended attributes (`xattr`) on the temporary filesystem created for testing purposes.

Here are the essential steps and commands you can use to try to reproduce this issue:

1. **Prepare the environment:**
   - Ensure that you have root access, as the test requires it.
   - Make sure `coreutils` (or at least its source code) is installed on your system.
   - Install necessary tools (`dd`, `mkfs`, `mount`, `getfattr`, and `setfattr`).

2. **Create a temporary file to act as a filesystem:**
   ```bash
   dd if=/dev/zero of=blob bs=8192 count=200
   ```

3. **Format the file into an ext2 filesystem:**
   ```bash
   mkfs -t ext2 -F blob
   ```

4. **Mount the filesystem in a loopback device:**
   ```bash
   mount -oloop,nouser_xattr blob mnt
   ```

5. **Try setting an extended attribute:**
   ```bash
   touch mnt/a
   setfattr -n user.foo -v bar mnt/a
   ```

You should expect the `setfattr` command to fail with an ""Operation not supported"" error if your system or filesystem does not support `xattr`.

6. **Clean up:**
   ```bash
   umount mnt
   rm blob
   ```

In the provided output, you can see that the test case explicitly checks for this failure and skips the subsequent tests because of it.

If `setfattr` succeeds without any errors, then your environment might support extended attributes on ext2 filesystems with the given mount options. In that case, the issue could be specific to the configuration or capabilities of the system where the original test was run. 

The exit code 77 indicates that the test case was skipped (not a failure), which is expected in this scenario when `xattr` operations are not supported.",,
,,,,,,,,,,,,,,,,"```bash
mkdir newdir
touch newdir/file1 newdir/file2
setfattr -n user.test -v test newdir/file1
mv newdir/ /mnt/
```","mkdir -p newdir/mnt
touch newdir/file{1..100}
mount -t vfat none mnt  # assuming 'none' is a placeholder for the actual device path
mv newdir/ mnt/",mv /home/myphotos /mnt/vfat-usbstick,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"Based on the provided bug description, the following steps are required to reproduce the bug:

### Test Case 1: Reproduce the Bug with Bash Shell

1. **Create a new file**: Create a new file named `oops` in the `/data/chunks1/db/` directory.
2. **Run `ls -l` command**: Run the `ls -l` command to list the files in the current directory, including the newly created `oops` file.
3. **Copy and paste the output**: Copy the entire line containing the `oops` file information from the `ls -l` output.
4. **Paste into terminal**: Paste the copied text into a new terminal window.
5. **Verify file damage**: Run the `ll /data/chunks1/db/` command to verify that the `oops` file has been truncated (i.e., its size is now 0).

Example commands:
```bash
# Create a new file named oops
touch /data/chunks1/db/oops

# Run ls -l command
ls -l

# Copy and paste the output into a new terminal window
# The copied text should look something like this: ""rw-rw-r-- 1 user user 27 Nov 3 16:42 oops -> /data/chunks1/db/oops""

# Paste into terminal and press enter
# This will truncate the oops file

# Verify file damage
ll /data/chunks1/db/
```

### Test Case 2: Reproduce the Bug with Tcsh Shell (Optional)

If you want to test the bug with the tcsh shell, follow these steps:

1. **Switch to tcsh shell**: Switch to the tcsh shell by running `tcsh`.
2. **Repeat steps from Test Case 1**: Repeat the same steps as in Test Case 1 to reproduce the bug.

Note: The bug is not specific to a particular shell, and the behavior should be similar across different shells. However, if you want to test it with tcsh or another shell, you can follow these additional steps.

### Additional Notes

* Make sure to run these tests in a non-production environment to avoid accidentally damaging important files.
* Be cautious when copying and pasting text into a terminal window, as this can lead to unintended consequences.","To reproduce the issue described in the discussion, you need to simulate the scenario where copying and pasting the output of `ls -l` inadvertently truncates files due to the presence of the redirect character (`>`). Here are the steps to recreate this situation:

### Steps to Reproduce

1. **Create Test Files:**
   ```bash
   mkdir test_dir
   cd test_dir
   touch file1.txt file2.txt file3.txt
   echo ""This is a test"" > file1.txt
   ```

2. **List Directory Contents in Long Format:**
   ```bash
   ls -l
   ```
   The output will look something like this:
   ```
   total 0
   -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt
   ```

3. **Copy and Paste the Output of `ls -l`:**
   Copy the output of the `ls -l` command, which might look like:
   ```
   total 0
   -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt
   ```

4. **Paste the Output and Add `>` to Redirect Input (Simulating User Error):**
   Accidentally paste the copied output into a terminal where you inadvertently add a redirection operator (`>`):
   ```bash
   total 0 -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt > newfile.txt
   ```

### Expected Outcome

If the above command is executed as shown, it will attempt to redirect all of the text into `newfile.txt`. If any files mentioned in the pasted output already exist, they might be truncated or overwritten if the redirection operator (`>`) is part of an erroneous command. For example:

- If `newfile.txt` does not exist and is created by the redirection, it will contain all the text from the copied `ls -l` output.
- If any files mentioned in the pasted content already exist (like `file1.txt`, `file2.txt`, or `file3.txt`) and are mistakenly redirected into, they could be truncated.

### Test Cases

Here are specific test cases to verify this behavior:

1. **Test Case 1: Redirecting Output to a New File**
   ```bash
   total 0 -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt > newfile.txt
   ```
   Expected output:
   ```bash
   cat newfile.txt
   total 0 -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt
   ```

2. **Test Case 2: Redirecting Output to an Existing File**
   ```bash
   total 0 -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt > file1.txt
   ```
   Expected output:
   ```bash
   cat file1.txt
   total 0 -rw-r--r-- 1 user group 13 Nov  3 16:45 file1.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file2.txt -rw-r--r-- 1 user group 0 Nov  3 16:45 file3.txt
   ```

### Conclusion

The issue arises from the accidental inclusion of a redirect operator (`>`) when pasting the output of `ls -l`. This can inadvertently overwrite or truncate files, leading to data loss. To mitigate this risk, users should be cautious and aware of what they are copying and pasting into their terminal sessions.

### Mitigation

- **Enabling Shell Check**: Some shells have options like `set -o nounset` which could help prevent such accidental overwrites.
- **Using Alternative Redirection Characters**: Use alternative characters in the output to avoid confusion, e.g., using an arrow symbol (â) instead of (`>`).
  
By simulating these steps and test cases, you can clearly demonstrate how user error can lead to unintended file truncation or data loss. This behavior highlights the importance of careful handling when copying and pasting terminal outputs. 

### Submission

To submit this issue for further discussion or bug tracking, create a detailed report with these steps and expected outcomes in an appropriate bug tracker or community forum. Include the context from the previous discussions to provide full context.","To reproduce the issue described, you would need to perform the following steps:

1. **Create some sample files**:
   First, create a few sample files in your directory for demonstration purposes.
   
   ```bash
   touch file1.txt file2.txt file3.txt
   ```

2. **Run `ls -l` and copy its output**:
   Use the `ls -l` command to list the details of the files in your directory, then copy its output (including the lines starting with `-rw-r--r--` or similar permissions).
   
   ```bash
   ls -l
   ```

3. **Paste the copied text and add a redirect character**:
   Paste the copied `ls -l` output into your terminal followed by a `>` and a filename. This simulates the user mistake of copying an entire line from `ls -l` output (which includes the file name) and accidentally adding a redirect operator.
   
   ```bash
   -rw-r--r-- 1 username groupname 0 Nov 3 16:42 file1.txt > temp.txt
   ```

4. **Check the result**:
   After running the command in step 3, check the contents and size of `temp.txt`. It should be an empty file with zero bytes (or the content of any previously existing `file1.txt` if it was not empty).
   
   ```bash
   ls -l temp.txt
   cat temp.txt
   ```

5. **Verify that the original file is empty or truncated**:
   Check the contents and size of the original file (`file1.txt` in this case). It should be an empty file with zero bytes, indicating that it has been truncated.
   
   ```bash
   ls -l file1.txt
   cat file1.txt
   ```

By following these steps, you can reproduce the issue where copying `ls -l` output and accidentally including a `>` operator results in the truncation or overwriting of files.

### Additional Steps to Test `noclobber`

To test if setting `noclobber` option protects against this:

1. **Enable noclobber**:
   Set the `noclobber` option in your current shell session.
   
   ```bash
   set -o noclobber
   ```

2. **Repeat step 3 and observe the behavior**:
   Try to repeat the command from step 3 again with `noclobber` enabled.
   
   ```bash
   -rw-r--r-- 1 username groupname 0 Nov 3 16:42 file1.txt > temp.txt
   ```

3. **Check if the operation was prevented**:
   With `noclobber`, the shell should prevent overwriting an existing file and report an error.

### Notes

- The problem is not with `ls` itself, but with how the output is misinterpreted when pasted into a command line.
- The `noclobber` feature is a safeguard that can help prevent accidental data loss by preventing files from being overwritten unless explicitly specified. However, it may affect certain scripts that rely on file overwriting behavior.
- While this issue might be considered user error by some, the suggestion to use `noclobber` or similar protection mechanisms provides a way to mitigate the risk of such errors in an environment where accidental command execution is possible.

### Reporting the Issue

If you wish to report this as a feature request in Fedora Bugzilla, here's a suggested outline for the bug report:

- **Summary**: Suggestion: Use non-destructive character in `ls -l` output
- **Description**: The current behavior of `ls -l` can lead to accidental data loss when its output is copied and pasted into command lines. A suggestion to use a non-destructive character that visually resembles the `>` symbol could help prevent such issues.
- **Reproduction Steps**: Follow the steps outlined above to demonstrate how the issue occurs.
- **Expected Behavior**: The `ls -l` command should use a non-destructive character (e.g., a UTF8 character similar to `>`) in its output to avoid unintended file truncation or overwriting when copied and pasted into commands.
- **Actual Behavior**: The current behavior leads to accidental data loss due to the destructive nature of the `>` operator.

This detailed report can help convey the issue clearly and provide context for why a change might be beneficial.",,
,,,,,,,,,,,,,,,,su -,None,su -,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"touch he\'ll
rm -i he\'ll","touch he\'ll
rm -i he\'ll","touch he\'ll  
rm -i he\'ll",,
,,,,,,,,,,,,,,,,"```bash
for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done
```","for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done","for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done",,
,,,,,,,,,,,,,,,,"```bash
mkdir ls_73_dir
mkdir ls_73_dir/ls_73_dir2
ln -s ../ls_73_dir ls_73_dir/ls_73_dir2/ls_73_link
ls -RL ls_73_dir
echo $?
```","mkdir $PWD/ls_73_dir
mkdir $PWD/ls_73_dir/ls_73_dir2
ln -s $PWD/ls_73_dir $PWD/ls_73_dir/ls_73_dir2/ls_73_link
ls -RL ls_73_dir","mkdir $PWD/ls_73_dir
mkdir $PWD/ls_73_dir/ls_73_dir2
ln -s $PWD/ls_73_dir $PWD/ls_73_dir/ls_73_dir2/ls_73_link
ls -RL ls_73_dir",,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /var/lib/mock/fedora-10-x86_64/root/dev
touch /var/lib/mock/fedora-10-x86_64/root/dev/ptmx
chcon --reference=/dev/ptmx /var/lib/mock/fedora-10-x86_64/root/dev/ptmx
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir A
chmod 777 A
ln -s nonexistingfile A/xxx
ls -RLi A 2> /dev/null
rm -rf A
```","mkdir A
chmod 777 A
ln -s nonexistingfile A/xxx
ls -RLi A 2> /dev/null
rm -rf A","mkdir A  
chmod 777 A  
ln -s nonexistingfile A/xxx  
ls -RLi A 2> /dev/null  
rm -rf A",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"ls -lZ ./custom-policy/modules/active/base.pp
ls -Zl ./custom-policy/modules/active/base.pp","ls -lZ ./custom-policy/modules/active/base.pp
ls -Zl ./custom-policy/modules/active/base.pp","ls -lZ ./custom-policy/modules/active/base.pp  
ls -Zl ./custom-policy/modules/active/base.pp",,
,,,,,,,,,,,,,,,,"```bash
export LC_TIME=fr_FR.UTF-8
ln -s /etc/cups/ppd/s20.ppd 4a42141e3eca7
ln -s /etc/cups/ppd/s20.ppd 4a58a05a3280d
ln -s /etc/cups/ppd/Cups-PDF.ppd 4a783585e8a01
touch -d ""2024-06-24 13:55"" 4a42141e3eca7
touch -d ""2024-07-11 16:23"" 4a58a05a3280d
touch -d ""2024-08-04 15:20"" 4a783585e8a01
ls -l

export LC_TIME=fr_BE.UTF-8
ln -s /etc/cups/ppd/s20.ppd 4a42141e3eca7
ln -s /etc/cups/ppd/s20.ppd 4a58a05a3280d
ln -s /etc/cups/ppd/Cups-PDF.ppd 4a783585e8a01
touch -d ""2024-06-24 13:55"" 4a42141e3eca7
touch -d ""2024-07-11 16:23"" 4a58a05a3280d
touch -d ""2024-08-04 15:20"" 4a783585e8a01
ls -l
```",None,LC_TIME=fr_FR.UTF-8 ls -l,,
,,,,,,,,,,,,,,,,"ssh localhost
who
who -m
who --lookup
who -m --lookup",None,"who
who -m
who --lookup
who -m --lookup",,
,,,,,,,,,,,,,,,,"line='**';env echo $line 

or 

line=""**"";echo $line",line='**';env echo $line,line='**';env echo $line,,
,,,,,,,,,,,,,,,,"```bash
setenforce 1
tar xf source.tar.bz2
cd sources
./configure --prefix=/opt/wine && make depend && make
time make install
```",None,time make install,,
,,,,,,,,,,,,,,,,rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586,"rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586

or:
%packages --excludedocs in kickstart

or:
enable %_excludedocs macro in RPM

Since the task requires only the exact command(s) or test case(s), and considering brevity, we can condense it to:

rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586",rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586,,
,,,,,,,,,,,,,,,,"{ echo ""narf.9""; echo ""narf.10""; } | LC_ALL=en_US.UTF-8 sort --version-sort","{ echo ""narf.9""; echo ""narf.10""; } | sort --version-sort","{ echo ""narf.9""; echo ""narf.10""; } | sort --version-sort",,
,,,,,,,,,,,,,,,,man du,None,None,,
,,,,,,,,,,,,,,,,"```bash
umask 0077
mkdir foo
ls -ld foo
mkdir -m 755 bar
ls -ld bar
rm -rf foo bar
mkdir -m 755 -p foo/bar
ls -ld foo foo/bar
```","umask 0077
mkdir -m 755 -p foo/bar
ls -ld foo foo/bar","mkdir -m 755 -p foo/bar
ls -ld foo foo/bar",,
,,,,,,,,,,,,,,,,uname -i,None,None,,
,,,,,,,,,,,,,,,,"```bash
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key 1.2,1.4M
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort --key 1.2b,1.4M
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort --key 1.2,1.4bM
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort -b --key 2.2,2.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort --key 2.2b,2.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort --key 2.3,2.5M
```","printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key 1.2,1.4M
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort --key 1.2b,1.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort -b --key 2.2,2.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort --key 2.2b,2.4M","printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key 1.2,1.4M  
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort -b --key 2.2,2.4M",,
,,,,,,,,,,,,,,,,"```bash
setfacl -m u:user:r file
ls -l file
ls -Z file
```","setfacl -m u:user:r file
ls -l file
ls -Z file","setfacl -m u:user:r file
ls -l file
ls -Z file",,
,,,,,,,,,,,,,,,,"```bash
su - lace
install -o root -g root -m 4755 /bin/true /tmp/test-true
ls -l /tmp/test-true
```","su - lace
install -o root -g root -m 4755 /bin/true /tmp/test-true
ls -l /tmp/test-true","su - lace  
install -o root -g root -m 4755 /bin/true /tmp/test-true  
ls -l /tmp/test-true",,
,,,,,,,,,,,,,,,,"date
uname -a",None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file1
setfattr -n user.test -v test file1
cp file1 file2
getfattr -d file2
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a=x .. && { /bin/pwd; readlink -ev .; }
```",cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a-x .. && { /bin/pwd; readlink -ev .; },cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a=x .. && { /bin/pwd; readlink -ev .; },,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"expr -05 \* 60 \* 60 
date +%:::z 
expr --version",expr -05 \* 60 \* 60,expr -05 \* 60 \* 60,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
ssh -X user@hostname
su
```
Note: Replace ""user"" and ""hostname"" with actual username and hostname. Enter correct password when prompted. 

Alternatively, if you want to create a more specific test case:

```bash
ssh -X waiman@10.10.10.8
echo I'm a user
su
```
Enter correct password when prompted.",None,None,,
,,,,,,,,,,,,,,,,dd if=/dev/zero of=/tmp/tmpdata bs=1M count=6,dd if=/dev/zero of=/tmp/tmpdata bs=1M count=6,dd if=/dev/zero of=/tmp/tmpdata bs=1M count=6,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,runcon --no-reorder,None,None,,
,,,,,,,,,,,,,,,,"```bash
yum install -y coreutils
rm -f /etc/profile.d/colorls.sh /etc/profile.d/colorls.csh
echo ""alias ls='ls --color=tty'"" > /etc/profile.d/colorls.sh
echo ""alias ls='ls --color=tty'"" > /etc/profile.d/colorls.csh
yum remove -y ncurses
tcsh -c ""ls""
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir slow_ls_dir
for i in {1..1000}; do touch ""$i"".gif; done
strace -v /bin/ls --color=auto --sort=version -F -T 0 -ABFbhs slow_ls_dir
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ln -s /newhome/users /users
ls /
```","ln -s /newhome/users /users
ls /","ln -s /newhome/users /users  
ls /",,
,,,,,,,,,,,,,,,,"```bash
ls no_dir
echo $?
```","ls no_dir
echo $?","ls no_dir
echo $?",,
,,,,,,,,,,,,,,,,seq -0.01 0.1 1,seq -0.01 0.1 1,seq -0.01 0.1 1,,
,,,,,,,,,,,,,,,,"ldd /bin/mv | grep attr 
mkdir -p %{_infodir}
/bin/mv -f %{_infodir}/dir.rpmmodify %{_infodir}/dir 

Note: The above commands assume that you have replaced %{_infodir} with the actual infodir path and that dir.rpmmodify exists in that directory. In a real-world scenario, you would need to modify these commands to match your specific environment.

However, a more accurate response based on the provided bug description would be:

None 

This is because the issue arises from a dependency problem in the package installation process (specifically with Anaconda/yum), rather than from running a specific command directly. The actual reproduction of the bug requires setting up a custom spin and attempting to install coreutils without libattr, which involves more complex setup and configuration than can be represented by a simple command or test case.",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""\u0c4d;TELUGU SIGN VIRAMA\n\u0c3f;TELUGU VOWEL SIGN I"" > input.file
uniq input.file
```","echo -e '\u0C4D\n\u0C3F' > input.file
uniq input.file",None,,
,,,,,,,,,,,,,,,,"```bash
LS_COLORS=""no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:do=00;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=00;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.svgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.dz=00;31:*.gz=00;31:*.bz2=00;31:*.tbz2=00;31:*.bz=00;31:*.tz=00;31:*.deb=00;31:*.rpm=00;31:*.jar=00;31:*.rar=00;31:*.ace=00;31:*.zoo=00;31:*.cpio=00;31:*.7z=00;31:*.rz=00;31:*.jpg=00;35:*.jpeg=00;35:*.gif=00;35:*.bmp=00;35:*.pbm=00;35:*.pgm=00;35:*.ppm=00;35:*.tga=00;35:*.xbm=00;35:*.xpm=00;35:*.tif=00;35:*.tiff=00;35:*.png=00;35:*.mng=00;35:*.pcx=00;35:*.mov=00;35:*.mpg=00;35:*.mpeg=00;35:*.m2v=00;35:*.mkv=00;35:*.ogm=00;35:*.mp4=00;35:*.m4v=00;35:*.mp4v=00;35:*.vob=00;35:*.qt=00;35:*.nuv=00;35:*.wmv=00;35:*.asf=00;35:*.rm=00;35:*.rmvb=00;35:*.flc=00;35:*.avi=00;35:*.fli=00;35:*.gl=00;35:*.dl=00;35:*.xcf=00;35:*.xwd=00;35:*.yuv=00;35:*.svg=00;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:"" 
ls --color=auto -l
```","export LS_COLORS='no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:do=00;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=00;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.svgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.dz=00;31:*.gz=00;31:*.bz2=00;31:*.tbz2=00;31:*.bz=00;31:*.tz=00;31:*.deb=00;31:*.rpm=00;31:*.jar=00;31:*.rar=00;31:*.ace=00;31:*.zoo=00;31:*.cpio=00;31:*.7z=00;31:*.rz=00;31:*.jpg=00;35:*.jpeg=00;35:*.gif=00;35:*.bmp=00;35:*.pbm=00;35:*.pgm=00;35:*.ppm=00;35:*.tga=00;35:*.xbm=00;35:*.xpm=00;35:*.tif=00;35:*.tiff=00;35:*.png=00;35:*.mng=00;35:*.pcx=00;35:*.mov=00;35:*.mpg=00;35:*.mpeg=00;35:*.m2v=00;35:*.mkv=00;35:*.ogm=00;35:*.mp4=00;35:*.m4v=00;35:*.mp4v=00;35:*.vob=00;35:*.qt=00;35:*.nuv=00;35:*.wmv=00;35:*.asf=00;35:*.rm=00;35:*.rmvb=00;35:*.flc=00;35:*.avi=00;35:*.fli=00;35:*.gl=00;35:*.dl=00;35:*.xcf=00;35:*.xwd=00;35:*.yuv=00;35:*.svg=00;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:'
ls --color -l",None,,
,,,,,,,,,,,,,,,,"```bash
stat /sbin/runuser
stat /usr/bin/runuser
sha1sum /sbin/runuser /usr/bin/runuser
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
chsh -s /bin/tcsh
logout
gnome-terminal
xterm
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/mnt
mount -t smbfs //;/tmp/mnt
df -l
df --local
umount /tmp/mnt

mkdir /tmp/mnt
mount -t nfs localhost:/ /tmp/mnt
df -l
df --local
umount /tmp/mnt
```",None,None,,
,,,,,,,,,,,,,,,,"mkdir foo
chmod 700 foo
touch bar
cp -ac foo bar 
getfattr -d bar",cp -ac foo bar,None,,
,,,,,,,,,,,,,,,,"```bash
yum update coreutils-6.10-28.fc9.i386
bash
```","None

The provided bug description does not specify precise command(s) or a test case that can be executed independently to reproduce the issue. The steps mention updating to a specific version of coreutils and opening a shell, but they do not detail how to perform these actions in a controlled environment for testing purposes. Furthermore, the error is dependent on personal login scripts and system configuration (`/etc/DIR_COLORS`), which are not reproducible without those specifics.",None,,
,,,,,,,,,,,,,,,,tcsh,None,None,,
,,,,,,,,,,,,,,,,su,"su
# Enter password when prompted

None

The provided information describes the steps but does not provide a direct command sequence to fully automate the reproduction of the issue since it requires manual input of a password and observation of behavior which cannot be scripted without additional context or environment setup details.","su
# Enter password when prompted",,
,,,,,,,,,,,,,,,,"```bash
useradd -m -s /bin/tcsh testuser
echo ""echo Hello from .cshrc"" >> /home/testuser/.cshrc
echo ""echo Hello from .login"" >> /home/testuser/.login
su - testuser
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo 'setenv LS_COLORS ""ca=40;33:di=34""' >> .cshrc
tcsh -c 'source ~/.cshrc'
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
setcap cap_net_bind_service=ep test.log
getcap test.log
ls --color test.log
```","sudo setcap cap_net_bind_service=ep test.log
getcap test.log
ls -l test.log",None,,
,,,,,,,,,,,,,,,,"dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1
ls -l iso.iso","dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1
ls -l iso.iso",dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1,,
,,,,,,,,,,,,,,,,"```bash
mkdir tmp
for num in $(seq 1000); do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/
```","mkdir tmp
for num in `seq 1000`; do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/","mkdir tmp
for num in `seq 1000`; do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/",,
,,,,,,,,,,,,,,,,"```bash
mkdir Tools
cd Tools
touch i686-rh73-gcc32.tgz
mkdir /Rar
mv -v i686-rh73-gcc32.tgz /Rar
```
And for the `cp` command:
```bash
touch INSTALL
cp INSTALL /Rar
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""line1"" > file
echo ""line2"" >> file
echo ""line3"" >> file
echo ""line4"" >> file
echo ""line5"" >> file
tail +5 file
```",tail +5 file,tail +5 file,,
,,,,,,,,,,,,,,,,"```bash
sudo chcon -t user_tmp_t -vR kdecache-* xdgcache-*
```",sudo chcon -t user_tmp_t -vR kdecache-* xdgcache-*-,None,,
,,,,,,,,,,,,,,,,"yum install coreutils-6.12-5.fc10
su",None,None,,
,,,,,,,,,,,,,,,,who -r,who -r,None,,
,,,,,,,,,,,,,,,,dd if=/dev/zero of=guest bs=1G count=14,dd if=/dev/zero of=guest bs=1G count=14,None,,
,,,,,,,,,,,,,,,,"```bash
cd /var
ln -sf beta tmp/alpha
echo ""blah"" > tmp/alpha 
rm tmp/beta
echo ""blah"" > file
cp file tmp/alpha
```","cd /var  
ln -sf beta tmp/alpha  
echo ""blah"" > tmp/alpha  
rm tmp/beta  
echo ""blah"" > file  
cp file tmp/alpha","cd /var  
ln -sf beta tmp/alpha  
echo ""blah"" > tmp/alpha  
rm tmp/beta  
echo ""blah"" > file  
cp file tmp/alpha",,
,,,,,,,,,,,,,,,,ls -ZC,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,ls -l | tail,None,None,,
,,,,,,,,,,,,,,,,sha1sum -b Fedora-9-Beta-x86_64-DVD.iso,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir testdir
cd testdir
ls -ld .
chmod 4770 .
ls -ld .
chmod 2770 .
ls -ld .
chmod 0770 .
ls -ld .
```","mkdir testdir && cd testdir
chmod 4770 .
chmod 2770 .
ls -ld .","mkdir testdir
cd testdir
chmod 4770 .
ls -ld .
chmod 2770 .
ls -ld .
chmod 0770 .
ls -ld .",,
,,,,,,,,,,,,,,,,"date -d ""July 2005""","date -d ""July 2005""","date -d ""July 2005""",,
,,,,,,,,,,,,,,,,"id <username>
id ""$(whoami)""",id <user>,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir ~/dvdimage.iso
fallocate -l 1G ~/dvdimage.iso
mkisofs -o ~/dvdimage.iso ~/empty_dir
mount -o loop ~/dvdimage.iso /mnt
mkdir ~/test
cp -av /mnt/* ~/test
```","mount -o loop dvdimage.iso /mnt
mkdir ~/test ; cd ~/test
cp -av /mnt/* ./","mount -o loop dvdimage.iso /mnt
mkdir ~/test
cp -av /mnt/* ~/test",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
zsh
source /etc/profile.d/colorls.sh
```","None

The provided information indicates that the issue arises from a specific configuration file (`/etc/profile.d/colorls.sh`) and its incompatibility with `zsh`. However, there are no explicit commands given for reproducing the exact error within a controlled environment based on the provided text. The steps to reproduce involve using `zsh` as the system shell and sourcing the problematic script, which doesn't translate directly into a simple command or test case that can be executed independently without setting up the context (like changing the shell). Thus, no direct commands can be extracted for reproduction here.",None,,
,,,,,,,,,,,,,,,,"cat /etc/passwd | head -3 | tail +2
cat /etc/passwd | tail +3 | head -2","cat /etc/passwd | head -3 | tail +2
cat /etc/passwd | tail +3 | head -2","cat /etc/passwd | head -3 | tail +2  
cat /etc/passwd | tail +3 | head -2",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo foo >foo
ln foo foo2
echo bar >bar
strace mv bar foo
```","echo foo >foo
echo bar >bar
rm -f foo.backup
ln foo foo.backup
mv bar foo","```bash
echo foo >foo
echo bar >bar
rm -f foo.backup
ln foo foo.backup
mv bar foo
```

This command sequence reproduces the behavior described in the bug report, demonstrating the issue with `mv` unlinking a target file that has multiple hard links.",,
,,,,,,,,,,,,,,,,"```bash
LS_COLORS=""hi""
source /etc/profile.d/colorls.sh
echo $LS_COLORS
```",None,None,,
,,,,,,,,,,,,,,,,"echo --foo --bar
/bin/echo --foo --bar","echo --foo --bar
/bin/echo --foo --bar",/bin/echo --foo --bar,,
,,,,,,,,,,,,,,,,"1) Log in as normal user from a text console 
2) su - root 
3) input root's password",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
su -l -c ""set -x ; 
umask 027 ; exec /usr/bin/ssh -n 'remote_host' 'remote_command' </dev/null"" backup </dev/null >""output.log""
```",None,None,,
,,,,,,,,,,,,,,,,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
cd /etc/profile.d
setenv LSCOLORS ""*bug*""
csh /etc/profile.d/colorls.csh
```","cd /etc/profile.d
setenv LS_COLORS ""*bug*""
csh /etc/profile.d/colorls.csh",None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, one would need to follow these steps:

1. Download and access mkl 10.0.x from Intel.
2. Attempt to install it on a Fedora 9 system with bash-3.2-22.fc9.x86_64 by running the install script provided with the package.

Given the specificity of the environment (Fedora 9, specific version of bash) and the requirement for mkl 10.0.x from Intel, which is not a standard Linux coreutils component but rather a separate product, the test case involves:

- Downloading mkl 10.0.x
- Running its installation script on the specified Fedora version with the given bash version.

Since this involves external software (mkl) and specific environment setup rather than a direct command to a Linux core utility, the exact reproducible command is not straightforward without access to the mkl install script. However, the process can be generalized as:

```bash
# Assuming you have downloaded mkl 10.0.x and are in its directory
./install_script.sh
```

Replace `install_script.sh` with the actual name of the installation script provided by Intel for mkl 10.0.x.

Given the nature of the question, which seems to expect a command or test case directly related to coreutils or a simple reproducible scenario, and considering that reproducing this bug requires specific external software (mkl) and environment setup:

None",None,None,,
,,,,,,,,,,,,,,,,"```bash
unalias cp
touch a b
cp -i -f a b
cp -f -i a b
```","unalias cp
touch a b
cp -i -f a b
cp -f -i a b","unalias cp
touch a b
cp -i -f a b
cp -f -i a b",,
,,,,,,,,,,,,,,,,"```bash
echo ""modified content"" > /etc/profile.d/colorls.sh
rpm -Uvh coreutils-6.9-9.rpm
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"ls --color=tty
man ls
ls --help 
ls --color=auto",None,None,,
,,,,,,,,,,,,,,,,"```bash
touch /usr/bin/rhgb
chmod 755 /usr/bin/rhgb
chcon system_u:object_r:bin_t /usr/bin/rhgb
ls -lZ /usr/bin/rhgb
sudo /sbin/restorecon /usr/bin/rhgb
ls -lZ /usr/bin/rhgb
```",None,None,,
,,,,,,,,,,,,,,,,"csh -c ""eval `dircolors -c $COLORS 2>/dev/null`""",None,None,,
,,,,,,,,,,,,,,,,"```bash
TERM=
infocmp | sed 's/^[^#]*#//'
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LS_COLORS= mkdir test; chmod o-w test
ls --color=tty -d test
chmod o+w test
ls --color=tty -d test
```","mkdir test; chmod o-w test
ls --color=tty -d test
chmod o+w test
ls --color=tty -d test",None,,
,,,,,,,,,,,,,,,,"tcsh -c 'source /etc/profile.d/colorls.csh' 
echo $LS_COLORS",None,None,,
,,,,,,,,,,,,,,,,/bin/ls -l /etc/passwd,None,/bin/ls -l /etc/passwd,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""F-A\nFB\nF-C"" > a.txt
sort a.txt
```","echo -e ""F-A\nFB\nF-C"" > a.txt
sort a.txt","echo -e ""F-A\nFB\nF-C"" > a.txt
sort a.txt",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=en_US.UTF-8 sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF
```","sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF","sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
useradd gagan
useradd guest
su - 
Password: (enter correct root password)
su - gagan
Password: (enter correct gagan password)
```","su - root
Password: [correct password]

su - gagan
Password: [correct password]",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /disk
touch /disk/file1 /disk/file2
echo ""/media/BACKUP"" > /etc/fstab
mount /media/BACKUP
cp -fvr /disk /media/BACKUP
umount /media/BACKUP

# create script file with the following content:
echo ""cp -fvr /disk /media/BACKUP"" > script
chmod +x script

# mount usb drive and run script
mount /media/BACKUP
./script
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
XTerm.termName: xterm-256color
ls --color=always
xterm -tn xterm
ls --color=always
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""_line1"" > file
echo "" line2"" >> file
echo ""line3"" >> file
sort file
```","echo "" _third"" > file.txt; echo "" second"" >> file.txt; echo ""first"" >> file.txt; sort file.txt","echo ""   line1"" > testfile.txt
echo ""_line2"" >> testfile.txt
echo ""line3"" >> testfile.txt
sort testfile.txt",,
,,,,,,,,,,,,,,,,"```bash
export TERM=xterm-256color
ls --color
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""a\n a\n  a\n_a\nA\naa\nZ\n_Z"" | sort
```

This command will reproduce the bug by sorting the input strings and producing the actual results described in the bug report, which differ from the expected results. The `echo` command generates the test input, and the `sort` command applies the default sorting behavior that is the subject of the bug report.","echo -e ""a\n a\n  a\n_a\nA\naa\nZ\n_Z"" | sort

None",None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024
```",LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,,
,,,,,,,,,,,,,,,,pr -e4 -f -l 25 file.txt | lpr -P P1,pr -e4 -f -l 25 $1 | lpr -P P1,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/logs
cp /tmp/syslog /tmp/logs/
```","mkdir /tmp/logs
cp /tmp/syslog /tmp/logs/","mkdir /tmp/logs  
cp /tmp/syslog /tmp/logs/",,
,,,,,,,,,,,,,,,,"```bash
ln -s ../../etc/hosts user
cd /home
/bin/ls --color=always | grep hosts
```","touch /home/user/hosts -d '../../etc/hosts'
cd /home/user
/bin/ls --color=always | grep hosts","mkdir -p /home/user
ln -s ../../etc/hosts /home/user/hosts
cd /home/user
/bin/ls --color=always | grep hosts",,
,,,,,,,,,,,,,,,,"stat --format=%C /bin/ls 
ls -Z /bin/ls",stat --format=%C /bin/ls,stat --format=%C /bin/ls,,
,,,,,,,,,,,,,,,,"ln -s non-existent-file broken-symlink
ls --color=always broken-symlink",None,None,,
,,,,,,,,,,,,,,,,"mkdir nfs_dir
touch nfs_dir/file1
echo ""Hello World"" > nfs_dir/file1
cp -av nfs_dir/file1 nfs_dir/file2
cp -av nfs_dir/file1 nfs_dir/file2
ls -l nfs_dir/file2","touch file1
echo ""some content"" > file1
cp -av file1 file2
cp -av file1 file2",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/test
mount -t nfs localhost:/tmp/test /mnt
echo ""use_nfs_home_dirs = on"" > /etc/selinux/config
setenforce 1
cd /mnt
echo poo > a
cat a
cp -a a b
echo $?
cat b
ls -l b
```","echo poo > a
cat a
cp -a a b
echo $?
cat b
ls -l b","touch a  
echo poo > a  
cp -a a b  
ls -l b",,
,,,,,,,,,,,,,,,,"```bash
if test -n ""$@""; then 
   echo -n 1
else 
   echo -n 2
fi
if test ""$@""; then 
   echo -n 3
else 
   echo -n 4
fi
echo
```","None

The provided bug report does not include explicit commands to reproduce the issue but instead refers to running an attached script which isn't included in the text given here. Without the actual content of that script, we cannot provide a precise command or test case for reproducing the bug. Therefore, based on the information available, the answer is None.","```bash
if test -n ""$@""; then echo -n 1; else echo -n 2; fi; if test ""$@""; then echo -n 3; else echo -n 4; fi; echo
```",,
,,,,,,,,,,,,,,,,"date --help | grep iso
man date | grep iso
info date | search --iso
date --iso=sec 
(date --help; man date; info date) | grep iso","date --help
man date
info date
grep --iso <(date --help)
grep --iso <(man date)
grep --iso <(info date)","date --help | grep iso
man date | grep iso
info date | grep iso",,
,,,,,,,,,,,,,,,,"```bash
umask 0007
mkdir testdir
ls -ld testdir
chmod 2770 testdir
ls -ld testdir
chmod 770 testdir
ls -ld testdir
```","umask 0007
mkdir testdir
chmod 2770 testdir
chmod 770 testdir
ls -ld testdir","mkdir testdir  
chmod 2770 testdir  
ls -ld testdir  
chmod 770 testdir  
ls -ld testdir",,
,,,,,,,,,,,,,,,,"foo=
/usr/bin/[ -n $[foo} ] && echo true",None,"foo=
/usr/bin/[ -n $[foo} ] && echo true",,
,,,,,,,,,,,,,,,,"```bash
mkdir /partition
mount -t nfs4 localhost:/partition /partition
cd /partition
rm -f toto*
date > toto1
cp --preserve=all toto1 toto2
ls -l toto*
```","cd /partition
rm -f toto*
date > toto1
cp --preserve=all toto1 toto2
ls -l toto*","cd /partition  
rm -f toto*  
date > toto1  
cp -i -a toto1 toto2  
ls -l toto*",,
,,,,,,,,,,,,,,,,"```bash
install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/
ls -l /etc/pki/rpm-gpg/RPM-GPG-KEY-AL-CAPCOM
```",install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/,"install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/  
ls -l /etc/pki/rpm-gpg/RPM-GPG-KEY-AL-CAPCOM",,
,,,,,,,,,,,,,,,,"```bash
mkdir -p a/b/c
chmod 0 a
rm -rf a
```","mkdir -p a/b/c
chmod 0 a
rm -rf a",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /tmp/du_test/unreadable
du -a -b /tmp/du_test
chmod 000 /tmp/du_test/unreadable
du -b -a /tmp/du_test
```","cd /tmp
mkdir -p du_test/unreadable
du -a -b du_test
chmod 000 du_test/unreadable
du -b -a du_test","cd /tmp  
mkdir -p du_test/unreadable  
du -a -b du_test  
chmod 000 du_test/unreadable  
du -b -a du_test",,
,,,,,,,,,,,,,,,,cat /etc/passwd | sort -R,cat /etc/passwd | sort -R,cat /etc/passwd | sort -R,,
,,,,,,,,,,,,,,,,"```bash
touch -d ""1 day ago"" file1
touch file2
cp -iu file1 .
```","touch file1; mkdir dir2; touch dir2/file1; sleep 1; touch -d ""-1 day"" dir2/file1; cp -iu file1 dir2/","touch /tmp/file1
sleep 2
touch /tmp/directory/file2
cp -iu /tmp/file1 /tmp/directory/",,
,,,,,,,,,,,,,,,,"su - 
df",None,None,,
,,,,,,,,,,,,,,,,"mkdir testdir
ls -ld testdir
chmod 7777 testdir
ls -ld testdir
chmod 0777 testdir
ls -ld testdir","mkdir testdir
chmod 7777 testdir
chmod 777 testdir
ls -ld testdir","mkdir testdir  
chmod 7777 testdir  
chmod 777 testdir  
ls -ld testdir",,
,,,,,,,,,,,,,,,,/bin/pwd,/bin/pwd,/bin/pwd,,
,,,,,,,,,,,,,,,,"```bash
rpm -ivh coreutils-6.9-2.fc7.src.rpm
rpmbuild -ba /path/to/coreutils/spec/file
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir test_dir
cd test_dir
touch a_file b_file c_file d_file e_file f_file g_file h_file i_file
ls
ls -x
```","touch a_file b_file c_file d_file e_file f_file g_file h_file i_file
ls -x","mkdir testdir  
cd testdir  
touch a_file b_file c_file d_file e_file f_file g_file h_file i_file  
ls -x",,
,,,,,,,,,,,,,,,,/bin/ls -x,None,None,,
,,,,,,,,,,,,,,,,"tail -f file
strace tail -f file",strace tail -f file,"tail -f file
strace tail -f file",,
,,,,,,,,,,,,,,,,"```bash
ln -s existing_file good_symlink
ls -bCAF --color
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p dir1/dir2/dir3/dir4/dir5/dir6/dir7/dir8/dir9/dir10
rm -rf dir1 &
rm -rf dir1
```
Note: The `&` at the end of the first `rm` command runs it in the background, allowing the second `rm` command to run simultaneously. This is necessary to reproduce the concurrent deletion scenario described in the bug report.",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo 'int main(){return 0;}' > u.c
gcc -o u u.c
runcon -t unconfined_t /usr/sbin/prelink -N ./u
```","echo 'int main(){return 0;}' > u.c
gcc -o u u.c
runcon -t unconfined_t /usr/sbin/prelink -N ./u","echo 'int main(){return 0;}' > u.c  
gcc -o u u.c  
runcon -t unconfined_t /usr/sbin/prelink -N ./u",,
,,,,,,,,,,,,,,,,"seq --format=""%02d"" 1 10","seq --format=""%02d"" 1 10","seq --format=""%02d"" 1 10",,
,,,,,,,,,,,,,,,,"```bash
mkdir a
touch a/b
ln -s d a/c
ls -lL a
```","mkdir a ; touch a/b ; ln -s d a/c ; ls -lL a
touch a/d ; ls -lL a",mkdir /tmp/a ; touch /tmp/a/b ; ln -s /tmp/d /tmp/a/c ; ls -lL /tmp/a,,
,,,,,,,,,,,,,,,,"cat /etc/group | tail +3
tail /etc/group | tail +3",tail /etc/group +3,cat /etc/group | tail +3,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p a/b b
date > a/b/c.txt
mv b a
```","mkdir -p a/b b
date > a/b/c.txt
mv b a","mkdir -p a/b b  
date > a/b/c.txt  
mv b a",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo 1 > a
echo 1 > b
cut -f2- a b
```","echo 1 > a
echo 1 > b
cut -f2- a b","echo 1 > a
echo 1 > b
cut -f2- a b",,
,,,,,,,,,,,,,,,,"```bash
printf '#!/usr/bin/env python -tt\nprint 1\n' > t
chmod +x t
./t
python -tt t
```","printf '#!/usr/bin/env python -tt\nprint 1\n' > t
chmod +x t
./t
python -tt t","printf '#!/usr/bin/env python -tt\nprint(1)\n' > t
chmod +x t
./t
python -tt t",,
,,,,,,,,,,,,,,,,"```bash
ls -l >toc
cp -a toc toc~
ls -l toc*
cp -a toc toc~
ls -l toc*
```","ls -l >toc
cp -a toc toc~
ls -l toc*
cp -a toc toc~
ls -l toc*","ls -l >toc  
cp -a toc toc~  
ls -l toc*  
cp -a toc toc~  
ls -l toc*",,
,,,,,,,,,,,,,,,,"ldd /bin/mv
mv x y 
rpm -q -f /bin/mv",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,id root,id root,id root,,
,,,,,,,,,,,,,,,,tail +3 /etc/hosts,tail +3 /etc/hosts,tail +3 /etc/hosts,,
,,,,,,,,,,,,,,,,"stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"```bash
stat -c ""%C"" hoge.txt
```","stat -c ""%C"" hoge.txt","touch hoge.txt  
stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"```bash
for i in {1..10000}; do touch ""file$sid=0$i""; done
rm -fr *sid=0*
```","ls | grep sid=0 | wc -l
rm -fr *sid=0*",None,,
,,,,,,,,,,,,,,,,"/usr/bin/tail +3 /etc/motd 
tail -n +3 /etc/motd",/usr/bin/tail +3 /etc/motd,/usr/bin/tail +3 /etc/motd,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"rpm -qf /usr/share/locale/*/LC_TIME | wc -l
ls -l /usr/share/locale/*/LC_TIME/coreutils.mo | wc -l",None,None,,
,,,,,,,,,,,,,,,,"```bash
touch source.txt destination.txt
mv -i -f source.txt destination.txt
cp -i -f source.txt destination.txt
```",None,None,,
,,,,,,,,,,,,,,,,"uname --kernel-version 
uname --kernel-release",uname --kernel-version,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort
```","echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort","echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort",,
,,,,,,,,,,,,,,,,"echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d","echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d","echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d",,
,,,,,,,,,,,,,,,,tail +2 su.log,tail +n 2 su.log,tail +n 2 su.log,,
,,,,,,,,,,,,,,,,tail +2 su.log,tail +n 2 su.log,tail +n 2 su.log,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"/bin/echo ""bad\ngood"" | tail +2","/bin/echo ""bad\ngood"" | tail +2","/bin/echo ""bad\ngood"" | tail +2",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
chown sapoqwegfj /dev/ttyS1 
chown sapoqwegfj: /dev/ttyS1
```",chown sapoqwegfj: /dev/ttyS1,"chown sapoqwegfj /dev/ttyS1  
chown sapoqwegfj: /dev/ttyS1",,
,,,,,,,,,,,,,,,,"```bash
touch foo
setfacl -m u:daemon:r-x foo
ls foo
ldd /bin/ls
cp -p foo bar
getfacl bar
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
openvt -s -w -- su - someuser -c ""vlock -a""
```

or 

```bash
openvt -s -w -- su - someuser -c ""vlock -a 2>/tmp/xx""; cat /tmp/xx
```","openvt -s -w -- su - someuser -c ""vlock -a""","openvt -s -w -- su - someuser -c ""vlock -a""",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
# Create NIS tables with auto.HOME entries
echo ""uid04278 server:/vol/did/&"" > auto.HOME
echo ""uid12345 server:/vol/did/&"" >> auto.HOME

# Login as root
sudo su -

# Switch to user uidxy and try to change directory
su - uid04278

# Verify the error message
echo $?

# Try changing the auto.HOME entry and repeat the steps
sed -i 's/&/uid04278/' auto.HOME
su - uid04278

# Repeat for another user
sed -i 's/uid04278/uid12345/' auto.HOME
su - uid12345
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""line1\tline2"" > file
pr -e file
```","Based on the provided bug description, here are the steps and commands needed to reproduce the issue:

1. **Create a file with two lines**:
   - The first line should start with a tab character.

2. **Run `pr` command with the `-e` option**:
   - This will attempt to expand tabs to spaces in the file.

Here are the specific steps and commands you can use:

```sh
# Step 1: Create a sample file (let's name it test.txt)
echo -e ""\tThis is the first line"" > test.txt
echo ""This is the second line"" >> test.txt

# Step 2: Run pr with the -e option on this file
pr -e test.txt
```

### Explanation:
- `echo -e ""\tThis is the first line""` creates a file where the first line starts with a tab character.
- `echo ""This is the second line"" >> test.txt` appends another line to the same file without any tabs.

### Expected Result:
The `pr -e` command should expand the leading tab in the first line into spaces. However, according to the bug report, it instead causes an error or unexpected behavior (the exact nature of which isn't detailed but presumably involves a memory issue or incorrect output).

This setup should allow you to consistently reproduce the issue as described in the bug report.

### How Reproducible:
The report states that this happens ""every time."" Therefore, following these steps on a system with the same version of `coreutils` (5.93-7.2) and the same OS configuration (Linux kernel 2.6.16) should reliably reproduce the bug.","Based on the provided bug description, here are the steps and commands to attempt to reproduce the issue:

1. **Create a file with 2 lines**:
   - One line should start with a tab character.

You can create such a file using an editor like `nano`, `vim`, or directly from the command line. Here's how you can do it directly in bash:

```bash
echo -e ""\tThis is a line starting with a tab\nThis is another line"" > testfile.txt
```

2. **Use the `pr` command**:
   - Run the `pr` command with the `-e` option on the created file.

```bash
pr -e testfile.txt
```

The `-e` option in the `pr` command stands for ""expand tabs"" and is supposed to convert tab characters into spaces. However, according to the bug report, this results in a stack trace instead of expanding the tabs.

### Summary of Test Case

1. **Create a file named `testfile.txt` with content**:
   ```
   	This is a line starting with a tab
   This is another line
   ```

2. **Run the command**:
   ```bash
   pr -e testfile.txt
   ```

3. **Observe the output**:
   - Expected behavior: The first line should have its leading tab character expanded to spaces.
   - Actual behavior (as reported in the bug): A stack trace is shown instead of the expected output.

By following these steps, you should be able to reproduce the issue described in the bug report.",,
,,,,,,,,,,,,,,,,"```bash
echo -e ""line1\nline2\nline3\nline4"" > testfile
tail +2 testfile
```",tail +2 somefile.txt,tail +2,,
,,,,,,,,,,,,,,,,"```bash
pr -e3 -l60 -f qtfigs.cpp | lp
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
date[0]=1161557411
date[1]=""+0000""
sec=${date[0]}
tz=${date[1]}
dtz=${tz/+/+ }
dtz=${dtz/-/- }
pdate=""$(date -Rud ""1970-01-01 UTC + $sec sec $dtz"" 2>/dev/null)""
echo ""$pdate""
```",None,None,,
,,,,,,,,,,,,,,,,"cd /any_subdir 
/bin/pwd","cd /any_subdir
/bin/pwd","cd /any_subdir  
/bin/pwd",,
,,,,,,,,,,,,,,,,"```bash
umount /proc
touch testfile
cp -p testfile testfile_copy
echo $?
```

Note: The `umount /proc` command may require root privileges and should be used with caution, as it can cause system instability if not remounted properly. Also, the exact behavior may depend on the specific version of coreutils being used.",None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file-a file-b
chcon -u system_u -r object_r -t tmp_t file-b
cp -Z root:object_r:tmp_t file-a file-b
ls -Z file-b
```",touch file-b ; cp -Z root:object_r:tmp_t file-a file-b,"touch file-a file-b  
cp -Z root:object_r:tmp_t file-a file-b  
ls -lZ file-b",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"echo -e ""abc\ndef\nghi"" | tail +2","echo -e ""abc\ndef\nghi"" | tail +2","echo -e ""abc\ndef\nghi"" | tail +2",,
,,,,,,,,,,,,,,,,"```bash
mkdir test
cd test
echo ""aaa"" > aaa
echo ""bbbbb"" > bbbbb
ls -l | sort -n +4
```","mkdir test
cd test
echo ""aaa"" > aaa
echo ""bbbbb"" > bbbbb
ls -l | sort -n +4","mkdir test  
cd test  
echo ""aaa"" > aaa  
echo ""bbbbb"" > bbbbb  
ls -l | sort -n +4",,
,,,,,,,,,,,,,,,,"```bash
# Create a test file
touch test_file

# Unmount /proc (this requires root privileges)
umount /proc

# Attempt to change the timestamp using touch
touch test_file

# Check the exit status of the touch command
echo $?

# Remount /proc (this requires root privileges)
mount -t proc proc /proc

# Create a new file in a directory where SELinux denies access
mkdir denied_dir
chcon -t denied_type denied_dir

# Attempt to change the timestamp using touch on the new file
touch denied_dir/test_file

# Check the exit status of the touch command
echo $?
```",None,None,,
,,,,,,,,,,,,,,,,df,df,df,,
,,,,,,,,,,,,,,,,"```bash
touch /tmp/example1
time install /tmp/example1 /tmp/example2
```","touch /tmp/example1
time install /tmp/example1 /tmp/example2","touch /tmp/example1
time install /tmp/example1 /tmp/example2",,
,,,,,,,,,,,,,,,,"```bash
export LANG=fr_FR.UTF-8
echo ""fÃ©vrier"" | tr ""Ã Ã§Ã©Ã¨ÃªÃ«Ã®Ã¯Ã´Ã¶Ã¹Ã¼ÇÃÃÃÃÃÃÃÃÃÃÃ"" ""aceeeeiioouuACEEEEIIOOUU""
```","echo ""fÃÂ©vrier"" | tr ""ÃÂ ÃÂ§ÃÂ©ÃÂ¨ÃÂªÃÂ«ÃÂ®ÃÂ¯ÃÂ´ÃÂ¶ÃÂ¹ÃÂ¼ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ"" ""aceeeeiioouuACEEEEIIOOUU""","echo ""fÃ©vrier"" | tr ""Ã Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅ¸"" ""aceeeeiioouuACEEEEIIOOUU""",,
,,,,,,,,,,,,,,,,"```bash
LANG=fr_FR.UTF-8
echo ""fÃÂ©vrier""  |  tr ""ÃÂ ÃÂ§ÃÂ©ÃÂ¨ÃÂªÃÂ«ÃÂ®ÃÂ¯ÃÂ´ÃÂ¶ÃÂ¹ÃÂ¼ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ"" ""aceeeeiioouuACEEEEIIOOUU""
```","export LANG=fr_FR.UTF-8
echo ""fÃÂ©vrier""  |  tr ""ÃÂ ÃÂ§ÃÂ©ÃÂ¨ÃÂªÃÂ«ÃÂ®ÃÂ¯ÃÂ´ÃÂ¶ÃÂ¹ÃÂ¼ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ"" ""aceeeeiioouuACEEEEIIOOUU""","echo ""fÃ©vrier"" | tr ""Ã Ã¢Ã§Ã©Ã¨ÃªÃ«Ã®Ã¯Ã´Ã¶Ã¹Ã»ÃÃÃÃÃÃÃÃÃÃÃÃÃ"" ""aceeeeiioouuACEEEEIIOOUU""",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"mkdir oldname
mv oldname/ newname/",None,mv oldname/ newname/,,
,,,,,,,,,,,,,,,,"```bash
echo ""x 4a 2""  >testfile
echo ""x 47 1"" >>testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile
```","echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile","echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile",,
,,,,,,,,,,,,,,,,"```bash
echo ""x 4a 2""  >testfile
echo ""x 47 1"" >>testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile
```","echo ""x 4a 2""  >testfile
echo ""x 47 1"" >>testfile
sort       -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile","echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile",,
,,,,,,,,,,,,,,,,"```bash
touch libflashplayer.so
ln -s /opt/RealPlayer/mozilla/nphelix.so nphelix.so
chcon user_u:object_r:lib_t nphelix.so
ls -Z
chcon --reference=nphelix.so libflashplayer.so
ls -Z
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c","LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c","LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c",,
,,,,,,,,,,,,,,,,"```bash
mkdir /home/ignacio
useradd ignacio
chmod 750 /root
su - ignacio
su -
pwd
cd
pwd
ls -ld /root
```","None

The provided bug description does not clearly define a coreutils specific issue that can be reproduced with given commands. The warnings are related to permission settings and directory access, rather than pointing out a clear malfunction within any particular utility of the Linux coreutils package. Without more context or details on what specifically is considered a ""bug"", no exact command or test case can be provided for reproduction.",None,,
,,,,,,,,,,,,,,,,tail +10 somefile,tail +10 somefile,tail +10 somefile,,
,,,,,,,,,,,,,,,,"tail +2 file 
echo ""line1"" > file
echo ""line2"" >> file
echo ""line3"" >> file
tail +2 file",tail +2 .xsession-errors,tail +2 .xsession-errors,,
,,,,,,,,,,,,,,,,"tail +5 /etc/protocols 
tail -n +5 /etc/protocols",tail +5 /etc/protocols,tail +5 /etc/protocols,,
,,,,,,,,,,,,,,,,"```bash
mkdir a
ls -ld b
mv a b/
```","mkdir a
ls -ld b
mv a b/","mkdir a
mv a b/",,
,,,,,,,,,,,,,,,,"rpm -v -ba --define ""WITH_SELINUX 0"" coreutils.spec",None,None,,
,,,,,,,,,,,,,,,,xterm -e su -,xterm -e su -,"xterm -e ""su -""",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"gnome-terminal
/bin/su -","gnome-terminal -e ""/bin/su -""
xterm -e ""/bin/su -""","gnome-terminal -e ""/bin/su -""  
# Alternatively, you can use xterm:
xterm -e ""/bin/su -""",,
,,,,,,,,,,,,,,,,"```bash
echo '1
2
3' > f
tail +2 f
```","echo '1
2
3' > f
tail +2 f","echo '1
2
3' > f
tail +2 f",,
,,,,,,,,,,,,,,,,"```bash
mkdir src_dir dst_dir
for i in {1..1000000}; do touch ""src_dir/file$i""; done
cp -a src_dir dst_dir &
PID=$!
while true; do cat /proc/$PID/status | grep VmRSS; sleep 5; done
```",cp -a LARGE_SRC_DIRS... DST_DIR,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
vipw
# duplicate the root entry and rename the 2nd one to ""system""
vipw -s
# duplicate the root entry in the shadow password file and rename the 2nd one to ""system""
su - system
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
vipw # duplicate the root entry and rename the 2nd one to ""system""
vipw -s # edit the shadow password file, duplicate the root entry and rename the 2nd one to ""system""
su - system # as a normal user, attempt to switch to the ""system"" account without providing a password
```","vipw    
# duplicate the root entry. rename the 2nd one to system  
vipw -s  
# do the same in the shadow password  
su - system  

None

Note: The provided steps involve manual intervention (specifically with `vipw`), which cannot be directly scripted or automated, hence no direct command sequence can be given to fully reproduce this scenario.","vipw  
# In vipw, duplicate the root entry and rename it to ""system"" with the same uid/gid as root. Save and exit.  
vipw -s  
# In vipw -s (shadow password), duplicate the root entry and rename it to ""system"". Ensure the password field is set for the new system user. Save and exit.  
su - system",,
,,,,,,,,,,,,,,,,"```bash
vipw
# duplicate the root entry and rename the 2nd one to ""system""
vipw -s
# do the same in the shadow password file, duplicate the root entry and rename the 2nd one to ""system""
su - normal_user
su - system
```",None,None,,
,,,,,,,,,,,,,,,,"cat /proc/* > file_for_analysis 


Note: The exact /proc file that caused the issue is not specified in the bug report. This command attempts to read from all /proc files and write to a file named ""file_for_analysis"". You may need to modify this command or run it multiple times to reproduce the bug, as it happened sporadically over a 3-day test period.",None,None,,
,,,,,,,,,,,,,,,,"cd /net/barrel
sort +0",None,None,,
,,,,,,,,,,,,,,,,"mkdir tests can be found in the coreutils source code, specifically in the tests/mkdir directory. The failing test 'p-3' is likely a specific test case within this directory.

To reproduce the bug:
```bash
./configure
make
make check
```
Then, specifically for the mkdir tests:
```bash
make check-TESTS
``` 
or more precisely for the failing test:
```bash
tests/mkdir/p-3
```",None,make check-TESTS,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/abc
touch /tmp/abc/file
ln -s /tmp/abc/file /tmp/abc/file.link
chown -v -R adm /tmp/abc
chgrp -v -R adm /tmp/abc
ls -l /tmp/abc
```","mkdir /tmp/abc
touch /tmp/abc/file
ln -s /tmp/abc/file /tmp/abc/file.link
chown -v -R adm /tmp/abc
chgrp -v -R adm /tmp/abc
ls -l /tmp/abc","mkdir /tmp/abc  
touch /tmp/abc/file  
ln -s /tmp/abc/file /tmp/abc/file.link  
chown -v -R adm /tmp/abc  
chgrp -v -R adm /tmp/abc  
ls -l /tmp/abc",,
,,,,,,,,,,,,,,,,"```bash
xterm
echo $WINDOWID
su - some_user_name
echo $WINDOWID
```","echo $WINDOWID
su - some_user_name
echo $WINDOWID","echo $WINDOWID
su - some_user_name
echo $WINDOWID",,
,,,,,,,,,,,,,,,,"```bash
cp /bin/su /bin/su_backup
chmod u-s /bin/su
su
```",None,su -c 'id',,
,,,,,,,,,,,,,,,,"```bash
mkdir /mnt/nfs
mount -t nfs4 localhost:/ /mnt/nfs
touch /mnt/nfs/xyz
mv /mnt/nfs/xyz .
```",None,mv /users/columbo/xyz .,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""short\nmuch longer line"" > file1
echo -e ""even longer line than the previous one"" > file2
wc -L file1 file2
```",None,wc -L Cory_Doctorow_-_Down_and_Out_in_the_Magic_Kingdom.txt Cory_Doctorow_-_Eastern_Standard_Tribe.txt,,
,,,,,,,,,,,,,,,,"echo ""abc"" | md5sum","echo ""abc"" | md5sum","echo ""abc"" | md5sum",,
,,,,,,,,,,,,,,,,df -w 42,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir testperm
chmod +rwx testperm
su
chmod -rwx testperm
ls -al
```","mkdir testperm
chmod +rwx testperm
su
chmod -rwx testperm
ls -al","mkdir testperm  
chmod +rwx testperm  
su  
chmod -rwx testperm  
ls -al",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file1 file2
mv --reply=no file1 file2
ls file1 file2
```","touch file1 file2
mv --reply=no file1 file2
ls file1 file2","touch file1 file2  
mv --reply=no file1 file2  
ls file1 file2",,
,,,,,,,,,,,,,,,,"```bash
touch file1 file2
mv --reply=no file1 file2
ls file1 file2
```","touch file1 file2
mv --reply=no file1 file2
ls file1 file2","touch file1 file2
mv --reply=no file1 file2
ls file1 file2",,
,,,,,,,,,,,,,,,,"who -r
who -b","who -r
who -b","who -r
who -b",,
,,,,,,,,,,,,,,,,"```bash
# Enable SELinux
setenforce 1

# Create a new user 'bigbro'
useradd bigbro

# Create a script /home/bigbro/bb/runbb.sh with execute permissions
mkdir -p /home/bigbro/bb
echo ""#!/bin/bash"" > /home/bigbro/bb/runbb.sh
echo ""echo \""Running as \$USER\"""" >> /home/bigbro/bb/runbb.sh
chmod +x /home/bigbro/bb/runbb.sh

# Create a startup script in /etc/init.d with the 'su' command
echo ""#!/bin/bash"" > /etc/init.d/test_su
echo ""[ -f /home/bigbro/bb/runbb.sh ] || exit 0"" >> /etc/init.d/test_su
echo ""case \""$1\"" in"" >> /etc/init.d/test_su
echo ""  start)"" >> /etc/init.d/test_su
echo ""        su -l -c \""/home/bigbro/bb/runbb.sh start\"""" >> /etc/init.d/test_su
echo ""        ;;"") >> /etc/init.d/test_su
echo ""esac"" >> /etc/init.d/test_su
chmod +x /etc/init.d/test_su

# Run the startup script to test 'su' command
/etc/init.d/test_su start
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /var/named/chroot/proc
chmod 000 /var/named/chroot/proc
echo ""none /var/named/chroot/proc proc rw 0 0"" >> /etc/mtab
su -c ""df -k"" non_root_user
```","None

The provided bug description does not include specific commands or a direct test case that can be executed to reproduce the issue independently without the environment setup mentioned (i.e., installing FC4 caching nameserver). The reproduction requires an installed system with specific configurations, which cannot be directly translated into a simple command or script for reproducing the problem.",df -k,,
,,,,,,,,,,,,,,,,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,ls -Z,None,None,,
,,,,,,,,,,,,,,,,"```bash
# Install Progress DB 9.1D09 and create a new database
# (Note: The exact command to create a new database with Progress DB 9.1D09 is not specified in the bug description)
prodb_command  # Replace with actual command to create a new database

# Run basename or other coreutils commands as root to reproduce the segmentation fault
basename
ls
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"alias grep='grep --color'
echo ""Fedora Core release 3 (Heidelberg)"" > issue
GREP_COLOR=31 grep Fedora issue",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo $LANG
en_US.UTF-8
echo SkyttÃ¤ | iconv -f utf-8 -t iso-8859-1 | unexpand | iconv -f iso-8859-1 -t utf-8
```","echo $LANG  
export LANG=en_US.UTF-8  
echo SkyttÃÂ¤ \
| iconv -f utf-8 -t iso-8859-1 \
| unexpand \
| iconv -f iso-8859-1 -t utf-8","echo $LANG
echo SkyttÃÂ¤ \
| iconv -f utf-8 -t iso-8859-1 \
| unexpand \
| iconv -f iso-8859-1 -t utf-8",,
,,,,,,,,,,,,,,,,"1. yum install pam
2. su - root
3. ausearch -m tty",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"ls --help 
ls -s file.txt
ls -s -h file.txt
ls -s --block-size=1024 file.txt",None,ls --help,,
,,,,,,,,,,,,,,,,"Here are the steps to reproduce the bug:

```bash
# Create a 250GB USB Hard Disk with one fat32 partition (e.g., using fdisk and mkfs.vfat)
mkfs.vfat /dev/ubb1

# Mount the partition (e.g., to /media/LACIE)
mkdir /media/LACIE
mount -t vfat /dev/ubb1 /media/LACIE

# Add an entry to /etc/fstab for the device
echo ""/dev/ubb1 /media/LACIE vfat pamconsole,exec,noauto,iocharset=utf8,managed 0 0"" >> /etc/fstab

# Create some files on the disk to use approximately 110GB of space (e.g., using dd)
dd if=/dev/zero of=/media/LACIE/test bs=1M count=110000

# Run the df command to check disk usage
df -kT /media/LACIE

# Run the du command to verify actual disk usage
du -sk /media/LACIE
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkfs.vfat /dev/ubb1
mount /dev/ubb1 /media/LACIE
fallocate -l 110GB /media/LACIE/file
df -kT /media/LACIE
du -sk /media/LACIE
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
usermod -e 1990-01-01 smith
su - smith
usermod -e 2010-01-01 smith
su - smith
```",None,"usermod -e 1990-01-01 smith  
su - smith  
usermod -e 2010-01-01 smith  
su - smith",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
cp -lL /lib/libc.so.6 /tmp
ls -l /tmp/libc.so.6
```","cp -lL /lib/libc.so.6 /tmp
ls -l /tmp/libc.so.6","cp -lL /lib/libc.so.6 /tmp  
ls -l /tmp/libc.so.6",,
,,,,,,,,,,,,,,,,"```bash
gnome-console
su
<enter password>
su user
su
```
Note: Replace `<enter password>` with the actual root password when running the command. 

Also, note that `su user` should be replaced with `su <username>` where `<username>` is the actual username you want to switch to. However, based on the context of the bug description, it seems like the intention is to switch back to a normal user before attempting to switch back to root again. If the goal is specifically to test switching back to the same user, then `su $USER` or `su <username>` should be used instead of just `su user`. 

For simplicity and based on the given steps in the bug description, `su user` is left as is, assuming it's a placeholder for switching back to a normal user account.",None,None,,
,,,,,,,,,,,,,,,,"su -
touch file1 file2
cp -f file1 file2","su -
touch file1 file2
cp -f file1 file2","su -
touch file1 file2
cp -f file1 file2",,
,,,,,,,,,,,,,,,,su root -c /bin/sh,su root -c /bin/sh,su root -c /bin/sh,,
,,,,,,,,,,,,,,,,"```bash
mkdir dir1
mkdir dir2
mkdir dir3
touch dir1/file1
touch dir2/file1
touch dir3/file1
rm -rv *
```","mkdir dir1
mkdir dir2
mkdir dir3
touch dir1/file1
touch dir2/file1
touch dir3/file1
rm -rv *",None,,
,,,,,,,,,,,,,,,,"```bash
xterm -e ""ls""
screen
ls
```","xterm -e bash -c ""ls; screen -rd || screen ; ls""",None,,
,,,,,,,,,,,,,,,,"```bash
export LC_ALL=zh_CN
touch -d ""2022-01-01"" file1
touch -d ""2024-01-01"" file2
ls -l
```","export LC_ALL=zh_CN.utf8
cd /etc
ls -l | tail","export LANG=zh_CN.UTF-8
cd /etc
ls -l | tail",,
,,,,,,,,,,,,,,,,"```bash
echo 'a
.b
c' | sort
```","echo 'a
.b
c' | sort","echo 'a
.b
c' | sort",,
,,,,,,,,,,,,,,,,"```bash
mkfs.vfat /dev/hdb5
mount /dev/hdb5 /mnt/share -t vfat -o users,umask=000,iocharset=iso8859-1,codepage=850
touch file.txt
mv file.txt /mnt/share/
cp file.txt /mnt/share/
rm /mnt/share/file.txt
echo ola > /mnt/share/file.txt
cp /mnt/share/file.txt .
mv /mnt/share/file.txt .
```","Mount a vfat filesystem
Create a file in a ext3 filesystem
Try to move the file to the destination (mv /mnt/home/file1 /mnt/vfatdir/)",None,,
,,,,,,,,,,,,,,,,"touch --help | grep -E ""\-(B|F)""",None,"touch --help | grep -E ""\-(B|F)""",,
,,,,,,,,,,,,,,,,"```bash
echo 'test -f ~/.dircolors' > /etc/profile.d/colorls.csh
echo '#!/bin/tcsh -e' > script.csh
echo 'echo ""Hi""' >> script.csh
chmod +x script.csh
./script.csh
```","touch testscript.csh && echo '#!/bin/tcsh -e\necho ""Hi""' > testscript.csh
chmod +x testscript.csh
./testscript.csh","#!/bin/tcsh -e  
echo ""Hi""  

# To run the script:
chmod +x script_name.csh  
./script_name.csh",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
su - user1
su - root
su - user2
screen
ll /dev/pts/1
```",None,None,,
,,,,,,,,,,,,,,,,"df -m
df --help",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,df,"df

None

The provided information indicates a strange output from the `df` command specifically on the user's notebook. However, no specific steps or additional commands beyond running `df` are given that would consistently reproduce this issue in another environment. The problem seems related to the specific configuration or state of the userâs system (e.g., file systems and their statuses), but without more details about how this state is achieved, a precise test case cannot be constructed.

Therefore, the command provided by the user is `df`, but there are no additional reproducible steps given.",df,,
,,,,,,,,,,,,,,,,"```bash
touch test1.txt test2.txt
echo ""This is test1 line 1."" >> test1.txt
echo ""This is test1 line 2."" >> test1.txt
echo ""This is test1 line 3."" >> test1.txt
echo ""This is test1 line 4 and last line."" >> test1.txt
echo ""This is test2 line 1."" >> test2.txt
echo ""This is test2 line 2."" >> test2.txt
echo ""This is test2 line 3."" >> test2.txt
echo ""This is test2 line 4."" >> test2.txt
echo ""This is test2 line 5 and last line."" >> test2.txt
tail -1 --quiet *.txt
```",tail -1 --quiet *.txt,tail -1 --quiet *.txt,,
,,,,,,,,,,,,,,,,"```bash
ls -Z / 
ls -Zl /
```","ls -Z /
ls -Zl /","ls -Z /proc  
ls -Zl /proc",,
,,,,,,,,,,,,,,,,"dd if=/dev/zero of=/dev/null& pid=$!
kill -USR1 $pid; sleep 1; kill $pid 

Alternatively, a more specific and detailed reproduction based on the steps provided:

xterm 1:
dd if=/dev/sda3 of=/dev/sdb3

xterm 2:
ps -ef | grep dd
(assuming the pid of dd is collected as 3007)
kill -USR1 3007; sleep 1; kill 3007 

Note: The first set of commands provides a concise version that directly follows the description in the bug report. The second, more detailed version, closely mimics the steps described in the ""Steps to Reproduce"" section but uses `/dev/sda3` and `/dev/sdb3` as in the original report, which might require adjustment based on actual device names available on the system being tested.","dd if=/dev/zero of=/dev/null& pid=$!
kill -USR1 $pid; sleep 1; kill $pid","dd if=/dev/sda3 of=/dev/sdb3 &
pid=$!
kill -USR1 $pid; sleep 1; kill $pid",,
,,,,,,,,,,,,,,,,"```bash
export TERM=konsole
dircolors --sh /etc/DIR_COLORS
echo $LS_COLORS
```","echo $TERM
dircolors --sh /etc/DIR_COLORS","echo $TERM  
dircolors --sh /etc/DIR_COLORS",,
,,,,,,,,,,,,,,,,"```bash
cat > file1 <<EOF
1 abc
2 def
3 ghi
4 jkl
EOF

cat > file2 <<EOF
a 123
b 456
c 789
d 248
EOF

export LANG=zh_CN.GB18030
export LC_CTYPE=zh_CN.GB18030
export LC_NUMERIC=""zh_CN.GB18030""
export LC_TIME=en_US.UTF-8
export LC_COLLATE=""zh_CN.GB18030""
export LC_MONETARY=""zh_CN.GB18030""
export LC_MESSAGES=en_US.UTF-8
export LC_PAPER=""zh_CN.GB18030""
export LC_NAME=""zh_CN.GB18030""
export LC_ADDRESS=""zh_CN.GB18030""
export LC_TELEPHONE=""zh_CN.GB18030""
export LC_MEASUREMENT=""zh_CN.GB18030""
export LC_IDENTIFICATION=""zh_CN.GB18030""
export LC_ALL=

cut -d "" "" -f 1 file1 file2
```","echo -e ""1 abc\n2 def\n3 ghi\n4 jkl"" > file1
echo -e ""a 123\nb 456\nc 789\nd 248"" > file2
export LANG=zh_CN.GB18030
export LC_CTYPE=zh_CN.GB18030
export LC_NUMERIC=""zh_CN.GB18030""
export LC_TIME=en_US.UTF-8
export LC_COLLATE=""zh_CN.GB18030""
export LC_MONETARY=""zh_CN.GB18030""
export LC_MESSAGES=en_US.UTF-8
export LC_PAPER=""zh_CN.GB18030""
export LC_NAME=""zh_CN.GB18030""
export LC_ADDRESS=""zh_CN.GB18030""
export LC_TELEPHONE=""zh_CN.GB18030""
export LC_MEASUREMENT=""zh_CN.GB18030""
export LC_IDENTIFICATION=""zh_CN.GB18030""
cut -d "" "" -f 1 file1 file2","touch file1 && echo -e ""1 abc\n2 def\n3 ghi\n4 jkl"" > file1
touch file2 && echo -e ""a 123\nb 456\nc 789\nd 248"" > file2
export LANG=zh_CN.GB18030 LC_CTYPE=zh_CN.GB18030 LC_NUMERIC=""zh_CN.GB18030"" LC_TIME=en_US.UTF-8 LC_COLLATE=""zh_CN.GB18030"" LC_MONETARY=""zh_CN.GB18030"" LC_MESSAGES=en_US.UTF-8 LC_PAPER=""zh_CN.GB18030"" LC_NAME=""zh_CN.GB18030"" LC_ADDRESS=""zh_CN.GB18030"" LC_TELEPHONE=""zh_CN.GB18030"" LC_MEASUREMENT=""zh_CN.GB18030"" LC_IDENTIFICATION=""zh_CN.GB18030""
cut -d "" "" -f 1 file1 file2",,
,,,,,,,,,,,,,,,,"su 
(enter correct root password and press enter)",None,None,,
,,,,,,,,,,,,,,,,"```bash
export TERM=gnome
export COLORS=
source /etc/profile.d/colorls.sh
alias ll
alias l.
```",None,None,,
,,,,,,,,,,,,,,,,"su 

Note: Since the issue occurs only on the first invocation of 'su' per day and is intermittent, reproducing it exactly as described may require waiting until the next day or finding a way to simulate a new day for the system's cron jobs. However, simply running 'su' is the core action reported to trigger the bug.",None,None,,
,,,,,,,,,,,,,,,,"```bash
data=""b      0
b     88
a      0
a  17454
a   2338""
echo ""$data"" | sort -k1,1 -k2bn,2
```","data=""b      0
b     88
a      0
a  17454
a   2338""
echo ""$data"" | sort -k1,1 -k2bn,2","```bash
data=""b      0
b     88
a      0
a  17454
a   2338""
echo ""$data"" | sort -k1,1 -k2bn,2
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir reproducer
cd reproducer
touch file1 file2 file3
ls --format=vertical
ls -C
```","None

The provided bug report indicates that recompiling from virgin source code resolved the issue. Since the problem was related to patches in the Fedora distribution rather than the original source, there isn't a specific command or set of conditions within the standard usage of `ls` that would reproduce this particular behavior without relying on the affected distribution's version. Therefore, no reproducible test case exists with just the information given about using standard commands and files.",None,,
,,,,,,,,,,,,,,,,"```bash
mount /dev/hda7 /mnt/hda7
chroot /mnt/hda7 /bin/bash
```","mount /dev/hda7 /mnt/hda7
chroot /mnt/hda7 /bin/bash","mount /dev/hda7 /mnt/hda7
chroot /mnt/hda7 /bin/bash",,
,,,,,,,,,,,,,,,,"```bash
echo ""OPTIONS=-F"" >> /etc/DIR_COLORS
source /etc/profile.d/colorls.sh
ls
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
su -l
echo $XAUTHORITY
exit

xauth &  # in another window, leave running
su -l
echo $XAUTHORITY
exit
```","su -l
echo $XAUTHORITY; exit
# In another user window:
xauth
# Then in the first terminal again:
su -l
echo $XAUTHORITY; exit",None,,
,,,,,,,,,,,,,,,,du -h /var/log/lastlog,"cd /var/log
du -h lastlog","cd /var/log
du -h lastlog",,
,,,,,,,,,,,,,,,,ls -lZ /root,ls -lZ,ls -lZ /root,,
,,,,,,,,,,,,,,,,"rpm -e --nodeps bison
rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec",None,None,,
,,,,,,,,,,,,,,,,"cd /bin
ls -1
ls --format=single-column","cd /bin
ls --format=single-column","cd /bin  
ls --format=single-column",,
,,,,,,,,,,,,,,,,"```bash
mkdir test
cd test
touch a b
mv -i --reply=no a b
ls
```","touch a b
mv -i --reply=no a b
ls","touch a b
mv -i --reply=no a b
ls",,
,,,,,,,,,,,,,,,,"```bash
LANG=ja_JP.UTF-8 ls -l
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
# Test case 1: Simple rm command
touch x
rm x

# Test case 2: NFS server setup and symlink creation
mkdir /mnt/nfs
mount -t nfs4 nfs-server:/share /mnt/nfs
ln -s /mnt/nfs/target /symlink
poweroff nfs-server  # Assuming this is a controlled test environment
rm /symlink
```","touch x
rm x

mkdir -p /localdir
mount -o intr,nfsvers=3 <nfs_server_ip>:/remotedir /localdir
ln -s /localdir/remotefile /localdir/symlinkfile
umount /localdir
rm /localdir/symlinkfile",None,,
,,,,,,,,,,,,,,,,"```bash
id
touch one
ls -l one
ln -s one two
ls -l
chmod u+s two
ls -l
chown mysql two
ls -l
```",None,"touch one  
ln -s one two  
chmod u+s two  
chown mysql two  
ls -l",,
,,,,,,,,,,,,,,,,"rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec 

(Note: This command assumes that the coreutils package is not installed or the autoconf and automake versions are lower than the required versions, i.e., autoconf < 2.58 and automake < 1.8)",rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""1:Ben
2:Mike
3:Scott"" > file1
echo ""1:Beer
2:Coke
3:Whisky"" > file2
join -t ':' file1 file2
```","echo -e ""1:Ben\n2:Mike\n3:Scott"" > file1
echo -e ""1:Beer\n2:Coke\n3:Whisky"" > file2
join -t ':' file1 file2","echo -e ""1:Ben\n2:Mike\n3:Scott"" > file1
echo -e ""1:Beer\n2:Coke\n3:Whisky"" > file2
join -t ':' file1 file2",,
,,,,,,,,,,,,,,,,"```bash
su another_user
exit
getenforce
secon --self
```
Please replace `another_user` with an actual username on your system that you want to switch to.

However, please note that reproducing this issue also requires specific PAM and SELinux configurations which may not be present in all systems. 

To fully reproduce the bug as described, additional setup steps would include:
1. Ensuring SELinux is enabled (`getenforce` should output ""Enforcing"").
2. Having pam_selinux included in /etc/pam.d/su.
3. Verifying that PAM modules are executed with incorrect security contexts upon logout.

Due to the complexity of setting up such an environment, a fully reproducible test case might require additional commands and system configuration changes beyond what's provided here.",None,None,,
,,,,,,,,,,,,,,,,"su - rpm -s /bin/bash -c ""ls /""","su - rpm -s /bin/bash -c ""ls /""",None,,
,,,,,,,,,,,,,,,,"```bash
ls -lZ /
```","None

The provided bug description does not include specific commands or a test case that can be directly executed to reproduce the issue. The steps mentioned are high-level and depend on the environment (SE Linux) which cannot be precisely reproduced without more details about how SE Linux is configured and what exactly constitutes a ""user_r"" user in this context.",None,,
,,,,,,,,,,,,,,,,"```bash
# On the NFS server (e.g., sam)
mkdir /home1/olchansk
mkfs.reiserfs /dev/hda2
mount /dev/hda2 /home1/olchansk

# On the client (e.g., jam)
mkdir /home/olchansk
mount -t nfs sam:/home1/olchansk /home/olchansk
df /home/olchansk
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir source destination
touch source/file1 destination/file1
mv -i --reply=no source/* destination/
```","touch file1.txt file2.txt
mkdir /some/directory
echo ""existing content"" > /some/directory/file1.txt
mv -i --reply=no file1.txt file2.txt /some/directory",None,,
,,,,,,,,,,,,,,,,"rpm -i coreutils-5.2.1-3.src.rpm
rpm -qilv coreutils-5.2.1
which kill 
ls -l /bin/kill /usr/bin/kill",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir ~/k
cd ~/k
ln -s / foo
rm foo/
rm -f foo/
rm -rf foo/
rm -r foo/
rm -r foo
```","mkdir ~/k
cd ~/k
ln -s / foo

rm foo/
rm -f foo/
rm -rf foo/
rm -r foo/
rm -r foo","mkdir ~/k  
cd ~/k  
ln -s / foo  
rm -f foo/  
rm -rf foo/  
rm -r foo/  
rm -r foo",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"su - 
(idenfify that you are a non-root user and then run)
su -
Password: (enter password)",su -,None,,
,,,,,,,,,,,,,,,,"```bash
# Create files one and two with provided content
cat > one <<EOF
980 999.000 0.000 C      61
987 999.000 0.000 HB3    62
988 999.000 0.000 QB     62
991 999.000 0.000 HG3    62
992 999.000 0.000 QG     62
993 999.000 0.000 CD     62
994 999.000 0.000 HE2    62
995 999.000 0.000 C      62
998 999.000 0.000 HG3    62
EOF

cat > two <<EOF
980 999.000 0.000 C      61
987 999.000 0.000 HB3    62
988 999.000 0.000 QB     62
991 999.000 0.000 HG3    62
992 999.000 0.000 QG     62
993 999.000 0.000 CD     62
994 999.000 0.000 HE2    62
995 999.000 0.000 C      62
1002 999.000 0.000 HB3    63
1003 999.000 0.000 QB     63
1004 999.000 0.000 CG     63
1007 999.000 0.000 QD2    63
1008 999.000 0.000 CD1    63
EOF

# Reproduce the bug by running comm -12 on files one and two
comm -12 one two

# Delete line starting with ""998"" in file one to demonstrate fix
sed -i '/^998/d' one

# Run comm -12 again after deleting the line
comm -12 one two
```","None

The provided bug report describes the issue and steps to observe different behaviors but does not provide concrete file contents for ""one"" and ""two"". Without knowing the exact content of these files, it is not possible to write a reproducible command or test case.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /root
chmod 000 /root
su -
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LANG=ja_JP.UTF-8 ls -l
```",LANG=ja_JP.UTF-8 ls -l,LANG=ja_JP.UTF-8 ls -l,,
,,,,,,,,,,,,,,,,"```bash
./configure
make
checkinstall
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ls -l / | head -2
ls -l /etc | head -2
```","ls -l / | head -2
ls -l /etc | head -2","ls -l /
ls -l /etc",,
,,,,,,,,,,,,,,,,"man ls | grep -E '--context|-Z' 
ls --help | grep -E '--context|-Z'",None,None,,
,,,,,,,,,,,,,,,,"1. Load kernel with enabled SELinux
2. rpmbuild --rebuild coreutils-5.2.0-8.src.rpm
3. tests/du/deref-args 
4. du -kD slink-to-64k",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
status=`ls nothing`
echo $status
```","status=`ls nothing`
echo $status",None,,
,,,,,,,,,,,,,,,,"sort -M <<EOF
Feb
Jan
EOF","sort -M <<EOF
Feb
Jan
EOF","sort -M <<EOF
Feb
Jan
EOF",,
,,,,,,,,,,,,,,,,"```bash
touch file
chown user.group file
```","chown user.group file
ls -l file",chown user.group file,,
,,,,,,,,,,,,,,,,"```bash
rm -f xx
ls -al xx
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir a b
ln -s a c
ln -sf b c
ls -l c
```","mkdir a b
ln -s a c
ln -sf b c","mkdir a b  
ln -s a c  
ln -sf b c",,
,,,,,,,,,,,,,,,,"chroot .
id
bash -c '[ ]'",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch /tmp/empty
mv /tmp/empty /usr
```","touch /tmp/empty
mv /tmp/empty /usr",None,,
,,,,,,,,,,,,,,,,"```bash
echo ""<NAME>"" >> /etc/hosts
hostname <NAME>
reboot
hostname
```",None,None,,
,,,,,,,,,,,,,,,,ldd cat,ldd cat,ldd cat,,
,,,,,,,,,,,,,,,,"su - 
screen 
ll",None,None,,
,,,,,,,,,,,,,,,,"```bash
# Create a new user in LDAP (this step is not directly reproducible without an LDAP setup)
# For demonstration purposes, assume 'hans' is the username and it exists in the LDAP database

# Configure PAM to use pam_mkhomedir
echo ""#%PAM-1.0"" > /etc/pam.d/su
echo ""auth       sufficient   /lib/security/pam_rootok.so"" >> /etc/pam.d/su
echo ""auth       required     /lib/security/pam_stack.so service=system-auth"" >> /etc/pam.d/su
echo ""account    required     /lib/security/pam_stack.so service=system-auth"" >> /etc/pam.d/su
echo ""password   required     /lib/security/pam_stack.so service=system-auth"" >> /etc/pam.d/su
echo ""session    required     /lib/security/pam_mkhomedir.so skel=/etc/skel/ umask=0022"" >> /etc/pam.d/su
echo ""session    required     /lib/security/pam_stack.so service=system-auth"" >> /etc/pam.d/su
echo ""session    optional     /lib/security/pam_xauth.so"" >> /etc/pam.d/su

# Ensure the skel directory exists and is properly configured
mkdir -p /etc/skel/

# Test the setup by attempting to create a home directory for 'hans' using su
su - hans
```","None

The provided information describes a configuration issue related to PAM and LDAP that causes home directory creation to fail when using the `su` command. It does not provide a simple command or set of commands from coreutils that can be used to directly reproduce the issue, as it involves specific configurations in `/etc/pam.d/su`, an LDAP server setup, and the expected behavior of PAM modules which are external to coreutils. Therefore, no direct command or test case is available based on this description alone.",None,,
,,,,,,,,,,,,,,,,"```bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done
```","#!/bin/bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done","for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done",,
,,,,,,,,,,,,,,,,"```bash
alias ls='ls --color=tty'
mkdir testdir
touch testdir/file{1..1000}
ls testdir
# Press Ctrl+C while ls is running
echo ""Hello World""
```","alias ls='ls --color=tty'
touch {1..50}.txt
chmod +x 25.txt
ls -l &
sleep 1
kill %1","alias ls='ls --color=tty'
touch file1 file2 file3
chmod +x file1
ls
# Press Ctrl+C while ls is running",,
,,,,,,,,,,,,,,,,"su 
df -a 
df -l","df -a
df -l","df -a
df -l",,
,,,,,,,,,,,,,,,,"```bash
su -l
echo $PATH

# As opposed to:
login root
echo $PATH
```","su -l
echo $PATH

login from a terminal as root
echo $PATH",None,,
,,,,,,,,,,,,,,,,"```bash
echo 3.456 > /tmp/foo; echo 34.500 >> /tmp/foo; echo 345.600 >> /tmp/foo
LC_ALL=en_US.utf8 sort /tmp/foo
```","echo 3.456 > /tmp/foo; echo 34.500 >> /tmp/foo; echo 345.600 >> /tmp/foo
LC_ALL=en_US.utf8 sort /tmp/foo",echo 3.456 > /tmp/foo; echo 34.500 >> /tmp/foo; echo 345.600 >> /tmp/foo; LC_ALL=en_US.utf8 sort /tmp/foo,,
,,,,,,,,,,,,,,,,"```bash
cp /etc/DIR_COLORS ~/.dircolors
echo ""Modify ~/.dircolors to change coloring"" >> ~/.dircolors
csh
test -f ""~/.dircolors"" && set COLORS=""~/.dircolors""
ls
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkfifo /tmp/aaa /tmp/aab
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &
sort -m -n /tmp/aaa /tmp/aab >/dev/null &
```","mkfifo /tmp/aaa /tmp/aab
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &
sort -m -n /tmp/aaa /tmp/aab >/dev/null &","mkfifo /tmp/aaa /tmp/aab
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &
sort -m -n /tmp/aaa /tmp/aab >/dev/null &",,
,,,,,,,,,,,,,,,,"```bash
echo ""jÃºnio"" > file
echo ""junio"" >> file
echo ""jÃºnio"" >> file
cat file | sort -u
```",None,None,,
,,,,,,,,,,,,,,,,cat foo.txt | sort -M,cat foo.txt | sort -M,cat foo.txt | sort -M,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /path1/foo /path2
ln -s /path1/foo/ /path2/bar
cd /path2/bar
ls ..
cd ..
ls
```","mkdir -p /path1/foo /path2
cd /path2
ln -s /path1/foo bar
cd bar
ls ..
cd .. ; ls","```bash
mkdir -p /path1/foo /path2
cd /path2
ln -s /path1/foo bar
cd bar
ls ..
cd ..
pwd
ls
```",,
,,,,,,,,,,,,,,,,"man dd
info dd",None,info dd,,
,,,,,,,,,,,,,,,,"```bash
export LANG=en_US.UTF-8
printf ""%s  %s  %d  %s  %s\n"" $(seq 1 14391) $(seq 1 14391) $(seq -14391 14391) file{1..14391} /path/to/file{1..14391} > testfile
sort -k1,1n -k3,3n testfile
```","sort -k1,1n k3,3n",None,,
,,,,,,,,,,,,,,,,"```bash
ln -s /usr/local/mysql-max-4.1.0-alpha-pc-linux-i686 /usr/local/mysql
ls -Lld /usr/local/mysql
```","ln -s /usr/local/mysql-max-4.1.0-alpha-pc-linux-i686 /usr/local/mysql
ls -Ld /usr/local/mysql
ls -Lld /usr/local/mysql",None,,
,,,,,,,,,,,,,,,,"man sort
info sort","man sort
info sort",info sort,,
,,,,,,,,,,,,,,,,"```
LC_ALL=zh_CN.GB18030 ls -l
```",None,None,,
,,,,,,,,,,,,,,,,"where echo | head -1
which echo",None,"where echo | head -1
which echo",,
,,,,,,,,,,,,,,,,"/etc/profile.d/colorls.csh contains 'alias ls ls --color=tty'
source /etc/profile.d/colorls.csh
rpm -qf `which ls`",None,None,,
,,,,,,,,,,,,,,,,"```bash
# Create a new user
useradd testuser

# Set a password for the new user
passwd testuser

# Switch to the new user
su - testuser

# Attempt to switch to root using su
su
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
date --set=""2003-04-06 12:30:00""
TZ=EST date --date=yesterday
```","date --set=""Sat Apr 7 01:00:00 EDT 2003""
date --date=yesterday",date --date=yesterday,,
id,reporter,report-time,last-modified,status,priority,severity,product,component,summary/subject/title,class,expected result,observed/actual result,reproducible,steps to reproduce,input,llama,qwen,qwen-coder,link,comments
2343998,jstephen,2025-02-05T17:04:00Z,2025-02-06T13:14:54Z,ASSIGNED,unspecified,low,Fedora,coreutils,who -m prints no output,normal,"# who am i
root     pts/0        2025-02-05 11:35 (10.22.64.138)","# who -m
# ",Always,1. run 'who -m',$ who -m,"who -m 
who am i",who -m,"who -m  
who am i",https://bugzilla.redhat.com/show_bug.cgi?id=2343998,
2296026,Bruce Jerrick,2024-07-05T20:36:07Z,2024-11-21T10:43:32Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,sort -V' order differs from 'sort' when there are no numerics,normal,"1. a-xyz
    abc-xyz

2. a-xyz
    abc-xyz","1. a-xyz
    abc-xyz

2. abc-xyz
    a-xyz",Always,"- printf ""a-xyz\nabc-xyz\n"" | sort
- printf ""a-xyz\nabc-xyz\n"" | sort -V","$ printf """"a-xyz\nabc-xyz\n"""" | sort
$ printf """"a-xyz\nabc-xyz\n"""" | sort -V","```bash
printf ""a-xyz\nabc-xyz\n"" | sort -V
```","printf ""a-xyz\nabc-xyz\n"" | sort -V","printf ""a-xyz\nabc-xyz\n"" | sort -V",https://bugzilla.redhat.com/show_bug.cgi?id=2296026,
2325167,Florian Weimer,2024-11-11T11:29:27Z,2024-11-20T16:21:57Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils: nproc ignores affinity mask on machines with more than 1024 CPUs,normal,nproc should correctly return the number of available CPUs,"Fails on machines with >1024 CPUs, falling back to sysconf, which gives incorrect values",Always,Run nproc on a system with >1024 CPUs and observe incorrect output due to sched_getaffinity failure,,"nproc; sched_getaffinity -c $(nproc) && echo ""Success"" || echo ""Failure""; sysconf _SC_NPROCESSORS_ONLN",None,nproc,https://bugzilla.redhat.com/show_bug.cgi?id=2325167,
2311888,Lukas Ruzicka,2024-09-12T10:03:15Z,2024-09-12T11:45:23Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,sleep 100,None,sleep 100,https://bugzilla.redhat.com/show_bug.cgi?id=2311888,
2307847,Allison Karlitskaya,2024-08-26T09:16:20Z,2024-08-27T14:19:44Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils-9.5-8.fc41 no longer lists Cockpit logins in `who`,normal,The session should be listed in `who` (as it was with coreutils-9.5-7).,The 'web console' session is not listed in the output of who.,Always,"- Install cockpit, login to a session
- run 'who'",,"```bash
cockpit-session --login
who
```","```
1. Install cockpit
2. Login to a session
3. Run `who`
```","1. Install cockpit.
2. Login to a Cockpit session via web console.
3. Run the following command:

```sh
who
```

This should show that the 'web console' session is not listed in the output of `who`.",https://bugzilla.redhat.com/show_bug.cgi?id=2307847,
2296201,Sohum M,2024-07-07T19:15:05Z,2024-07-18T04:06:07Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,fold exit code is zero for non-existent file,normal,"If any file fails to open, the return code should be an error",The return code is successful,Always,"1.
  $ fold badfile
  fold: badfile: No such file or directory
  $ echo ""$?""
  0              # <<< should be non-zero ","$ fold badfile
$ echo $?
","```bash
fold badfile; echo ""$?""
```","fold badfile
echo ""$?""","```bash
fold badfile
echo ""$?""
```",https://bugzilla.redhat.com/show_bug.cgi?id=2296201,
1349579,Zing,2016-06-23T17:53:15Z,2024-07-08T16:15:42Z,CLOSED RAWHIDE,unspecified,low,Fedora,coreutils,"new DIR_COLOR* files say ""COLOR=none"" ignored... not sure if true or false?",normal,The DIR_COLORS* config files should clearly state how to disable colorization for ls,"The files say ""COLOR is recognized but ignored,"" causing confusion, while COLOR=none still works but is not officially recommended",Always,"Set COLOR=none in DIR_COLORS, run ls, and observe if colorization is disabled; check the config file wording for clarity",None,"```
ls --color=none
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1349579,
492369,Oscar Ferraro Nobile,2009-03-26T16:28:34Z,2024-06-16T08:39:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"problem assigning the special permissions (suid, sgid and sticky), isn't possible clear its ussing the numeric method",normal,,,,,"$ chmod 4755 filename
$ ls -l filename
$ chmod 0755 filename
$ ls -l filename
","```bash
chmod 4755 file; chmod 0755 file; ls -l file
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=492369,
2265756,xmm.user,2024-02-23T23:56:26Z,2024-05-31T09:16:32Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __libc_read(): cut killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2265756,
1346074,Pavel Raiskup,2016-06-13T20:57:54Z,2024-03-21T08:07:03Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,"RFE: chmod, add missing -L/-H/-h option to follow symbolic links",,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1346074,
2269948,Roberto,2024-03-17T14:36:10Z,2024-03-18T13:26:05Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"date command returns invalid date for 1976, May 30",normal,"dom 30 mag 1976, 00:00:00, CET","/usr/bin/date: data ""30 May 1976"" non valida",Always,"/usr/bin/date --date ""1976-05-30""","$ /usr/bin/date --date ""1976-05-30""","/usr/bin/date --date ""1976-05-30"" 
/usr/bin/date --date ""30 May 1976""","/usr/bin/date --date ""1976-05-30""","/usr/bin/date --date ""1976-05-30""",https://bugzilla.redhat.com/show_bug.cgi?id=2269948,
2126206,Chung,2022-09-12T20:41:04Z,2024-01-30T09:44:06Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -i/p is broken in latest version of RAWHIDE,normal,"$ uname -i
x86_64
$ $ uname -p
x86_64","$ uname -i
unknown
$ uname -p
unknown",Always,"- Install RAWHIDE
- Run uname -i or -p","$ uname -i
$ uname -p","uname -i 
uname -p","uname -i  
uname -p",None,https://bugzilla.redhat.com/show_bug.cgi?id=2126206,
2261852,IBM Bug Proxy,2024-01-30T05:40:17Z,2024-01-30T09:36:29Z,CLOSED DUPLICATE,unspecified,medium,Fedora,coreutils,uname --processor is broken from Fedora38 and above!,normal,ppc64le,unknown,Always,1) uname --processor,$ uname --processor,uname --processor,uname --processor,uname --processor,https://bugzilla.redhat.com/show_bug.cgi?id=2261852,
2258913,PÃ¡draig Brady,2024-01-18T00:35:48Z,2024-01-23T00:58:31Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,heap overflow in split --line-bytes with very long lines [fedora-all],normal,split -C should correctly handle large input sizes without causing memory corruption,"A heap overflow occurs when processing large inputs, potentially leading to a crash or security vulnerability",Always,"{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in  
split -C 131072 ---io=131072 in","{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in  
split -C 131072 ---io=131072 in","```bash
{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in; split -C 131072 ---io=131072 in
```","{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in
split -C 131072 ---io=131072 in","```bash
{ printf '%131070s\n' ''; printf 'x\n'; printf '%131071s\n' ''; } > in
split -C 131072 ---io=131072 in
```",https://bugzilla.redhat.com/show_bug.cgi?id=2258913,
2256513,Edgar Hoch,2024-01-02T20:18:59Z,2024-01-03T08:27:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,coreutils no longer provides /bin/ln,normal,,,Always,,,"```bash
rpm -q --whatprovides /bin/ln
```",None,"```bash
rpm -qf /bin/ln
```",https://bugzilla.redhat.com/show_bug.cgi?id=2256513,
2248503,Harald Reindl,2023-11-07T12:26:29Z,2023-11-07T12:52:36Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,uname -i don't work,normal,x86_64,breaking scripts,Always,uname -i,$ uname -i,uname -i,None,uname -i,https://bugzilla.redhat.com/show_bug.cgi?id=2248503,
2160675,Ondrej,2023-01-13T09:36:16Z,2023-09-21T00:15:45Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,[RFE] cp -p should copy NFSv4 acls,,,,Never,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2160675,
1121021,vikram goyal,2014-07-18T08:04:22Z,2023-09-14T02:11:42Z,CLOSED INSUFFICIENT_DATA,unspecified,unspecified,Fedora,coreutils,coreutils-8.21-21.fc20.x86_64 df (executed by root) does not show fuse.sshfs mount,normal,command 'mount' as a normal user & as root shows the fuse mount in output,"[vikram@mail2 ~]$ df
Filesystem                1K-blocks      Used Available Use% Mounted on
/dev/sdb6                 153942744  66849904  84503912  45% /
devtmpfs                    1520368         0   1520368   0% /dev
tmpfs                       1527604     99060   1428544   7% /dev/shm
tmpfs                       1527604       932   1526672   1% /run
tmpfs                       1527604         0   1527604   0% /sys/fs/cgroup
tmpfs                       1527604       708   1526896   1% /tmp
/dev/sda1                   1515376    172140   1248212  13% /boot
/dev/dm-0                 330327632 240421328  87183640  74% /home/vikram
root.XXX.XXX:/root  51606140   3660076  45324624   8% /home/vikram/someremoteloc


[root@mail2 ~]# df
Filesystem                1K-blocks      Used Available Use% Mounted on
/dev/sdb6                 153942744  66850280  84503560  45% /
devtmpfs                    1520368         0   1520368   0% /dev
tmpfs                       1527604     99060   1428544   7% /dev/shm
tmpfs                       1527604       932   1526672   1% /run
tmpfs                       1527604         0   1527604   0% /sys/fs/cgroup
tmpfs                       1527604       708   1526896   1% /tmp
/dev/sda1                   1515376    172140   1248212  13% /boot
/dev/dm-0                 330327632 240421552  87183456  74% /home/vikram

[root@mail2 ~]# uptime
 13:20:10 up 7 days, 19:14, 15 users,  load average: 0.21, 0.18, 0.48

[root@mail2 ~]# uname -a
Linux mail2.xxx 3.15.3-200.fc20.x86_64 #1 SMP Tue Jul 1 16:18:00 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux

[root@mail2 ~]# rpm -qf `which sshfs`
fuse-sshfs-2.4-5.fc20.x86_64",,"Mount a remote location in home dir/dir through sshfs as a normal user
execute df as root
excute df as the same uaer which mounted the remote location.",,"```bash
# As a normal user
sshfs user@remote:/path/to/remote/location /home/user/mount-point
df

# As root
df
```","sshfs user@remote_host:/path/to/remote /local/mount-point
df # executed as root
df # executed as the same user which mounted the remote location","```bash
sshfs user@remote_host:/path/to/remote /home/user/someremoteloc
df
sudo df
fusermount -u /home/user/someremoteloc
```",https://bugzilla.redhat.com/show_bug.cgi?id=1121021,
2236321,Ian Laurie,2023-08-30T21:47:26Z,2023-09-05T12:41:28Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,coreutils-9.4 reverts an undesirable change to the -v option that landed in coreutils-9.3,normal,"-v option in cp and mv should behave as it did before coreutils 9.3, providing consistent verbosity","In coreutils 9.3, cp -v and mv -v started skipping messages for files not copied due to -i or -u, breaking automation scripts",Always,Use cp -v -u or mv -v -u on coreutils 9.3,"$ cp -v -u <source> <destination>
$ mv -v -u <source> <destination>
",cp -u -v file1 file2; cp -i -v file1 file2,None,"```bash
cp -u -v source_file destination_file
mv -u -v source_file destination_file
```",https://bugzilla.redhat.com/show_bug.cgi?id=2236321,
2236739,lnie,2023-09-01T12:34:58Z,2023-09-01T12:40:36Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,sleep 50,None,sleep 50,https://bugzilla.redhat.com/show_bug.cgi?id=2236739,
2208048,Ben Woodard,2023-05-17T19:29:53Z,2023-05-17T20:28:32Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -i returns unknown,normal,x86_64 (or whatever the arch is),unknown,Always,"$ rpm -q coreutils
$ uname -i","$ rpm -q coreutils
$ uname -i",uname -m,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2208048,
2203350,Adam Williamson,2023-05-12T04:42:08Z,2023-05-14T15:29:17Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"uname -p on Fedora 38+ says ""unknown""",normal,It should say something...more useful,"It says ""unknown""",Always,Run `uname -p`,$ uname -p,`uname -p`,uname -p,uname -p,https://bugzilla.redhat.com/show_bug.cgi?id=2203350,
2189656,Tom Horsley,2023-04-25T20:16:52Z,2023-04-27T07:05:09Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"uname -p now returns ""unknown"" always returned ""x86_64"" previously",normal,x86_64,unknown,Always,uname -p,$ uname -p,uname -p,uname -p,uname -p,https://bugzilla.redhat.com/show_bug.cgi?id=2189656,
2188689,Dennis Gilmore,2023-04-21T16:37:56Z,2023-04-21T20:29:59Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,regression in uname -i from Fedora 37 to Fedora 38,normal,aarch64,unknown,Always,uname -i,$ uname -i,"uname -i 

This command is used to print the hardware platform name (also known as the machine hardware name). The bug report indicates that running this command on Fedora 37 returns ""aarch64"" while on Fedora 38 it returns ""unknown"". To reproduce the bug, simply run this command on both versions of Fedora and compare the output.","None

The report indicates that the issue is reproducible always but does not provide a specific command or test case beyond the `uname -i` invocation which simply reflects the observed symptom rather than a step to independently trigger or diagnose the bug. The discrepancy appears related to differences between Fedora 37 and 38, particularly with versions of coreutils, but without additional context on how these environments were set up or other environmental factors that might influence `uname -i` output, no precise test case beyond simply running `uname -i` can be identified as a means to reproduce the bug independently.",uname -i,https://bugzilla.redhat.com/show_bug.cgi?id=2188689,
1646701,Hin-Tak Leung,2018-11-05T21:08:15Z,2023-04-12T07:06:31Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,nothing provides /bin/basename needed by AdobeReader_enu-9.5.5-1.i486,normal,,"- nothing provides libidn.so.11 needed by AdobeReader_enu-9.5.5-1.i486
- nothing provides /bin/basename needed by AdobeReader_enu-9.5.5-1.i486",Always,Try to install adobe acrobat reader,$ sudo dnf install AdobeReader_enu-9.5.5-1.i486,"```bash
dnf install AdobeReader_enu-9.5.5-1.i486
```
or 
```bash
yum install AdobeReader_enu-9.5.5-1.i486
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1646701,
2175057,Michal Srb,2023-03-03T05:45:58Z,2023-03-03T05:47:32Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: pause(): sleep killed by SIGABRT,,,,,,,None,None,"sleep infinity  
kill -SIGABRT $(pgrep sleep)",https://bugzilla.redhat.com/show_bug.cgi?id=2175057,
2172323,lnie,2023-02-22T00:36:35Z,2023-02-22T00:38:39Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,sleep 500,None,sleep 500,https://bugzilla.redhat.com/show_bug.cgi?id=2172323,
2162873,Vladimir Benes,2023-01-21T17:13:02Z,2023-01-21T19:44:32Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,uname -p showing unknown,normal,,,Always,"# uname -p
unknown

# arch
x86_64

# cat /proc/cpuinfo 
processor        : 0
vendor_id        : GenuineIntel
cpu family        : 6
model                : 42
model name        : Intel(R) Pentium(R) CPU G640 @ 2.80GHz","$ uname -p
$ arch
$ cat /proc/cpuinfo",uname -p,"None

The provided information does not contain specific instructions or commands that can be used to reproduce a coreutils bug. The discrepancy between `uname -p` and `arch` is noted, but no direct relation to a bug in coreutils is clearly established with a reproducible test case or command.",None,https://bugzilla.redhat.com/show_bug.cgi?id=2162873,
1830619,Matthew Crews,2020-05-03T02:49:14Z,2022-12-13T10:58:33Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,"""date"" command shows wrong date format for en_US per commonly accepted United States standards",nomal,"Date should output per United States standards. IE
Sat May 02, 2020 07:44:45 PM MST","Date outputs in incorrect date format per United States standards. IE:
Sat 02 May 2020 07:44:45 PM MST",Always,"1. Set date format environment to ""en_US.UTF-8""
2. Issue ""date"" command or with ""date +%c""","$ LC_TIME=""en_US.UTF-8""  
$ date  
$ date +%c","```bash
LC_TIME=""en_US.UTF-8"" date
LC_TIME=""en_US.UTF-8"" date +%c
```","export LC_TIME=""en_US.UTF-8""; date +%c","```bash
LC_TIME=""en_US.UTF-8"" date +%c
```",https://bugzilla.redhat.com/show_bug.cgi?id=1830619,
2150513,Walter Schug,2022-12-03T15:49:53Z,2022-12-03T16:13:28Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: memset(): cat killed by SIGBUS,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2150513,
2138908,Walter Schug,2022-10-31T16:10:39Z,2022-12-03T16:13:28Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: memset(): cat killed by SIGBUS,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2138908,
2124510,TommyLike,2022-09-06T11:37:18Z,2022-09-29T08:21:23Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Check file permission command not work on aarch64 container,normal,,,Always,"write a test.sh with content and execute
```
if [ -w ""/root"" ] ; then echo 'Success!' ; fi
```",,"```bash
docker run --rm -it registry.fedoraproject.org/fedora:37 /bin/bash -c ""echo 'if [ -w \""/root\"" ] ; then echo \'Success!\' ; fi' > test.sh; bash test.sh""

docker run --rm -it registry.fedoraproject.org/fedora:35 /bin/bash -c ""echo 'if [ -w \""/root\"" ] ; then echo \'Success!\' ; fi' > test.sh; bash test.sh""

docker run --rm -it registry.fedoraproject.org/fedora:36 /bin/bash -c ""echo 'if [ -w \""/root\"" ] ; then echo \'Success!\' ; fi' > test.sh; bash test.sh""
```","None

The provided information indicates a discrepancy in behavior between x86 and aarch64 containers but does not specify actual steps or commands that can definitively reproduce the issue within a controlled environment for debugging purposes. The mention of `test.sh` with specific content is an example rather than a precise reproduction case, as it lacks detailed context on how to set up the necessary file permissions and environment to observe the discrepancy reliably across both architectures.","```bash
if [ -w ""/root"" ] ; then echo 'Success!' ; fi
```",https://bugzilla.redhat.com/show_bug.cgi?id=2124510,
2112870,Jonathan Wakely,2022-08-01T11:13:23Z,2022-08-25T07:47:34Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,unexpand cannot process form feed,normal,No error.,unexpand: input line is too long,Always,$ printf '\f'  | unexpand,$ printf '\f'  | unexpand,"```bash
printf '\f' | unexpand
```",printf '\f' | unexpand,"```sh
printf '\f' | unexpand
```",https://bugzilla.redhat.com/show_bug.cgi?id=2112870,
548834,Bruno Wolff III,2009-12-18T18:47:13Z,2022-08-23T12:38:33Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,uname -i started returning unknown,normal,i386,unknown,Always,uname -i,$ uname -i,uname -i,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=548834,
2112593,Dimitris,2022-07-30T21:00:40Z,2022-08-08T15:19:14Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Error using custom ~/.dir_colors/DIR_COLORS,normal,No error.,/usr/bin/cat: /home/user/.dir_colors: Is a directory,Always,"1. mkdir ~/.dir_colors
2. cp /etc/DIR_COLORS ~/.dir_colors
3. gnome-terminal","$ mkdir ~/.dir_colors
$ cp /etc/DIR_COLORS ~/.dir_colors
$ gnome-terminal","```bash
mkdir ~/.dir_colors
cp /etc/DIR_COLORS ~/.dir_colors
gnome-terminal
```","None

The steps provided in the ""Steps to Reproduce"" section contain an error that does not align with the expected outcome for reproducing the described issue. Specifically, Step 1 suggests making a directory named `.dir_colors`, which will inevitably cause `cat` or any other command expecting a file input to fail when trying to process `.dir_colors` as if it were a file, leading to the error message mentioned in the bug description.

To actually reproduce the intended behavior (creating a customizable color scheme for `ls`) and avoid the described issue, one would not create a directory but rather a file named `.dir_colors`. Since the task is specifically about identifying commands or test cases that match the provided steps (even if erroneous), ""None"" is returned as the exact command sequence given leads to an incorrect setup unrelated to the intended customization of `ls` colors via a file.","mkdir ~/.dir_colors  
cp /etc/DIR_COLORS ~/.dir_colors  
gnome-terminal",https://bugzilla.redhat.com/show_bug.cgi?id=2112593,
2104212,jiri vanek,2022-07-05T19:04:46Z,2022-07-05T23:20:40Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,adapt coreutils to removal of java on i686,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=2104212,
1993544,Andrew,2021-08-13T19:47:45Z,2022-06-07T22:27:11Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,`tr -d` works with non-latin letters incorrectly,normal,,"`tr -d` does not delete non-latin chars as it have to.
Sed does the same correctly.",Always,"# tr does not work with non-latin
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
ï¿½ï¿½ï¿½ÑÑï¿½ï¿½
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
ÃÃÃÃ¤Ã¶Ã¼
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
ÃÃÃÃ¤Ã¶Ã¼
# tr works with latin
$ echo abcABC | tr -d [:alpha:]

$ echo abcABC | tr -d [[:alpha:]]

$

# sed works with non-latin
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | sed s/[Ð°Ð±Ð²]*//
ÐÐÐÑÑÐÐ
$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | sed s/[[:alpha:]]*//

$ echo ÃÃÃÃ¤Ã¶Ã¼ | sed s/[[:alpha:]]*//

$","$ echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
$ echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]","```bash
echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
echo abcABC | tr -d [:alpha:]
echo abcABC | tr -d [[:alpha:]]
```","echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]","```sh
echo Ð°Ð±Ð²ÐÐÐÑÑÐÐ | tr -d Ð°Ð±Ð²
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [:alpha:]
echo ÃÃÃÃ¤Ã¶Ã¼ | tr -d [[:alpha:]]
```",https://bugzilla.redhat.com/show_bug.cgi?id=1993544,
2066546,lnie,2022-03-22T03:42:44Z,2022-03-22T07:28:39Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __clock_nanosleep(): sleep killed by SIGSEGV,,,,,,,"```bash
sleep 500
```",None,sleep 500,https://bugzilla.redhat.com/show_bug.cgi?id=2066546,
2035258,HÃ©ctor Louzao,2021-12-23T12:11:25Z,2022-01-03T12:29:46Z,CLOSED WORKSFORME,unspecified,urgent,Fedora,coreutils,install coreutils Program Not found,normal,found in /usr/bin/install,"program not found 

another coretuils are found for example

which id
/usr/bin/id",Always,"1.install coreutils package
2.sudo /usr/bin/install
3.command not found","$ sudo dnf install coreutils
$ sudo /usr/bin/install","```bash
sudo yum install -y coreutils
sudo /usr/bin/install
```","None

The provided information does not describe a typical software bug where a specific command or set of steps can be executed to consistently produce an error. Instead, it appears that there is confusion about finding the `install` program in the expected location (`/usr/bin/install`). The reported issue seems more like a setup or installation problem rather than a reproducible coreutils bug, as indicated by the mention of a ""carpet"" (likely meant to be ""file"" or ""item"") named `install` in `/usr/bin`. Without clear steps that would reproduce an error due to a software defect, we cannot provide a specific command or test case.",None,https://bugzilla.redhat.com/show_bug.cgi?id=2035258,
1831575,david08741,2020-05-05T10:25:28Z,2021-11-30T16:16:10Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,valid TZ depends on local TZ,normal,Tue 12 May 2020 12:00:00 PM CEST,date: invalid date â05/12/2020 11:00 CETâ,Always,1.TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',$ TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',"```bash
TZ=Europe/Berlin date -d '05/12/2020 11:00 CET'
```",TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',TZ=Europe/Berlin date -d '05/12/2020 11:00 CET',https://bugzilla.redhat.com/show_bug.cgi?id=1831575,
749704,JW,2011-10-28T01:07:56Z,2021-11-23T15:20:48Z,CLOSED WONTFIX,unspecified,unspecified,Fedora,coreutils,date cannot easily produce lower case formatted output,normal,"1. Fri
2. FRI
3. fRI
4. fri","1. Fri
2. FRI
3. FRI
4. %/a",Always,"1. date +%a
2. date +^a
3. date +#a
4. date +%/a","$ date +%a
$ date +^a
$ date +#a
$ date +%/a","```bash
date +%a
date +%^a
date +#a
date +%/a
```","None

The provided steps in the ""Steps to Reproduce"" section do not align with the described issue since they use incorrect format specifiers that don't correspond to any valid strftime options for producing lowercase abbreviated day-of-week names directly. The reported problem focuses on the expectation of a lowercase modifier which is not currently supported and thus there isnât a direct command sequence provided or available in coreutils as per standard usage to reproduce this specific issue related to the absence of a lower-case modifier feature.","```
date +%a
date +^a
date +#a
```",https://bugzilla.redhat.com/show_bug.cgi?id=749704,
963134,Petr Å abata,2013-05-15T08:30:17Z,2021-11-23T15:18:00Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,fmt doesn't support unicode,,,,,,,"```bash
fmt --width=10 <<< ""$'\u4f60\u597d'"" 
```",None,"echo -e ""\u4E2D\u6587\n"" | fmt -w 10",https://bugzilla.redhat.com/show_bug.cgi?id=963134,
1956080,Chris Murphy,2021-05-02T15:49:53Z,2021-11-23T15:10:59Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,cp --reflink=never no longer works as expected,normal,They should not be reflink copies,a and b share all extents,Always,"1. cp --reflink=never a b
2. filefrag -v a; filefrag -v b","$ cp --reflink=never a b
$ filefrag -v a; filefrag -v b","```bash
cp --reflink=never a b; filefrag -v a; filefrag -v b
```","cp --reflink=never a b
filefrag -v a; filefrag -v b","```
cp --reflink=never a b
filefrag -v a; filefrag -v b
```",https://bugzilla.redhat.com/show_bug.cgi?id=1956080,
1913358,Christian Kujau,2021-01-06T15:05:43Z,2021-09-17T10:47:06Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,df: /run/user/1000/doc: Operation not permitted,normal,df should exit with RC 0 and stderr should be empty.,df: /run/user/1000/doc: Operation not permitted,Always,"1. xdg-document-portal.service is running, as it is the default
2. execute df w/o for all file systems
3. RC 1","$ xdg-document-portal.service is running, as it is the default
$ execute df w/o for all file systems
$ RC 1",df -h > /dev/null; echo $?,df -h > /dev/null; echo $?,df -h > /dev/null; echo $?,https://bugzilla.redhat.com/show_bug.cgi?id=1913358,
1992341,Samuel Bautista,2021-08-10T22:37:21Z,2021-08-11T06:45:43Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: _dbus_warn_check_failed(): true killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1992341,
1982273,RobbieTheK,2021-07-14T15:19:27Z,2021-07-14T20:48:52Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,bash: uname: command not found for root user: package coreutils-8.32-21.fc34.x86_64 conflicts with coreutils-single provided by coreutils-single-8.32-21.fc34.x86_64,,,,,,,"To reproduce this bug, you would need a system with Fedora 34 installed and then perform the following steps:

1. Upgrade the system using `dnf update` to ensure all packages are up-to-date.
2. Specifically upgrade coreutils and related packages to version 8.32-30.fc34.x86_64 if they are not already at this version, although this step might be covered by a general `dnf update`.
3. Verify the system is running kernel version 5.12.14-300.fc34.x86_64.
4. Attempt to log in as root or use `su` or `scp` to connect as root and verify that commands like `uname`, `cat`, etc., are not found.

Given these steps, a simplified test case could involve:

```bash
# Ensure the system is updated
sudo dnf update

# Check kernel version
uname -r

# Attempt to reproduce the error by logging in as root or using su/scp
su -

# Inside the su session or after logging in as root
uname
cat --version
```

This sequence checks for the presence of the issue without directly attempting to install conflicting packages, which is not straightforward due to the package manager's conflict resolution mechanisms. The critical part here is observing whether basic commands like `uname` and `cat` are recognized after switching to the root user or logging in as root via a method that might trigger the bug (e.g., `su`, `scp`).",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1982273,
1960792,PaweÅ,2021-05-14T22:19:10Z,2021-05-19T01:22:03Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,rpmbuild fails at the test stage,normal,,"Building a package ends with a failure.

FAIL: tests/ls/stat-free-color.sh",Always,"rpmbuild -bb coreutils.spec
or 
rpmbuild --rebuild coreutils-8.32-24.fc34.src.rpm","$ rpmbuild -bb coreutils.spec 
$ rpmbuild --rebuild coreutils-8.32-24.fc34.src.rpm","Based on the provided log output, it appears that the bug is related to the `ls` command's behavior when displaying colored output and performing stat system calls.

The relevant commands to reproduce the bug are:

1. `mkdir d`
2. `strace -q -o log1 ls --color=always d` (or equivalent using `strace` or another system call tracing tool)
3. `mkdir d/subdir`
4. `touch d/regf`
5. `ln d/regf d/hlink`
6. `ln -s regf d/slink`
7. `ln -s nowhere d/dangle`
8. `strace -q -o log2 ls --color=always d` (or equivalent using `strace` or another system call tracing tool)

The test case seems to be checking if the number of stat system calls performed by `ls` when displaying colored output remains constant, even when additional files and directories are added to the directory being listed. The bug is triggered because the second run of `ls` performs one more stat system call than the first run.

To reproduce the bug, you can use the following test case:

```bash
#!/bin/bash

# Create a directory and subdirectory
mkdir d
mkdir d/subdir

# Create regular files and symlinks
touch d/regf
ln d/regf d/hlink
ln -s regf d/slink
ln -s nowhere d/dangle

# Run ls with colored output and strace to log system calls
strace -q -o log1 ls --color=always d
n_stat1=$(grep -vF +++ log1 | wc -l)

# Add more files or directories (not needed in this case)
# ...

# Run ls again with colored output and strace to log system calls
strace -q -o log2 ls --color=always d
n_stat2=$(grep -vF +++ log2 | wc -l)

# Check if the number of stat system calls has increased
if [ $n_stat1 -ne $n_stat2 ]; then
    echo ""FAIL: Number of stat system calls has changed""
    exit 1
else
    echo ""PASS: Number of stat system calls remains constant""
    exit 0
fi
```

This test case creates the necessary files and directories, runs `ls` with colored output and strace to log system calls, and checks if the number of stat system calls has increased. If the number of stat system calls has changed, it indicates a failure and exits with a non-zero status code.","To reproduce the bug described in the given output, you need to follow a series of steps that involve setting up and running specific tests for the `ls` command within the context of the Coreutils package version 8.32.

### Steps to Reproduce:

1. **Clone or download the Coreutils source code:**
   Ensure you have access to the Coreutils 8.32 source code.
   ```sh
   git clone https://git.savannah.gnu.org/git/coreutils.git
   cd coreutils
   git checkout v8.32
   ```

2. **Build the Coreutils package:**
   You need to configure and build the package so that you have access to the test suite.
   ```sh
   ./bootstrap
   ./configure
   make
   ```

3. **Run the specific test case:**
   The failing test is `tests/ls/stat-free-color.sh`. Navigate to this directory and run it.

   ```sh
   cd tests/ls/
   ../gt-stat-free-color.sh  # or directly: sh stat-free-color.sh
   ```

### Explanation of Test Case:

The `stat-free-color.sh` script checks if the `ls` command can display colored output without making unnecessary system calls (`stat`, `lstat`, etc.). The failing condition is detected when the number of system calls made during different runs (with and without subdirectories) does not match as expected.

#### Key Observations from Logs:
- **log1** (without subdirectory):
  ```sh
  statx(AT_FDCWD, ""d"", AT_STATX_SYNC_AS_STAT, STATX_MODE, {stx_mask=STATX_BASIC_STATS|STATX_MNT_ID, stx_attributes=0, stx_mode=S_IFDIR|0755, stx_size=40, ...}) = 0
  ```

- **log2** (with subdirectory):
  ```sh
  statx(AT_FDCWD, ""d"", AT_STATX_SYNC_AS_STAT, STATX_MODE, {stx_mask=STATX_BASIC_STATS|STATX_MNT_ID, stx_attributes=0, stx_mode=S_IFDIR|0755, stx_size=140, ...}) = 0
  ```

Notice the difference in `stx_size` (directory size) which leads to an unexpected number of system calls.

### Expected Outcome:
The test should pass if the number of `stat`, `lstat`, etc., calls made by the `ls` command is consistent across different directory structures, as expected by the script logic. The failing condition suggests that there may be a discrepancy in how the file system metadata is being handled or cached.

### Debugging Steps:
1. **Check Coreutils Build and Configuration:**
   Ensure your build environment matches the conditions under which this bug was observed.
   
2. **Inspect `ls` Behavior:**
   Use tools like `strace` to inspect the exact system calls made by `ls` in both scenarios.

3. **Review Patch or Changesets:**
   Check for any recent patches or changes that might have affected the behavior of `ls` regarding file metadata handling and caching.

By following these steps, you should be able to reproduce and debug this specific issue related to `ls` performance and system call consistency when displaying colored output with various directory structures.","To reproduce the bug described in the logs, you would need to run a specific test case from the `coreutils` package's testing suite. Specifically, the issue seems to be related to the `ls` command and its behavior with color output when it doesn't have access to the terminal (or when coloring is explicitly disabled).

Here are the steps required to reproduce the bug:

1. **Install coreutils sources:**
   First, you need to download or clone the source code of `coreutils`. If you're using a Linux distribution that supports package management, you might be able to get the source from there. Otherwise, you can clone it directly from the repository.

   ```bash
   git clone https://git.savannah.gnu.org/git/coreutils.git
   cd coreutils
   ```

2. **Prepare the build environment:**
   Follow the standard procedure for building a package from source. You may need to install additional dependencies if they are not already installed on your system.

   ```bash
   ./bootstrap # generate configure script and other files
   ./configure # prepare the build system
   make        # compile the package
   ```

3. **Run the specific test case:**
   The problematic test is `tests/ls/stat-free-color.sh`. Navigate to the tests directory and run this particular test.

   ```bash
   cd tests
   env NO_COLOR=t ./stat-free-color.sh
   ```

   Note that `env NO_COLOR=t` ensures that color output is disabled, which seems to be relevant based on the logs. If you want to replicate the exact environment where it failed (e.g., with a terminal), you can omit this part.

4. **Check the test result:**
   The test should output the results and possibly fail if there's an issue with `ls` behavior in color-free mode. The failure will provide similar logs as those shown in your bug description.

By following these steps, you should be able to reproduce the bug with the `ls` command when used without terminal coloring. If you encounter any issues during the process (like missing dependencies), make sure all required tools and libraries are installed on your system before proceeding with the build and test execution.",https://bugzilla.redhat.com/show_bug.cgi?id=1960792,
1955493,AurÃ©lien RouÃ«nÃ©,2021-04-30T09:02:35Z,2021-04-30T10:47:28Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,F34 chmod on btrfs mess up the permissions,normal,,"Doing a chmod other than 777 on a directory in the /home/user mess up the permissions, then permissions are shown as 'd?????????'.",Always,"$ mkdir test                    
$ touch test/file
$ ll -a test     
total 0
drwxr-xr-x. 1 arouene arouene   8 Apr 30 10:47 .
drwx------. 1 arouene arouene 840 Apr 30 10:47 ..
-rw-r--r--. 1 arouene arouene   0 Apr 30 10:47 file

$ chmod 0640 test 
$ ll -a test     
ls: cannot access 'test/.': Permission denied
ls: cannot access 'test/..': Permission denied
ls: cannot access 'test/file': Permission denied
total 0
d????????? ? ? ? ?            ? .
d????????? ? ? ? ?            ? ..
-????????? ? ? ? ?            ? file","$ mkdir test
$ touch test/file
$ ll -a test
$ chmod 0640 test
$ ll -a test
","```bash
mkdir test
touch test/file
chmod 0640 test 
ll -a test
```","mkdir test                    
touch test/file
chmod 0640 test 
ll -a test     ","mkdir test  
touch test/file  
ll -a test  
chmod 0640 test  
ll -a test",https://bugzilla.redhat.com/show_bug.cgi?id=1955493,
1952490,ricky.tigg,2021-04-22T11:44:20Z,2021-04-22T14:46:12Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,Default sorting not applied,normal,Order applied. No addition of empty argument.,"Default sorting â according to alphabetic order â not applied, be the option '-d' part of the command or not.",Always,"$ rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort","$ rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort","```bash
rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort
```","$ rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort

None

The provided command demonstrates the issue described in the bug report but does not provide a specific test case or additional command that can be directly used to reproduce the exact problem with different inputs or under controlled conditions. The reported behavior is observed when executing this command, but no further reproducible test case is explicitly stated beyond this example usage.","```bash
rpm -qa --queryformat ""%{NAME}-%{VERSION}\n"" automake autoconf m4 mingw64-* | column | sort
```",https://bugzilla.redhat.com/show_bug.cgi?id=1952490,
1944688,Vratislav Podzimek,2021-03-30T13:50:50Z,2021-03-30T14:22:43Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,/bin/basename not provided by the coreutils package,normal,,"""/bin/basename"" missing",,"# rpm -qf `which basename`
# rpm -q --provides coreutils","$ rpm -qf `which basename`
$ rpm -q --provides coreutils
","```bash
basename --version
rpm -q --whatprovides /bin/basename
```","None

The provided information does not include a specific bug or issue that needs to be reproduced; it only shows package version and file location details for `basename` as well as the provides list for `coreutils`. No concrete problem or symptom is described, so there are no commands or test cases given that would allow reproducing a bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1944688,
1634200,Uri Simchoni,2018-09-28T22:21:06Z,2021-03-30T14:22:41Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,/bin/basename does not appear as provided by coreutils-single,normal,repoquery should list coreutils-single as well.,"/bin/basename is installed, and shows up in local rpm query, but does not show up in repoquery. That appears to be causing a dnf install of an .rpm file which requires /bin/basename to fail.",Always,"1. spin-up a fedora 28 container:
docker run -it --rm fedora:latest /bin/bash
2. use the following commands:
[root@a6cdd04a835c /]# rpm -q coreutils-single
coreutils-single-8.29-7.fc28.x86_64
[root@a6cdd04a835c /]# ls -l /bin/basename  
-r-xr-xr-x. 1 root root 55 May 29 16:33 /bin/basename
[root@a6cdd04a835c /]# rpm -q --whatprovides /bin/basename
coreutils-single-8.29-7.fc28.x86_64
[root@a6cdd04a835c /]# dnf repoquery --whatprovides /bin/basename
Last metadata expiration check: 0:15:37 ago on Fri Sep 28 21:55:41 2018.
coreutils-0:8.29-5.fc28.x86_64
coreutils-0:8.29-7.fc28.x86_64","$ docker run -it --rm fedora:latest /bin/bash
$ rpm -q coreutils-single
$ ls -l /bin/basename
$ rpm -q --whatprovides /bin/basename
$ dnf repoquery --whatprovides /bin/basename","```bash
docker run -it --rm fedora:latest /bin/bash
rpm -q coreutils-single
ls -l /bin/basename  
rpm -q --whatprovides /bin/basename
dnf repoquery --whatprovides /bin/basename
```","docker run -it --rm fedora:latest /bin/bash  
rpm -q coreutils-single  
ls -l /bin/basename  
rpm -q --whatprovides /bin/basename  
dnf repoquery --whatprovides /bin/basename","```bash
dnf repoquery --whatprovides /bin/basename
```",https://bugzilla.redhat.com/show_bug.cgi?id=1634200,
1921427,John.ne1,2021-01-28T00:55:23Z,2021-02-23T00:25:07Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,"stat command shows ""UNKNOWN"" as Type for exFAT drive",normal,It must display a file system name at Type e.g exFAT,It does not show a file system name at Type.,Always,"1. Connect exFAT drive to your computer. If you don't have an exFAT drive, just create an exFAT medium with gnome-disk-utility-3.38.0-1.fc33.x86_64

2. Enter this command: stat -f '<file/folder from exFAT drive>'


Sample:

stat -f '/run/media/aurora/LABEL/iiiiiii.txt' 
  File: ""/run/media/aurora/LABEL/iiiiiii.txt""
    ID: 83000000000 Namelen: 1530    Type: UNKNOWN (0x2011bab0)
Block size: 32768      Fundamental block size: 32768
Blocks: Total: 973808     Free: 973801     Available: 973801
Inodes: Total: 0          Free: 0

3. See Type: UNKNOWN (0x2011bab0)",$ stat -f '<file/folder from exFAT drive>',stat -f '/path/to/exFAT/drive',stat -f '/run/media/aurora/LABEL/iiiiiii.txt',stat -f '/run/media/aurora/LABEL/iiiiiii.txt',https://bugzilla.redhat.com/show_bug.cgi?id=1921427,
1921249,PÃ¡draig Brady,2021-01-27T19:16:01Z,2021-02-17T05:08:27Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,ls can crash when printing selinux context of unstatable files,,,"ls since 6.9 can crash when printing selinux context,
and encountering an unstatable file (like a missing symlink target).",Always,,,"```bash
mkdir reproducer
cd reproducer
ln -s nonexistent-target symlink
ls -Z
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1921249,
1921246,PÃ¡draig Brady,2021-01-27T19:08:02Z,2021-02-17T05:08:25Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,split can cause data corruption with --number=K/N construct,,,"split --number=K/N can be used when there isn't enough local storage,
and you want to split input to separate output devices in separate runs.

Ever since v8.26 (so including centos 8), there is a nasty
data corruption issue for any file over 128KiB
as part of the input file is skipped incorrectly.",Always,,,"```bash
split -n l/2 --numeric-suffixes=1 large_file.txt output_
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1921246,
1811038,Mohan Boddu,2020-03-06T13:43:13Z,2021-02-16T19:39:24Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,/usr/bin/mknod: cannot set permissions of '/dev/random': Operation not supported,,,,,,,"```bash
mknod -m 666 /dev/random c 1 8
```",chroot /var/tmp/lorax/lorax.7xmi9p_a/installtree /usr/bin/mknod -m 666 /dev/random c 1 8,"```bash
chroot /var/tmp/lorax/lorax.7xmi9p_a/installtree /usr/bin/mknod -m 666 /dev/random c 1 8
```",https://bugzilla.redhat.com/show_bug.cgi?id=1811038,
959597,Don Swaner,2013-05-03T22:35:04Z,2021-02-03T17:55:53Z,CLOSED RAWHIDE,unspecified,low,Fedora,coreutils,"Info link ""Note Specifying the Time Zone"" gives ""No such file or directory""",normal,View documentation on Specifying the Time Zone,"Error message ""libc: No such file or directory""",Always,"1. do ""info date"" or ""info who""
2. try to take link ""*Note Specifying the Time Zone ...""","$ info date
$ info who","info date
follow the link ""*Note Specifying the Time Zone with `TZ': (libc)TZ Variable"" 

(or alternatively)

info who
follow the link ""*Note Specifying the Time Zone with `TZ': (libc)TZ Variable""","info date
info who","info date
info who",https://bugzilla.redhat.com/show_bug.cgi?id=959597,
1914537,David Johnston,2021-01-09T15:08:58Z,2021-01-27T08:05:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,`sort -n -u` does not work with IPv4 addresses,normal,"$?=0
Bar and Baz both contain 16 lines","$?=1
Bar contains 8 lines
Baz contains 16 lines",,"1. Take a file Foo, with a list of IPs, one per line, with duplicates
2. sort -n -u < Foo > Bar
3. sort -n  < Foo | uniq > Baz
4. diff Bar Baz","$ sort -n -u < Foo > Bar  
$ sort -n < Foo | uniq > Baz  
$ diff Bar Baz","```bash
# Create a file Foo with a list of IPs, one per line, with duplicates
echo ""192.168.1.1"" > Foo
echo ""192.168.1.2"" >> Foo
echo ""192.168.1.3"" >> Foo
echo ""192.168.1.1"" >> Foo
echo ""192.168.1.4"" >> Foo
echo ""192.168.1.5"" >> Foo
echo ""192.168.1.2"" >> Foo
echo ""192.168.1.6"" >> Foo
echo ""192.168.1.7"" >> Foo
echo ""192.168.1.8"" >> Foo
echo ""192.168.1.3"" >> Foo
echo ""192.168.1.9"" >> Foo
echo ""192.168.1.10"" >> Foo
echo ""192.168.1.4"" >> Foo
echo ""192.168.1.11"" >> Foo
echo ""192.168.1.12"" >> Foo
echo ""192.168.1.5"" >> Foo
echo ""192.168.1.13"" >> Foo
echo ""192.168.1.14"" >> Foo
echo ""192.168.1.6"" >> Foo
echo ""192.168.1.15"" >> Foo
echo ""192.168.1.16"" >> Foo

# Reproduce the bug
sort -n -u < Foo > Bar
sort -n < Foo | uniq > Baz

# Verify the results
diff Bar Baz
```","None

The provided bug report includes steps that outline how to observe the discrepancy but does not provide an explicit command or test case to directly trigger and reproduce the bug itself with a specific file content example. The steps are descriptive and instructive on how one could check for the issue given a suitable input file, Foo, but they do not give a concrete minimal example of input data that would definitively demonstrate the error in behavior.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1914537,
1914737,Clark,2021-01-11T05:24:04Z,2021-01-11T20:47:10Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,stat command does not show birth time (btime) entry in Fedora 33 (GNOME),normal,"Fedora 33 (GNOME) uses Btrfs as the file system by default. Btrfs supports birth time (btime) for files and directories, so there must also be a birth time (btime) entry per stat command.",Birth time (btime) has no entry.,Always,"1. Install Fedora 33 (GNOME) on the internal disk.
2. Open Terminal and use stat command for file or directory.
3. In Terminal there is no entry for ""Birth"" (btime).",$ stat <file-or-directory>,"```bash
stat /path/to/any/file/or/directory
```","None

The provided bug report does not contain specific commands or test cases that could be used independently of the described setup (i.e., installing Fedora 33 GNOME and using its default filesystem) to directly reproduce the issue with the `stat` command output. The reproduction steps are tied to a particular installation scenario which cannot be condensed into standalone shell commands without this context.","```bash
stat /path/to/file_or_directory
```",https://bugzilla.redhat.com/show_bug.cgi?id=1914737,
1869624,Florian Bezdeka,2020-08-18T11:37:34Z,2020-11-17T10:47:31Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,coreutils: test -w broken,normal,0,1,Always,"1. mkdir -p /tmp/foo
2. test -w /tmp/foo; echo $?","$ mkdir -p /tmp/foo
$ test -w /tmp/foo; echo $?","```bash
mkdir -p /tmp/foo
test -w /tmp/foo; echo $?
```","mkdir -p /tmp/foo
test -w /tmp/foo; echo $?","```bash
mkdir -p /tmp/foo
test -w /tmp/foo; echo $?
```",https://bugzilla.redhat.com/show_bug.cgi?id=1869624,
1783903,Peter Robinson,2019-12-16T08:57:39Z,2020-11-07T06:52:50Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Does coreutils really depend on ncurses?,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1783903,
1882187,major,2020-09-24T01:49:51Z,2020-11-06T16:51:32Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,multiple checksumming utilities output an extraneous leading backslash when processing filenames that have embedded newlines,normal,No extraneous leading backslash should occur. I do not know if this bug indicates a more serious string processing problem.,"b2sum, md5sum, sha1sum, sha224sum, sha256sum, sha384sum, and sha512sum each output an extraneous leading backslash when processing filenames that have embedded newlines",Always,"$ # show bash and coreutils versions
$ rpm -q bash coreutils
$ # create variable that holds filename with
$ file='AAA'$'\n''BBB'
$ # show that variable contains an embedded newline
$ printf -- '%s' ""$file"" | od -c
$ # create empty file with filename containing embedded newline
$ cp -v /dev/null ""$file""
$ # list file with filename containing embedded newline
$ ls -b ""$file""
$ # run md5sum, for example, on file with filename containing embedded newline
$ md5sum ""$file""
$ # note the extraneous leading backslash","$ rpm -q bash coreutils
$ file='AAA'$'\n''BBB'
$ printf -- '%s' """"$file"""" | od -c
$ cp -v /dev/null """"$file""""
$ ls -b """"$file""""
$ md5sum """"$file""""","```bash
file='AAA'$'\n''BBB'
cp -v /dev/null ""$file""
md5sum ""$file""
```","file='AAA'$'\n''BBB'
md5sum ""$file""","```bash
file='AAA'$'\n''BBB'
cp -v /dev/null ""$file""
md5sum ""$file""
```",https://bugzilla.redhat.com/show_bug.cgi?id=1882187,
467622,Sammy,2008-10-19T15:27:27Z,2020-10-19T09:17:43Z,CLOSED WONTFIX,medium,medium,Fedora,coreutils,nohup job is killed when ssh times out,,,"It involves the
following components: nohup, ssh, kernel, openmp.

When one starts a job remotely using nohup and normally logs out
(ctrl-D) the job stays running. However, if you do not logout and
let ssh time out the job is killed.

The situation is more interesting on a multi-processor machine when
running an openmp job. In this case it seems to kill all but one
of the threads and the job keeps running on a single cpu.",,,,"```
nohup ./openmp_program &
sleep 10
# let ssh time out without logging out (ctrl-D)
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=467622,
1870385,Brendan Conoboy,2020-08-19T23:03:35Z,2020-10-07T15:50:53Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,"date --date=""2019-03-10 02:00:00"" +""%s"" fails",normal,,Converting a date to seconds near daylight savings time start fails,Always,"blc@localhost /tmp>date --date=""2019-03-10 01:23:45"" +""%s""
1552209825
blc@localhost /tmp>date --date=""2019-03-10 02:23:45"" +""%s""
date: invalid date â2019-03-10 02:23:45â
blc@localhost /tmp>date --date=""2019-03-10 03:23:45"" +""%s""
1552213425
blc@localhost /tmp>TZ=UTC date --date=""2019-03-10 02:23:45"" +""%s""
1552184625","$ date --date=""2019-03-10 01:23:45"" +""%s""
$ date --date=""2019-03-10 02:23:45"" +""%s""
$ date --date=""2019-03-10 03:23:45"" +""%s""
$ TZ=UTC date --date=""2019-03-10 02:23:45"" +""%s""","```bash
date --date=""2019-03-10 02:23:45"" +""%s""
```","date --date=""2019-03-10 02:23:45"" +""%s""","date --date=""2019-03-10 02:23:45"" +""%s""",https://bugzilla.redhat.com/show_bug.cgi?id=1870385,
1830318,Allan Day,2020-05-01T15:19:53Z,2020-10-06T13:47:57Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Remove 256 colors from DIR_COLORS,normal,The colours match those configured in the terminal.,The colors don't follow those configured in the terminal.,Always,"Run ls in a location that will give you a variety of colors (say, /usr/libexec).",,"```
ls /usr/libexec
```","None

While the report gives a good description of the issue and how it can be somewhat mitigated by removing `/etc/DIR_COLORS.256color`, it doesn't provide explicit steps or commands that definitively reproduce the color inconsistency problem in a controlled manner for testing purposes. The provided information describes what happens under certain conditions but does not specify exact test cases to reproduce the bug reliably and independently of specific configurations beyond simply running `ls` in a directory with varied file types.",ls --color=always /usr/libexec,https://bugzilla.redhat.com/show_bug.cgi?id=1830318,
1884264,Norbert Jurkeit,2020-10-01T13:37:33Z,2020-10-02T08:14:06Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,Missing color scheme in coreutils-common with F33 beta,,,ls command displays directory names in dark blue which makes them barely readable in virtual terminals with black background in LXDE spin of F33 beta,,,,"```bash
ls --color=auto
```","None

The report describes a visual change related to color schemes for directory names when using the `ls` command under certain conditions (specifically, with virtual terminals having black backgrounds). The issue is tied to the absence of `/etc/DIR_COLORS.256color`, which affects how colors are displayed but does not provide an exact sequence of commands that would directly reproduce a typical software bug like a crash or incorrect output behavior. Thus, no specific command or test case can be derived from this description to reproduce the described issue in a traditional sense.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1884264,
1883685,qazdefuque,2020-09-29T20:35:51Z,2020-09-30T10:08:56Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: set_program_name(): ls killed by SIGABRT,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1883685,
1877625,Jeffrey Walton,2020-09-10T02:31:10Z,2020-09-12T07:07:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Two /dev/sda3 filesystems using 'df -h'?,normal,,df -h' has a slightly unusual output. /dev/sda3 is listed twice,Always,,$ df -h,"`df -h` on a Btrfs filesystem with subvolumes for `/` and `/home`. 

To reproduce:
1. Install Fedora 33 (or similar) with Btrfs.
2. Create subvolumes for `/` and `/home`.
3. Run `df -h`. 

Example setup commands (assuming /dev/sda is the disk):
```bash
mkfs.btrfs /dev/sda3
mount /dev/sda3 /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
umount /mnt
mount -o subvol=@ /dev/sda3 /
mkdir /home
mount -o subvol=@home /dev/sda3 /home
df -h
```","None

The provided bug description does not include a specific command or test case that reproduces the issue beyond simply running `df -h`, which is more of an observation rather than a detailed reproduction scenario. The bug seems to describe an observed behavior with Btrfs file systems and df output but doesn't detail how to consistently reproduce it, aside from installing Fedora 33 on a system using Btrfs and observing the df output.",df -h,https://bugzilla.redhat.com/show_bug.cgi?id=1877625,
1861108,Chris Murphy,2020-07-27T20:27:11Z,2020-08-20T11:30:04Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,RFE: make cp default to reflink=auto,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1861108,
1111722,Chris Murphy,2014-06-20T20:15:45Z,2020-05-04T03:30:29Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"hang at main menu, restoring hardware time and probing storage",,Hang at the hub,No hang,Always,"Steps to Reproduce:
1. Install Fedora 20 using Btrfs preset with custom install to leave free space.
2. Boot Fedora 21 installer Fedora-Live-Workstation-x86_64-rawhide-20140619.iso
3. Choose English as language.",,"To reproduce this bug, the following steps can be translated into a test case scenario rather than a single command, as it involves installing and booting different versions of Fedora in a specific configuration:

1. Install Fedora 20 using the Btrfs preset with a custom install, ensuring that free space is left on the disk.
2. Download the Fedora-Live-Workstation-x86_64-rawhide-20140619.iso image.
3. Boot this ISO in VirtualBox, configured for UEFI boot.
4. Choose English as the language during the boot process.

However, since the request is for a command or test case and given that reproducing this bug involves a series of complex setup steps rather than a single executable command, the closest approximation to a ""command"" would be a descriptive outline of these steps. But to adhere strictly to the requested format and recognizing that no simple command exists to replicate the complex setup and boot process described:

None",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1111722,
1800597,1014938109,2020-02-07T13:51:19Z,2020-02-11T11:19:15Z,CLOSED RAWHIDE,low,low,Fedora,coreutils,Test fail of tests/misc/env-S.pl and tests/misc/tty,normal,No failures.,FAIL tests/misc/tty.sh (exit status: 1),,1.make test under rpmbuild/BUILD/coreutils-8.31/single or rpmbuild -ba coreutils.spec,"$ cd rpmbuild/BUILD/coreutils-8.31/single  
$ make check","```bash
make check
sudo make check
```","None

The provided bug report describes issues encountered during a `make check` and running the test suite as root, but it does not specify exact commands or test cases beyond these general actions that can be used to reproduce the failures directly. The failures are noted within specific tests (`env-S`, `tty`) but no isolated command is given to replicate them independently from the full test suite execution.",make check,https://bugzilla.redhat.com/show_bug.cgi?id=1800597,
1739747,Harish Pillay,2019-08-10T02:23:05Z,2019-11-27T23:12:19Z,CLOSED EOL,unspecified,medium,Fedora,coreutils,error in displaying date -d 1982-01-01 because of TZ change from UTC+7.5 to UTC+8,normal,Fri Jan  1 00:00:00 +08 1982,date -d 1982-01-01 returns date: invalid date â1982-01-01â,Always,"1. On a system set to UTC+8 Singapore, run date -d 1981-12-31. It will succeed.
2. Then run 1982-01-01 and it will fail.
3. Running 1928-01-02 succeeds. ","$ date -d 1981-12-31  
$ date -d 1982-01-01","```bash
TZ='Asia/Singapore' date -d '1982-01-01'
```","date -d 1982-01-01

None

# The first command is a reproducible case according to the steps provided.
# However, since the environment (system set to UTC+8 in Singapore) is also critical and cannot be directly translated into a command, a fully automated test case isn't available without setting up that specific timezone context.",date -d 1982-01-01,https://bugzilla.redhat.com/show_bug.cgi?id=1739747,Not sure about the reproducibility
1390462,Jan HutaÅ,2016-11-01T06:35:11Z,2019-11-27T19:23:15Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,on 2016-10-31 command `date -d 'month ago'` does not return previous month,normal,Should show start of previous month,Shows current month,Always,"1. # date
2. # date -d 'month ago'","$ date
$ date -d 'month ago'","```bash
date -d 'month ago'
```","date  
date -d 'month ago'",date -d 'month ago',https://bugzilla.redhat.com/show_bug.cgi?id=1390462,
1764152,Matej MaruÅ¡Ã¡k,2019-10-22T11:26:29Z,2019-10-25T17:01:41Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,Cannot run `ls -l` in docker container with new coreutils,normal,Just list all in `/`,ls: cannot access '/': Operation not permitted,Always,"1.
$ cat Dockerfile 
FROM fedora:30
RUN dnf -y update coreutils
2. sudo docker build
3. sudo docker run -it --rm <build image> ls /","$ cat Dockerfile  
$ FROM fedora:30  
$ RUN dnf -y update coreutils
$ sudo docker build -t test-image .  
$ sudo docker run -it --rm test-image ls /  ","```bash
# Create a Dockerfile with the following contents:
cat > Dockerfile <<EOF
FROM fedora:30
RUN dnf -y update coreutils
EOF

# Build the Docker image
sudo docker build -t test-image .

# Run the Docker container and execute the ls command
sudo docker run -it --rm test-image ls /
```","None

The provided bug report does not contain specific commands that can be directly run to reproduce the issue without additional context such as building a Docker image with the specified `Dockerfile`. While steps are given, they require intermediate outputs (like the image ID) and thus do not constitute a direct command or test case.","```bash
sudo docker build -t coreutils-bug-repro -f Dockerfile .
sudo docker run -it --rm coreutils-bug-repro ls /
```",https://bugzilla.redhat.com/show_bug.cgi?id=1764152,
1728986,Milan Crha,2019-07-11T07:12:41Z,2019-10-15T22:39:41Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,Avoid flashing text for broken links,,,"When a link references non-existent file or directory, the `ls -l` shows the link target with red background and white flashing text in it. The flashing text has some issues:
a) it's quite distracting and even if I fix the link the terminal still shows it
   flashing few lines above - I do not want to clear the terminal content,
   because I need to see other text in there
b) when the target link is long and you cannot copy it with mouse you need to
   re-type it, thus read it. The flashing makes this quite depressing, when the
   text is there, is not there, is there, is not there, is there,....
c) I've been told, long time ago, that changing icons which try to warn about
   something should not do that ad infinity, it's enough to flash like 10 times
   and then stop flashing - that time it was for power consumption reasons; this
   flashing text may (or may not) be a similar case
d) it's enough to have the white text on a red background to have it highlighted
   as an error, there's really no need for the awful flashing.",Always,,,"```bash
ln -s non_existent_file link_name; ls -l link_name
```","None

The provided bug description does not include specific commands or test cases that can be executed to reproduce the issue. The description explains the behavior and its effects but lacks details on how exactly to recreate it with commands involving `ls -l` and broken symbolic links.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1728986,
1444774,PÃ¡draig Brady,2017-04-24T09:22:42Z,2019-07-22T13:07:40Z,CLOSED ERRATA,unspecified,urgent,Fedora,coreutils,heap overflow security issue in date(1) and touch(1),,,"heap overflow mitigation

coreutils >= 8.25 (Fedora 24) has a nasty arbitrary heap write issue that I presume can be exploited to run arbitrary code as the user running date,
just by setting a large TZ variable in the command line or in the environment.",,,,"```bash
TZ=$(printf 'A%.0s' {1..10000}) date
```",None,"```
TZ=$(printf 'A%.0s' {1..10000}) date
```",https://bugzilla.redhat.com/show_bug.cgi?id=1444774,
1713901,Albert FlÃ¼gel,2019-05-25T15:03:59Z,2019-05-25T22:06:15Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,env LANG=en_US date has significantly changed output format,normal,Sat May 25 16:56:54 CEST 2019,Sat 25 May 2019 04:56:58 PM CEST,Always,"# env LANG=en_EN date
# env LANG=en_US date","$ env LANG=en_EN date
$ env LANG=en_US date","```bash
env LANG=en_EN date
env LANG=en_US date
```","env LANG=en_EN date  
env LANG=en_US date","env LANG=en_EN date  
env LANG=en_US date",https://bugzilla.redhat.com/show_bug.cgi?id=1713901,
1688740,Jonathan Wakely,2019-03-14T10:54:46Z,2019-05-22T11:31:05Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,sha512sum(1) man page is badly formatted,,,,,,,"```bash
man coreutils; coreutils --help
```",None,"man command_name

Replace `command_name` with the specific command whose man page is affected by the patch, such as `cat`, `cp`, etc., depending on which command's man page was modified in the patch. However, without knowing the exact command, we cannot provide a precise command to reproduce the bug. If no specific command was mentioned, it would be:

None",https://bugzilla.redhat.com/show_bug.cgi?id=1688740,
1705229,rvcsaba,2019-05-01T19:05:39Z,2019-05-14T13:05:24Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,sort -V - incorrect result,,"samba-4.10.2-1.fc30.x86_64
samba-4.10.2-1.1.fc30.x86_64
samba-common-4.10.2-1.fc30.noarch
samba-common-4.10.2-1.1.fc30.noarch","samba-4.10.2-1.1.fc30.x86_64
samba-4.10.2-1.fc30.x86_64
samba-common-4.10.2-1.fc30.noarch
samba-common-4.10.2-1.1.fc30.noarch",Always,sort -V sort_test.txt,$ sort -V sort_test.txt,"```bash
sort -V sort_test.txt
```

Where `sort_test.txt` contains:

```
samba-common-4.10.2-1.fc30.noarch
samba-4.10.2-1.fc30.x86_64
samba-common-4.10.2-1.1.fc30.noarch
samba-4.10.2-1.1.fc30.x86_64
```",sort -V sort_test.txt,sort -V sort_test.txt,https://bugzilla.redhat.com/show_bug.cgi?id=1705229,
1674156,customercare,2019-02-09T12:44:35Z,2019-02-09T14:22:40Z,CLOSED NOTABUG,unspecified,urgent,Fedora,coreutils,du missed out files and fails to count the size of a directory correctly,,,,Always,,,"Based on the provided bug description, here are some potential test cases and commands that could help reproduce the issue:

1. **Recreate the directory structure**: Create a directory hierarchy similar to `/mailacct/imapbox/Maildir//.Archives.2018/cur/` with multiple files having names similar to `1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa`.
2. **Run du command**: Run the `du` command on the recreated directory structure and verify if it stops counting files at a certain point, similar to what is described in the bug description.
3. **Verify file permissions and ownership**: Use `ls -la` to check the file permissions and ownership of the files in the directory, as seen in the provided output.
4. **Run stat command**: Run the `stat` command on individual files, especially the ones that seem to be causing issues, to verify if there are any irregularities in their metadata.
5. **Check for hidden files or special characters**: Use `ls -la` and `find` commands to check for any hidden files or special characters in the directory names or file names that might be causing issues with the `du` command.
6. **Test with different file sizes and names**: Create files of varying sizes and names within the recreated directory structure to see if the issue is specific to certain file sizes or naming conventions.

Some example commands to test:

* `du -sh /mailacct/imapbox/Maildir//.Archives.2018/cur/`
* `ls -la /mailacct/imapbox/Maildir//.Archives.2018/cur/* | grep -B2 ""1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa""`
* `stat /mailacct/imapbox/Maildir//.Archives.2018/cur/1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa`
* `find /mailacct/imapbox/Maildir//.Archives.2018/cur/ -type f -print0 | xargs -0 stat`

By running these test cases and commands, you may be able to reproduce the issue and gain a better understanding of what is causing the problem with the `du` command.","Based on the provided information, you're observing that a specific utility or application is not processing certain files in a directory as expected, while `ls` and `du` handle them correctly. To diagnose this issue more thoroughly, we need to identify what command or process is stopping at a particular file.

Here are some steps and commands to help reproduce the bug:

### 1. Identify the Command Causing the Issue
Firstly, you need to understand which specific command or application is not processing files beyond `1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa`.

If the utility in question is a script, try to run it with verbose logging enabled if possible.

### 2. Use `find` and `stat`
Use `find` to recursively find files and then use `stat` or another tool to gather information about each file.

```sh
# Find all files in .Archives.2018/cur
find /mailacct/imapbox/Maildir/.Archives.2018/cur -type f

# Gather stats on these files
find /mailacct/imapbox/Maildir/.Archives.2018/cur -type f -exec stat {} \;
```

### 3. Use a Script to Simulate the Process
If you can identify that itâs a script or specific command, create a test script to simulate its behavior.

```sh
#!/bin/bash

cd /mailacct/imapbox/Maildir/.Archives.2018/cur || exit 1

for file in *; do
    stat ""$file""
done
```

Run this script and observe if it stops at the same point as the original issue.

### 4. Check for Special Characters or Hidden Files
Sometimes, special characters or hidden files can cause issues.

```sh
# List all files including hidden ones
ls -la /mailacct/imapbox/Maildir/.Archives.2018/cur

# Look for any unusual characters in file names
find /mailacct/imapbox/Maildir/.Archives.2018/cur -type f | grep -v '^[a-zA-Z0-9._-]'
```

### 5. Verify File Permissions and Ownership
Ensure that the files have consistent permissions and ownership.

```sh
# List detailed information about all files
ls -l /mailacct/imapbox/Maildir/.Archives.2018/cur

# Check specific file metadata
stat /mailacct/imapbox/Maildir/.Archives.2018/cur/1549609568.M246447P12677.xxx.my-system.de,S=658661,W=667579:2,Sa
```

### 6. Check for Filesystem Issues (Even if `fsck` is planned)
To rule out any filesystem corruption, you can also try using tools like `dumpe2fs`, `debugfs`, or `lsblk`.

```sh
# Show filesystem metadata
sudo dumpe2fs -h /dev/sdX

# Check for errors (replace /dev/sdX with the appropriate device)
sudo fsck /dev/sdX
```

### 7. Analyze Logs if Available
Check any logs generated by the application or script that might be failing to see if there are any error messages.

```sh
grep -i ""error"" /path/to/logfile
```

By following these steps, you should be able to gather more information about why the processing stops at a specific point and reproduce the issue.","To effectively reproduce this issue in a controlled environment, you'll need to simulate similar conditions that led to the problem on your production server. Here are several steps and commands that can help you replicate and investigate the issue:

### 1. Prepare the Environment

- **Create Test Directory**: Make a directory structure similar to the one on the production server.
  
```bash
mkdir -p /tmp/test/Maildir/.Archives.2018/cur/
```

- **Simulate Large Number of Files**: Create files with names and sizes similar to those in your problematic directory.

```bash
for i in {1..200}; do
  dd if=/dev/urandom of=""/tmp/test/Maildir/.Archives.2018/cur/file$i"" bs=512 count=$((i * 10))
done

# To match your file naming pattern:
for i in {447..600}; do
  dd if=/dev/urandom of=""/tmp/test/Maildir/.Archives.2018/cur/1549609568.M$iP12677.xxx.my-system.de,S=$((i*10)),W=$((i*15)):2,Sa"" bs=512 count=$i
done
```

### 2. Execute Commands

- **Run `stat` and `ls`**: Verify that these commands work correctly on the test directory.

```bash
cd /tmp/test/Maildir/.Archives.2018/cur/
stat *
ls -l
du -sh .
```

- **Simulate Bug Conditions**: Use your application or script to scan the files as if it were doing so on the production server.
  
If you have a script that was running on the production server, try running it against your test directory.

### 3. Verify and Compare

- **Compare Outputs**: Make sure all commands work as expected in your test environment.

```bash
# Check if ls can list all files:
ls -l | wc -l

# Check file sizes using du:
du -sh .
```

- **Run `strace` for Debugging**: Use `strace` to debug and trace the system calls made by your application or script.

```bash
strace -f ./your_script.sh > strace_output.log 2>&1
```

### 4. Analyze Logs

If you have logs from the production environment, compare them with the output of `strace`.

- **Search for Errors**: Look for errors in the `strace` output or logs.

```bash
grep -i error strace_output.log
```

### 5. Test Edge Cases

- **Large Directories**: Ensure that directories with a large number of files are handled correctly.
  
- **Special Characters in Filenames**: Check if special characters can cause issues.
  
```bash
touch ""file_with_special_chars_!@#$%^&*(){}[].txt""
ls -l file_with_special_chars*
```

### 6. Test File System Limits

- **Check Directory Size and Limitations**: Verify file system limits, inode usage, etc.

```bash
df -i /tmp/test/
du -sh /tmp/test/Maildir/.Archives.2018/cur/
```

### 7. Consider System Resources

- **Memory Usage**: Check if the script runs out of memory.
  
```bash
free -h
top
```

By following these steps, you should be able to create a controlled environment that mimics your production server and identify what might be causing the issue with `stat` or file parsing. This can help in debugging and finding a solution.",https://bugzilla.redhat.com/show_bug.cgi?id=1674156,Difficulty understanding this one
1511951,Stepan Broz,2017-11-10T13:36:42Z,2019-01-22T08:56:40Z,CLOSED ERRATA,high,high,Fedora,coreutils,df -l hangs on autofs automounted stale nfs mounts,normal,The df -l command does not perform stat() calls on autofs (or dummy) filesystems.,The df -l command will hang on the stat() call for /mnt/test/test004.,Always,"1. Create an NFS server, test directories and export them (/etc/exports):

    /srv/exports/test001 192.168.122.0/24(ro,root_squash)
    /srv/exports/test002 192.168.122.0/24(ro,root_squash)
    /srv/exports/test003 192.168.122.0/24(ro,root_squash)
    /srv/exports/test004 192.168.122.0/24(ro,root_squash)

2. Create autofs map file ""/etc/autofs.direct"" with direct maps to nfs shares:

    /mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001
    /mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002
    /mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003
    /mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004

3. Include the ""/etc/autofs.direct"" in ""/etc/auto.master"":

    /- /etc/auto.direct

4. Restart autofs and check for the following entries in /proc/self/mounts:

    /etc/auto.direct on /mnt/test/test001 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test002 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test003 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)
    /etc/auto.direct on /mnt/test/test004 type autofs (rw,relatime,fd=19,pgrp=7520,timeout=300,minproto=5,maxproto=5,direct,pipe_ino=111441)

5. Mount the autofs mountpoint by e.g. # cd /mnt/test/test004 and verify the fs is mounted (/proc/self/mounts):
    192.168.122.1:/srv/exports/test012 on /mnt/test/test012 type nfs4 (... options trimmed ...)

6. Exit the mountpoint to home directory: # cd
7. Stop the NFS service on the NFS server (# systemctl nfs stop).
8. Perform strace -Tttfvs 4096 df -l","$ echo ""/srv/exports/test001 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test002 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test003 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ echo ""/srv/exports/test004 192.168.122.0/24(ro,root_squash)"" >> /etc/exports
$ exportfs -a

$ echo ""/mnt/test/test001 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test001"" >> /etc/autofs.direct
$ echo ""/mnt/test/test002 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test002"" >> /etc/autofs.direct
$ echo ""/mnt/test/test003 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test003"" >> /etc/autofs.direct
$ echo ""/mnt/test/test004 -ro,root_squash,soft,intr,rsize=8192,wsize=8192 192.168.122.1:/srv/exports/test004"" >> /etc/autofs.direct

$ echo ""/- /etc/autofs.direct"" >> /etc/auto.master

$ systemctl restart autofs

$ cat /proc/self/mounts

$ cd /mnt/test/test004
$ mount | grep /mnt/test/test004

$ cd

$ systemctl stop nfs

$ strace -Tttfvs 4096 df -l
","```bash
strace -Tttfvs 4096 df -l
```
This command is used after performing the setup described in steps 1-7 of the ""Steps to Reproduce"" section. The exact sequence of setup and commands to reproduce the bug involves:

1. Setting up an NFS server with exports.
2. Creating an autofs map file (`/etc/autofs.direct`) that maps to these NFS shares.
3. Including this map in `/etc/auto.master`.
4. Restarting autofs and verifying the autofs mounts are present in `/proc/self/mounts`.
5. Mounting one of the autofs mountpoints (e.g., by changing directory into it).
6. Exiting the mountpoint.
7. Stopping the NFS service on the server to induce the hanging behavior when `df -l` is run.

However, since these steps are part of the setup and not directly related to the command that reproduces the bug, they are not included in the final answer. The key command that demonstrates the bug (hanging on `stat()` call for autofs mounts) after setup is completed is `strace -Tttfvs 4096 df -l`.","```
systemctl stop nfs
strace -Tttfvs 4096 df -l
```",strace -Tttfvs 4096 df -l,https://bugzilla.redhat.com/show_bug.cgi?id=1511951,
1634045,Dustin Black,2018-09-28T14:37:41Z,2019-01-10T12:07:38Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,"bash built-in printf errors on float values with locales using ',' for radix character",normal,"1,200,000","-bash: printf: 1.2: invalid number
0,000000",Always,LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,$ LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,"LC_NUMERIC=de_DE.UTF-8 printf %f 1.2 
LC_NUMERIC=de_DE.UTF-8 /usr/bin/printf %f 1.2 
LC_NUMERIC=de_DE.UTF-8 printf %f 1,2 
LC_NUMERIC=de_DE.UTF-8 /usr/bin/printf %f 1,2",LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,LC_NUMERIC=de_DE.UTF-8 printf %f 1.2,https://bugzilla.redhat.com/show_bug.cgi?id=1634045,
1649774,Mat Booth,2018-11-14T13:42:46Z,2018-11-28T08:26:06Z,CLOSED WORKSFORME,unspecified,low,Fedora,coreutils,broken URL in install(1) man page,normal,,broken links in manpages for coreutils,,$ man install,$ man install,"man install && curl -s -o /dev/null -w ""%{http_code}"" https://www.gnu.org/software/coreutils/install",None,man install,https://bugzilla.redhat.com/show_bug.cgi?id=1649774,
199066,Russell Coker,2006-07-16T21:13:40Z,2018-11-27T19:46:28Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,su -c does not need to call setsid() when target is root,normal,,"The attached patch makes ""su root -c command"" not call setsid() and also gives 
a command-line option -C which does the same as -c but doesn't call setsid() ",Always,,"$ su root -c ""command""","```bash
su -c 'command' 
su root -c 'command'
```","None

The provided bug description discusses a modification to the behavior of `su` for running commands as root and introduces a new command-line option `-C`. However, it does not provide specific commands or test cases that can be used to reproduce a particular issue or bug. The description is more about the rationale behind the code changes rather than describing symptoms of a reproducible problem. Therefore, based on the information given, there are no explicit commands or test cases provided for reproducing a bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=199066,check this one
1635899,Laura Pardo,2018-10-03T20:57:38Z,2018-10-30T17:24:48Z,CLOSED ERRATA,low,low,Fedora,coreutils,CVE-2018-17942 coreutils: gnulib: heap-based buffer overflow in convert_to_decimal function in vasnprintf.c [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1635899,
1637531,ricky.tigg,2018-10-09T12:35:09Z,2018-10-10T11:24:58Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Correct form regarding part of the output,normal,one space mark is enough and then appropriate.,two space marks between output expressions.,Always,execute 'ls'; model,$ ls,"ls -w 1 
(or)
ls | cat -t",None,ls,https://bugzilla.redhat.com/show_bug.cgi?id=1637531,
1611211,Maryna Nalbandian,2018-08-02T08:05:36Z,2018-08-13T14:27:09Z,CLOSED NOTABUG,medium,medium,Fedora,coreutils,Man page scan results for coreutils,,,,,"1. Download man-page-day from:

    https://pagure.io/ManualPageScan/blob/master/f/man-page-day.sh

2. Run the script:
    $ ./man-page-day.sh coreutils",$ ./man-page-day.sh coreutils,"```bash
wget https://pagure.io/ManualPageScan/raw/master/f/man-page-day.sh
chmod +x man-page-day.sh
./man-page-day.sh coreutils
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1611211,
1598518,Florian Weimer,2018-07-05T17:25:35Z,2018-07-10T14:25:37Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,coreutils: glibc about to add slightly incompatible renameat2 function,,,,,,,"```
touch file1.txt
mkdir dir1
./coreutils/src/renameat2 file1.txt dir1/
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1598518,
1596183,ricky.tigg,2018-06-28T11:52:32Z,2018-06-28T13:57:49Z,CLOSED UPSTREAM,unspecified,low,Fedora,coreutils,"Conversions' results from data-storage values displayed as 1024-blocks into values in bits, do not match real sizes.",normal,df's outputs to be similar to the ones resulting from the 'lsblk' command â here 161 052 884 992 bitsâ,1024 * 153 761 232 = 157 451 501 568 bits; result does not match the real size which is illustrated as output from the 'lsblk' command.,,"$ LANG=C df -P
Filesystem                    1024-blocks  Used    Available Capacity Mounted on
(...)
/dev/mapper/fedora--live-root 153761232    6048548 139832392 5%       /",$ LANG=C df -P,"```
LANG=C df -P
lsblk -b
```","None

The provided information does not give a clear and direct command or test case that can be used to reproduce the discrepancy between `df` and `lsblk`. While there is a comparison made between outputs of `df -P` and `lsblk -b`, no specific steps or commands are given that definitively reproduce the bug aside from running those two commands separately, which does not fully encapsulate the issue as described.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1596183,
1303456,Bob Gustafson,2016-01-31T21:45:52Z,2018-06-28T13:57:49Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,dd byte count report does not correlate with df byte count report,normal,"I would think that the sizes reported by dd and df would be comparable, but they are not.",the count given by the dd copies don't match,Always,"1. create raid 1 pair
2. copy a 3rd single disk partition to a raid1 pair lvm partition
3. do df and compare results.","$ dd if=/dev/fedora/root of=/dev/fedora23/root
$ dd if=/dev/fedora/home of=/dev/fedora23/home

$ df -h","```bash
# Create two LVM volumes of different sizes (e.g., 50G and 852G)
lvcreate -n root -L 50G fedora
lvcreate -n home -L 852G fedora

# Create a raid1 pair with LVM
pvcreate /dev/sdb /dev/sdc
vgcreate fedora23 /dev/sdb /dev/sdc
lvcreate -n root -L 50G fedora23
lvcreate -n home -L 1750G fedora23

# Fill the source volumes with data (e.g., 27G and 57G)
dd if=/dev/zero of=/dev/fedora/root bs=1M count=27000
dd if=/dev/zero of=/dev/fedora/home bs=1M count=57000

# Copy the data to the target volumes using dd
dd if=/dev/fedora/root of=/dev/fedora23/root
dd if=/dev/fedora/home of=/dev/fedora23/home

# Verify the results using df and du
df -h /dev/fedora/root /dev/fedora/home /dev/fedora23/root /dev/fedora23/home
mount /dev/fedora23/root /mnt/rootn
mount /dev/fedora23/home /mnt/homen
du -h /mnt/rootn | tail -1
du -h /mnt/homen | tail -1
```","None

The provided bug report does not contain a specific command or test case that can directly reproduce the issue described. The steps outlined are general instructions and do not provide an exact sequence of commands that could be run in a controlled environment to consistently replicate the behavior. Therefore, based on the information given, it is not possible to write down a precise set of commands to reproduce this bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1303456,
1594812,ricky.tigg,2018-06-25T12:57:36Z,2018-06-26T07:40:13Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,System language set and system default language mixed in an stderr output stream.,normal,No mixing of language. Otput uniform in Finnish when available.,"Test case: Finnish as System language â Enter a non-existent path:
$ ls -l /var/lib/libvirt/pictures/
ls: tiedostoa '/var/lib/libvirt/pictures/' ei voi kÃ¤sitellÃ¤: No such file or directory",Always,"$ ls -l /var/lib/libvirt/pictures/
","$ ls -l /var/lib/libvirt/pictures/
","```bash
LC_ALL=fi_FI ls -l /var/lib/libvirt/pictures/
```","$ export LC_ALL=fi_FI.UTF-8  
$ ls -l /var/lib/libvirt/pictures/","```bash
ls -l /var/lib/libvirt/pictures/
```",https://bugzilla.redhat.com/show_bug.cgi?id=1594812,
1591152,ricky.tigg,2018-06-14T07:44:45Z,2018-06-14T09:08:49Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Some ls commands aiming to produce identical results produce different outputs.,normal,Output resulting from 'ls -l /usr/bin | grep waterfox' to be identical to the once resulting from 'ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox'.,"$ ls -l /usr/bin | grep waterfox
lrwxrwxrwx. 1 root root          28 Jun 13 22:14 waterfox -> /usr/local/waterfox/waterfox

$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox
lrwxrwxrwx. 1 root root 28 Jun 13 22:14 /usr/bin/waterfox -> /usr/local/waterfox/waterfox",Always,"$ ls -l /usr/bin | grep waterfox
$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox","$ ls -l /usr/bin | grep waterfox
$ ls -l `find /usr/bin -maxdepth 1 -type l -print` | grep waterfox","```bash
ls -l /usr/bin | grep waterfox
ls -l $(find /usr/bin -maxdepth 1 -type l -print) | grep waterfox
```","None

The provided description illustrates a discrepancy between two different command sequences but does not offer an exact reproducible scenario that one can directly use to consistently reproduce the issue on any system due to dependencies on specific file and directory structures (e.g., presence of `/usr/bin/waterfox` symlink). The commands rely on a particular setup which might not be universal.","```bash
ls -l /usr/bin | grep waterfox
ls -l $(find /usr/bin -maxdepth 1 -type l) | grep waterfox
```",https://bugzilla.redhat.com/show_bug.cgi?id=1591152,
1591002,Marcin Juszkiewicz,2018-06-13T21:33:42Z,2018-06-13T21:45:53Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,User lost all groups?,normal,"23:28 (3s) hrw@puchatek:~$ whoami; id
hrw
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
23:28 (0s) hrw@puchatek:~$ ","23:28 (3s) hrw@puchatek:~$ whoami; id; id hrw; sudo id hrw
hrw
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw) kontekst=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
uid=1000(hrw) gid=1000(hrw) grupy=1000(hrw),10(wheel),11(cdrom),18(dialout),63(audio),100(users),135(mock),1001(vboxusers),986(wireshark),960(libvirt),1003(docker)
23:28 (0s) hrw@puchatek:~$ ",Always,$ whoami; id; id hrw; sudo id hrw,$ whoami; id; id hrw; sudo id hrw,"```bash
id; id $USER
```","None

The provided bug report does not contain a specific command or test case that can directly reproduce the issue related to Linux coreutils. The reported problem seems to be about group access discrepancies after logging out and back into an X11 session, which might involve system configuration issues rather than a direct bug in coreutils itself. Thus, no precise command from the report can be used as a test case for reproducing this bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1591002,
1537070,Kai Engert (:kaie) (inactive account),2018-01-22T11:37:06Z,2018-06-11T19:10:47Z,CLOSED WORKSFORME,unspecified,unspecified,Fedora,coreutils,Create coreutils sub-package that contains ln and doesn't depend on openssl-libs,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1537070,
1577872,Rafal Luzynski,2018-05-14T10:19:33Z,2018-06-06T08:54:50Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"Apply upstream fixes for ""ls"" and ""date""",normal,"ls -l should have enough space to display the full abbreviated month name: ""de marÃ§"", ""de maig"", ""de juny"", ""de jul."" (yes, if the name of a month is short it is not abbreviated).

date should display the name of the current month, in all languages. If a language needs multiple grammar forms of a month name then the form appropriate when displaying a month standalone should be used (this usually means a nominative case)","If the current directory contains files last updated in March, May, June or July (any year) then ""ls -l"" in Catalan displays the month name as ""de ma"" which is ambiguous. The same problem may also appear in other languages.

The date command displays:

%OB",Always,"1. Open a text console (Terminal, xterm, konsole, text mode)
2. Execute the command:

LC_ALL=ca_ES.utf8 ls -l

3. Execute the command:

date ""+%OB""","$ LC_ALL=ca_ES.utf8 ls -l
$ date ""+%OB""","```
LC_ALL=ca_ES.utf8 ls -l
date ""+%OB""
```","LC_ALL=ca_ES.utf8 ls -l
date ""+%OB""","LC_ALL=ca_ES.utf8 ls -l  
date ""+%OB""",https://bugzilla.redhat.com/show_bug.cgi?id=1577872,
1582165,ricky.tigg,2018-05-24T12:14:27Z,2018-05-28T13:21:10Z,CLOSED WONTFIX,unspecified,low,Fedora,coreutils,"Enhancements â Accuracy, Documentation, Conventions, Basic units of measure",,,,,,,"```
df -h
man df
```","None

The provided Bug Description consists of observations and enhancement requests rather than a specific bug with reproducible steps or commands. The issues mentioned are related to accuracy preferences, documentation improvements, display conventions, and unit representation which do not require specific commands to be reproduced but rather changes in implementation or documentation.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1582165,Recommendation
453709,Wayne Pollock,2008-07-02T05:37:39Z,2018-04-11T19:34:34Z,CLOSED RAWHIDE,low,medium,Fedora,coreutils,ls -i reports incorrect inode numbers,normal,"$ /bin/ls -i
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp
$ /bin/ls -i --color
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp","$ cd /
$ /bin/ls -i
 648321 bin    907649 home         162081 misc   842817 proc     1329057 srv   
   1977377 usr
 680737 boot   226913 lib         2463617 mnt   2301537 root     1718049 sys   
    583489 var
2269121 dev        11 lost+found   486241 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt   1912545 selinux  2236705 tmp
$ /bin/ls -i --color
 648321 bin         2 home           6954 misc        1 proc     1329057 srv   
         2 usr
      2 boot   226913 lib         2463617 mnt   2301537 root           1 sys   
         2 var
    197 dev        11 lost+found     6957 net   1426305 sbin      713153 tftpboot
1102145 etc   1944961 media       1588385 opt         1 selinux        2 tmp",Always,"1. /bin/ls -i /
2. /bin/ls -i -color=auto","$ /bin/ls -i /
$ /bin/ls -i -color=auto","/bin/ls -i / 
/bin/ls -i --color /","/bin/ls -i /
/bin/ls -i --color=auto","/bin/ls -i /
/bin/ls -i --color=auto /",https://bugzilla.redhat.com/show_bug.cgi?id=453709,
1564541,Don Swaner,2018-04-06T15:02:36Z,2018-04-06T16:13:37Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Sometimes when rebooting the date command initially returns an invalid time,normal,"Consistent times - that is, the date command in the script does not show
a time several hours before the script was run.","Sometimes my cron job mail output looks like:

> Date: Fri, 6 Apr 2018 10:09:36 -0400
> From: ""(Cron Daemon)"" <root@gecko1.bugbane-hollow>
> To: root@gecko1.bugbane-hollow
> Subject: Cron <root@gecko1> nice run-parts /root/cron.reboot
>
> /root/cron.reboot/000_resume_boinc.sh:
>
> ++ cd /root
> ++ date +%X
> 06:09:20 AM
> ++ /root/bin/wait_boinc_up.awk
> ++ date +%X
> 10:09:36 AM
> ...

Note the time of the cron job, 10:09:36.
However, the output of the first date command is 06:09:20 AM, hours before the
reboot cron job ran - more or less the time of the previous reboot.",Not Always,"1.  In a personal crontab for root, specify a line like:
@reboot        nice run-parts /root/cron.reboot
2.  In the /root/cron.reboot directory, specify a member which includes the following:
set -x
cd /root
date ""+%X""
[some command that takes a few seconds, maybe just a ""sleep 5""]
date ""+%X""
...
3.  reboot
4.  review mail from reboot cron job",,"```bash
crontab -e
```
Add the following line:
```bash
@reboot nice run-parts /root/cron.reboot
```
Create a file in `/root/cron.reboot/` (e.g., `test.sh`) with the following content:
```bash
#!/bin/bash
set -x
cd /root
date ""+%X""
sleep 5
date ""+%X""
```
Make the script executable:
```bash
chmod +x /root/cron.reboot/test.sh
```
Reboot the system and review the mail from the reboot cron job.","None

The provided bug report describes a scenario where a cron job scheduled to run at reboot (via `@reboot`) executes a series of commands including `date ""+%X""` which sometimes returns an incorrect time from the previous boot session. However, no specific command or single test case is given that independently reproduces this issue without setting up the described environment and conditions (cron job setup, specific script contents, etc.). The reproduction requires the full setup as described in the ""Steps to Reproduce"" section which includes configuring cron jobs and rebooting the system, making it more of an environment setup than a single command or test case.","@reboot        nice run-parts /root/cron.reboot

Inside `/root/cron.reboot/000_resume_boinc.sh`:
```bash
set -x
cd /root
date ""+%X""
sleep 5
date ""+%X""
```

Reboot the system and check the cron job mail output for inconsistent times.",https://bugzilla.redhat.com/show_bug.cgi?id=1564541,
1555079,Ben Woodard,2018-03-13T23:11:29Z,2018-03-30T13:14:01Z,CLOSED ERRATA,unspecified,medium,Fedora,coreutils,yacc source files missing from debugsource,,,.y files seem to be missing from the debuginfo,,,"$ sudo dnf debuginfo-install coreutils
$ rpm -ql coreutils-debugsource-8.27-20.fc27.x86_64 | grep date
$ rpm -ql coreutils-debuginfo-8.27-20.fc27.x86_64 | grep date
$ rpm -qlp coreutils-debuginfo-8.22-18.el7.x86_64.rpm | grep date","```bash
sudo dnf debuginfo-install coreutils
gdb --args /usr/bin/date
```

Then, inside GDB:
```gdb
break parse_datetime2
run
```
This will attempt to install the `coreutils` debug info package and then run `date` under GDB with a breakpoint at the `parse_datetime2` function. The bug should be reproducible when trying to list the source code for the `parse-datetime.y` file, which is missing from the installed debug info package.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1555079,
1544392,Miroslav Lichvar,2018-02-12T11:11:51Z,2018-02-20T17:14:50Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,du crashes on live directory,,,,,,,"```bash
mkdir dir_with_40000_subdirs
for i in {1..40000}; do
  mkdir ""dir_with_40000_subdirs/$i""
  touch ""dir_with_40000_subdirs/$i/file.txt""
  ln -s ""/path/to/external/file"" ""dir_with_40000_subdirs/$i/symlink_to_external_file""
done

cp -r dir_with_40000_subdirs copied_dir
du -sh copied_dir
```","None

The report does not provide a specific command or test case to reproduce the crash of `du`. While it describes the conditions under which the issue occurs (a directory with about 40000 subdirectories each containing several small files and symlinks), it lacks a precise recipe that one could follow to reliably reproduce the problem.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1544392,
1532285,Laura Pardo,2018-01-08T15:10:32Z,2018-01-30T18:07:12Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,CVE-2017-18018 coreutils: race condition vulnerability in chown and chgrp [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1532285,
1259942,Sam Elstob,2015-09-03T21:25:34Z,2018-01-30T07:51:09Z,CLOSED NEXTRELEASE,unspecified,medium,Fedora,coreutils,"coreutils ""sort -M"" memory leak",normal,"No ""definitely lost"" blocks when using -M","[sam@deben coreutils]$ valgrind sort 10000.txt > /dev/null
==8382== Memcheck, a memory error detector
==8382== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==8382== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==8382== Command: sort 10000.txt
==8382== 
==8382== 
==8382== HEAP SUMMARY:
==8382==     in use at exit: 192 bytes in 14 blocks
==8382==   total heap usage: 60 allocs, 46 frees, 74,697,309 bytes allocated
==8382== 
==8382== LEAK SUMMARY:
==8382==    definitely lost: 0 bytes in 0 blocks
==8382==    indirectly lost: 0 bytes in 0 blocks
==8382==      possibly lost: 0 bytes in 0 blocks
==8382==    still reachable: 192 bytes in 14 blocks
==8382==         suppressed: 0 bytes in 0 blocks
==8382== Rerun with --leak-check=full to see details of leaked memory
==8382== 
==8382== For counts of detected and suppressed errors, rerun with: -v
==8382== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


[sam@deben coreutils]$ valgrind sort -M 10000.txt > /dev/null
==8312== Memcheck, a memory error detector
==8312== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==8312== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==8312== Command: sort -M 10000.txt
==8312== 

==8312== 
==8312== HEAP SUMMARY:
==8312==     in use at exit: 92,753,702 bytes in 481,851 blocks
==8312==   total heap usage: 722,815 allocs, 240,964 frees, 186,001,505 bytes allocated
==8312== 
==8312== LEAK SUMMARY:
==8312==    definitely lost: 92,731,870 bytes in 481,751 blocks
==8312==    indirectly lost: 0 bytes in 0 blocks
==8312==      possibly lost: 21,021 bytes in 78 blocks
==8312==    still reachable: 811 bytes in 22 blocks
==8312==         suppressed: 0 bytes in 0 blocks
==8312== Rerun with --leak-check=full to see details of leaked memory
==8312== 
==8312== For counts of detected and suppressed errors, rerun with: -v
==8312== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)",Always,"1. Create a test file

base64 /dev/urandom | head -n 10000 > 10000.txt

2. Run under valgrind (defaults)

valgrind sort 10000.txt > /dev/null

3. Run under valgrind (-M)

valgrind sort -M 10000.txt > /dev/null","$ base64 /dev/urandom | head -n 10000 > 10000.txt
$ valgrind sort 10000.txt > /dev/null
$ valgrind sort -M 10000.txt > /dev/null","```bash
base64 /dev/urandom | head -n 10000 > 10000.txt
valgrind sort -M 10000.txt > /dev/null
```","base64 /dev/urandom | head -n 10000 > 10000.txt

valgrind sort -M 10000.txt > /dev/null",valgrind sort -M 10000.txt > /dev/null,https://bugzilla.redhat.com/show_bug.cgi?id=1259942,
1527074,ricky.tigg,2017-12-18T13:47:22Z,2017-12-18T14:46:31Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Execute permission âxâ is not applied to an .sh file while it is granted successfully.,normal,The -sh file with the present characteristics to be executable from an USB drive formatted with VFAT.,"[yk@_]$ ./install.sh
bash: ./install.sh: Permission denied",Always,"yk@_]$ chmod +x install.sh
[yk@_]$ ls -l  install.sh
-rw-r--r--. 1 yk yk 1415 12. 7. 14:21 install.sh
[yk@_]$ mount|grep /dev/sdb1
/dev/sdb1 on /run/media/yk/FEDORA-WS-L type vfat (rw,nosuid,nodev,relatime,uid=1000,gid=1000,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,showexec,utf8,flush,errors=remount-ro,uhelper=udisks2)","$ chmod +x install.sh
$ ls -l install.sh
$ mount | grep /dev/sdb1","```bash
# Create a new .sh file on a VFAT-formatted external USB drive
echo ""#!/bin/bash"" > /run/media/yk/FEDORA-WS-L/install.sh
echo ""echo 'Hello World!'"" >> /run/media/yk/FEDORA-WS-L/install.sh

# Grant execute permission to the .sh file
chmod +x /run/media/yk/FEDORA-WS-L/install.sh

# Verify the permissions of the .sh file
ls -l /run/media/yk/FEDORA-WS-L/install.sh

# Attempt to execute the .sh file directly
./install.sh

# Check if the script can be executed using bash command
bash /run/media/yk/FEDORA-WS-L/install.sh
```","None

The provided bug description indicates that the issue occurs on a specific filesystem (VFAT) located on an external USB drive. Since it involves hardware and a particular file system setup, there isnât a simple command line example that can be executed to reproduce this exact scenario in all environments without access to a VFAT formatted USB drive. Therefore, based solely on the information given, a precise set of commands or test case for reproducing the bug cannot be provided.","```bash
chmod +x install.sh
ls -l install.sh
./install.sh
```",https://bugzilla.redhat.com/show_bug.cgi?id=1527074,
1520399,Christian Groessler,2017-12-04T12:32:30Z,2017-12-04T21:02:45Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,/usr/bin/stat -c %N doesn't behave as expected,normal,bar' -> 'foo',bar -> foo,Always,"$ touch foo
$ ln -s foo bar
$ stat -c %N bar
bar -> foo
$","$ touch foo
$ ln -s foo bar
$ stat -c %N bar","```bash
touch foo
ln -s foo bar
stat -c %N bar
```","touch foo
ln -s foo bar
stat -c %N bar","touch foo  
ln -s foo bar  
stat -c %N bar",https://bugzilla.redhat.com/show_bug.cgi?id=1520399,
1504053,ricky.tigg,2017-10-19T11:59:33Z,2017-10-21T20:17:58Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,Twenty commands related to permissions granting that should produce a message error.,normal,It makes an over total of twenty commands that should produce a message error.,All attempts will be validated without any notification from coreutils.,,"1. Open a terminal, log in as root and move to the folder containing the target file for testing purpose.

2. Test at least one of the commands or all of them â It makes an over total of twenty commands that should produce a message error.

All the followings possible combinations are:
# chmod [u, g, o, ugo, a, ugoa, ugao, uago, augo]+/-<no_value [r, w, x, X, s, t]> </file>
which makes 18 combinations, and

# chmod +/-<no_value [r, w, x, X, s, t]> </file>
which makes a total of two combinations.

Examples of such combinations:
# chmod o- </file>
# chmod + </file>
# chmod ugao- </file>
and so on.
","$ sudo su
$ cd /path/to/folder
$ chmod o- <file>
$ chmod + <file>
$ chmod ugoa- <file>","```bash
chmod o- file.txt
chmod + file.txt
chmod ugao- file.txt
chmod u- file.txt
chmod g- file.txt
chmod a- file.txt
chmod ugo- file.txt
chmod ugoa- file.txt
chmod ugao- file.txt
chmod uago- file.txt
chmod augo- file.txt
chmod u+r file.txt
chmod u+w file.txt
chmod u+x file.txt
chmod u+X file.txt
chmod u+s file.txt
chmod u+t file.txt
chmod g+r file.txt
chmod g+w file.txt
chmod g+x file.txt
chmod g+X file.txt
chmod g+s file.txt
chmod g+t file.txt
chmod o+r file.txt
chmod o+w file.txt
chmod o+x file.txt
chmod o+X file.txt
chmod o+s file.txt
chmod o+t file.txt
chmod ugo+r file.txt
chmod ugo+w file.txt
chmod ugo+x file.txt
chmod ugo+X file.txt
chmod ugo+s file.txt
chmod ugo+t file.txt
chmod +/-r file.txt
chmod +/-w file.txt
chmod +/-x file.txt
chmod +/-X file.txt
chmod +/-s file.txt
chmod +/-t file.txt
```","None

The provided description indicates that there are certain combinations of `chmod` options which should produce an error but do not. However, it does not specify any exact commands or test cases that definitively reproduce the issue as described. The examples given (`# chmod o- </file>`, `# chmod + </file>`, `# chmod ugao- </file>`) are more illustrative and don't form a concrete reproducible case with expected outputs. Therefore, based on the given information, we cannot provide an exact command or test case to reproduce the bug.","```
chmod o- /path/to/file
chmod + /path/to/file
chmod ugao- /path/to/file
chmod ugoa+r /path/to/file
chmod ugo+x /path/to/file
chmod a+X /path/to/file
chmod u-s /path/to/file
chmod g+t /path/to/file
chmod o=rwx /path/to/file
chmod ugo=rx /path/to/file
chmod ugao=w /path/to/file
chmod uago+x /path/to/file
chmod augo=s /path/to/file
chmod ugao-t /path/to/file
chmod uago=X /path/to/file
chmod ugao+s /path/to/file
chmod uago=r /path/to/file
chmod ugoa=w /path/to/file
```",https://bugzilla.redhat.com/show_bug.cgi?id=1504053,
1499625,Martin Pitt,2017-10-09T06:26:52Z,2017-10-09T07:31:20Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,ln -sf does not update symlink if target is directory,normal,"""foo"" symlink should point to ""new"".","Symlink did not get updated to point to ""new"":

lrwxrwxrwx 1 martin martin 3  9. Okt 08:25 foo -> old",Always,"1. mkdir old new
2. ln -s old foo
3. ln -sf new foo
4. ls -l foo","$ mkdir old new
$ ln -s old foo
$ ln -sf new foo
$ ls -l foo","```bash
mkdir old new
ln -s old foo
ln -sf new foo
ls -l foo
```","mkdir old new
ln -s old foo
ln -sf new foo
ls -l foo","mkdir old new
ln -s old foo
ln -sf new foo
ls -l foo",https://bugzilla.redhat.com/show_bug.cgi?id=1499625,
573377,Wolfgang Denk,2010-03-14T14:09:55Z,2017-10-09T07:31:20Z,CLOSED NOTABUG,low,high,Fedora,coreutils,ln -sf does not work,normal,"My expectation is that the result of ""ln -s -f target link_name"" is the same
as that of ""rm -f link_name; ln -s target link_name"".

In this case I exoect that the symbolic link ""baz"" gets removed and a new one created, pointing to ""bar"" similar to this:
        $ rm -f baz
        $ ln -s bar baz
        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users 6 Mar 14 15:09 bar
        lrwxrwxrwx 1 wd users 3 Mar 14 15:09 baz -> bar
        drwxr-xr-x 2 wd users 6 Mar 14 15:08 foo
        $ ls -l foo bar baz
        lrwxrwxrwx 1 wd users 3 Mar 14 15:09 baz -> bar

        bar:
        total 0

        foo:
        total 0","No error raised. ""baz"" still pointing to ""foo"".
""foo"" now contains anew symboic link ""bar"" pointing to itself:

        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users  6 Mar 14 15:02 bar
        lrwxrwxrwx 1 wd users  3 Mar 14 15:02 baz -> foo
        drwxr-xr-x 2 wd users 16 Mar 14 15:05 foo
        $ ls -l foo bar
        bar:
        total 0

        foo:
        total 0
        lrwxrwxrwx 1 wd users 3 Mar 14 15:05 bar -> bar",Always,"1. $ mkdir foo bar
2. $ ln -s foo baz
3. Verify:
        $ ls -ld foo bar baz
        drwxr-xr-x 2 wd users 6 Mar 14 15:02 bar
        lrwxrwxrwx 1 wd users 3 Mar 14 15:02 baz -> foo
        drwxr-xr-x 2 wd users 6 Mar 14 15:02 foo
        $ ls -l foo bar
        bar:
        total 0

        foo:
        total 0
4. $ ln -s -f bar baz","$ mkdir foo bar
$ ln -s foo baz
$ ls -ld foo bar baz
$ ls -l foo bar
$ ln -s -f bar baz","```bash
mkdir foo bar
ln -s foo baz
ln -s -f bar baz
ls -ld foo bar baz
ls -l foo bar
```",mkdir foo bar; ln -s foo baz; ln -s -f bar baz,"```bash
mkdir foo bar && ln -s foo baz && ln -s -f bar baz
```",https://bugzilla.redhat.com/show_bug.cgi?id=573377,
1496905,ell1e,2017-09-28T18:19:45Z,2017-09-29T10:52:34Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,wc -l gives wrong line count for files with windows line breaks and single trailing CRNL,normal,wc -l prints out same line count as visible in Notepad.exe on Windows,wc -l doesn't agree with Notepad.exe about how many lines this file has,Always,"1. Create above file with Windows line breaks
2. Check it out in Notepad on Windows
3. Try wc -l file.txt","$ touch file.txt
$ notepad file.txt
$ wc -l file.txt","```bash
echo $'ba\r\ncd\nfe\r\n' > test.txt; wc -l test.txt
```","echo -ne ""ba\rcd\nfe\r\n"" > test.txt ; wc -l test.txt","```bash
echo -e 'ab\rcd\nfe\r' > test.txt && wc -l test.txt
```",https://bugzilla.redhat.com/show_bug.cgi?id=1496905,
1446266,Martin Kutlak,2017-04-27T14:33:46Z,2017-09-21T00:12:13Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: __nanosleep_nocancel(): sleep killed by signal 11,,,,,,,sleep 1000,None,sleep 1000,https://bugzilla.redhat.com/show_bug.cgi?id=1446266,Lack of information
1360903,Daniel Walsh,2016-07-27T19:09:38Z,2017-08-24T03:51:47Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,It would be really helpful for testing if runcon had a --no-new-privs flag,,,,,,,"```bash
prctl --no-new-privs --pid $$; runcon -t svirt_lxc_net_t /bin/sh
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1360903,Lack of information
1482445,LukÃ¡Å¡ Zachar,2017-08-17T09:45:56Z,2017-08-24T03:51:42Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,coredump in ptx,normal,,Segmentation fault (core dumped),Always,1. ptx reproducer_file,$ ptx reproducer_file,ptx reproducer_file,ptx reproducer_file,None,https://bugzilla.redhat.com/show_bug.cgi?id=1482445,
1483938,Ville SkyttÃ¤,2017-08-22T10:27:37Z,2017-08-22T13:16:24Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Own the %{_libexecdir}/coreutils dir,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1483938,Lack of information
1365933,David Howells,2016-08-10T14:30:01Z,2017-07-31T18:49:53Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,The ls program can't be interrupted by a signal,concurrent,ls command should be interruptible with CTRL-C or suspendable with CTRL-Z,ls is waiting for a network timeout and cannot be cancelled with CTRL-C and cannot be suspended with CTRL-Z,,,,"```bash
( sleep 10; kill -s SIGINT $$ ) & ls /path/to/hanging/directory
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1365933,Unsure about the reproducibility
1470769,John Reiser,2017-07-13T15:38:55Z,2017-07-14T11:28:47Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,unsafe localization of error() string after EIO in chroot,normal,"After EIO, then signal the error using as little I/O as possible.","Localization of the third argument to error(), namely
   _(""failed to run command %s"")
uses I/O, namely to set up the locale machinery.",Always,"1. Inject a deliberate error.
--- coreutils-8.25/src/chroot.c.orig	2017-07-13 07:43:21.915621653 -0700
+++ coreutils-8.25/src/chroot.c	2017-07-13 07:44:41.806713319 -0700
@@ -420,8 +420,8 @@
   if (uid_set (uid) && setuid (uid))
     error (EXIT_CANCELED, errno, _(""failed to set user-ID""));
 
-  /* Execute the given command.  */
-  execvp (argv[0], argv);
+  /* Inject deliberate error. */  /* Execute the given command.  */
+  errno = EIO;  /* execvp (argv[0], argv);*/
 
   int exit_status = errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE;
   error (0, errno, _(""failed to run command %s""), quote (argv[0]));","$ cd coreutils-8.25/src
$ cp chroot.c chroot.c.orig
$ sed -i 's/execvp (argv\[0\], argv);/errno = EIO;  \/* execvp (argv[0], argv); *\//g' chroot.c
","```bash
chroot /mnt/sysimage /bin/true
```
Then inject an EIO error (e.g., by yanking out a disk or using a faulty disk), and verify that the error message is not properly localized due to I/O failure. Alternatively, modify the `chroot.c` source code as shown in the bug description to deliberately inject an EIO error:

```c
--- coreutils-8.25/src/chroot.c.orig	2017-07-13 07:43:21.915621653 -0700
+++ coreutils-8.25/src/chroot.c	2017-07-13 07:44:41.806713319 -0700
@@ -420,8 +420,8 @@
   if (uid_set (uid) && setuid (uid))
     error (EXIT_CANCELED, errno, _(""failed to set user-ID""));
 
-  /* Execute the given command.  */
-  execvp (argv[0], argv);
+  /* Inject deliberate error. */  /* Execute the given command.  */
+  errno = EIO;  /* execvp (argv[0], argv);*/
```
Then run `chroot` with this modified code to reproduce the bug:

```bash
./chroot /mnt/sysimage /bin/true
```","None

The provided information suggests that the bug is reproducible through deliberate error injection into the source code of `chroot.c`, rather than by a specific command or test case that can be executed in a standard environment without modifying the source code. The modification involves setting `errno` to `EIO` manually before what would normally be the call to `execvp()`. Since no direct commands or test cases are provided for reproducing this issue outside of such source code modifications, the answer is ""None"".",None,https://bugzilla.redhat.com/show_bug.cgi?id=1470769,
1024730,IBM Bug Proxy,2013-10-30T10:38:55Z,2017-07-13T11:30:40Z,CLOSED UPSTREAM,unspecified,medium,Fedora,coreutils,"While mounting two different file system (ext3, ext4 ) df tool shows only one mounted file system",normal,"df command should list the new partition mounted on /tmp/test/, showing /dev/mapper/mpatha2 ext3 1.8T 21G 1.7T 2% /tmp/test","df shows /dev/mapper/mpatha1 fuse 1.8T 21G 1.7T 2% /tmp/test, which is the previous mount instead of the newly mounted one",Always,"(1) You mounted two partititions - 
    part    -> fs   -> mnt point    ->  avl disk    ->  used    ->  avl %
------------------------------------------------------------------------------
    mpath1  -> fuse -> /tmp/test/   ->  1.0 T       ->  1.0 T   ->  100% 
    mpath2  -> ext3 -> /mnt         ->  1.8 T       ->  21G     ->  2% 
 
(2) You unmount the /mnt (formatted with ext3)
(3) mount mpath2 (you unmounted in step 2) on /tmp/test/
(4) Now , you do df and expect this - 

Filesystem          Type      Size  Used Avail Use% Mounted on
/dev/mapper/mpatha2 ext3      1.8T   21G  1.7T   2% /tmp/test
 
But you see this - 
Filesystem          Type      Size  Used Avail Use% Mounted on
/dev/mapper/mpatha1 fuse      1.8T   21G  1.7T   2% /tmp/test","$ mount /dev/mpath1 /tmp/test/
$ umount /mnt
$ mount /dev/mpath2 /tmp/test/
$ df",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1024730,
1465935,ricky.tigg,2017-06-28T13:22:43Z,2017-06-28T14:08:52Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,"Output resulted from sha256sum claims ""No such file or directory"", while the file in question is present.",normal,Function sha256sum should return a viable message regarding the ISO image file in directory,"Output resulted from the function sha256sum claims ""No such file or directory"", while not only the very file is present at the correct location but also its related rights are sufficient enough",Always,"1. Move both one to another related downloaded official files to the same folder.
2. Compute required command mentioned on siteâs url (https://fedoramagazine.org/verify-fedora-iso-file/) till the sha256sum command.","$ mv file1 file2 /path/to/same/folder/
$ curl https://fedoramagazine.org/verify-fedora-iso-file/
(Follow the instructions until the sha256sum command is mentioned)","```bash
sha256sum <name_of_iso_file>.iso
```
Replace `<name_of_iso_file>.iso` with the actual name of the ISO file being tested.

To fully replicate the steps as described:

1. Download an official Fedora ISO image and its corresponding sha256sum from the official Fedora website.
2. Move both files to the same directory.
3. Open a terminal, navigate to that directory using `cd /path/to/directory`.
4. Run `sha256sum <name_of_iso_file>.iso` (replace `<name_of_iso_file>.iso` with the actual filename).

This should attempt to compute the SHA-256 checksum of the ISO file. If the bug is present, it might output ""No such file or directory"" despite the file being correctly located in the current working directory.",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1465935,
1463384,Igor Gnatenko,2017-06-20T17:49:15Z,2017-06-22T12:28:50Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[PATCH] Provide /bin/foo binaries in single subpackage,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1463384,Lack of information
1457214,Matus Kocka,2017-05-31T11:10:22Z,2017-05-31 11:10:22Z,CLOSED NOTABUG,unspecified,high,Fedora,coreutils,coreutils-single doesn't provide all virtual provides that coreutils provides,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1457214,Lack of information
1283760,Robbie Harwood,2015-11-19T18:30:02Z,2017-05-15T04:26:24Z,CLOSED ERRATA,low,low,Fedora,coreutils,coreutils: tail: inotify support changes behavior of -F with subdirs,normal,tail -F with inotify support should correctly display the contents of the new file when the directory is re-created,tail -F with inotify support fails to display the contents of the newly re-created file,Always,,"$ tail -F scratchdir/tests.log
$ rm -rf scratchdir && mkdir scratchdir","```bash
mkdir scratchdir
touch scratchdir/tests.log
echo ""Initial content"" > scratchdir/tests.log
tail -F scratchdir/tests.log &
rm -rf scratchdir
mkdir scratchdir
touch scratchdir/tests.log
echo ""New content"" > scratchdir/tests.log
# Compare output with:
rm -rf scratchdir
mkdir scratchdir
touch scratchdir/tests.log
echo ""New content"" > scratchdir/tests.log
tail --disable-inotify -F scratchdir/tests.log
```","None

The provided bug description outlines the issue but does not provide a specific sequence of commands or test case that can be directly executed to reproduce the problem. The description explains what happens in two different scenarios (with and without inotify) but doesn't give exact steps for creating `scratchdir`, its contents, or how it ceases to exist and is recreated. Therefore, based on the given information, we cannot provide a precise command or test case to reproduce the bug.","```bash
tail -F scratchdir/tests.log
# While tail is running, delete and recreate scratchdir:
rm -rf scratchdir && mkdir scratchdir && touch scratchdir/tests.log && echo ""Test"" >> scratchdir/tests.log
```

This test case will help you reproduce the issue where `tail` with inotify support does not show the contents of a newly created file after its directory has been deleted and recreated.",https://bugzilla.redhat.com/show_bug.cgi?id=1283760,
1444802,Petr Å abata,2017-04-24T11:04:40Z,2017-05-01T18:17:02Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,coreutils shouldn't obsolete coreutils-single,normal,The coreutils-single package should be installed when requested,The coreutils package is installed instead of coreutils-single,Always,"1. Attempt to install coreutils-single with DNF2
",$ dnf install coreutils-single,dnf install coreutils-single,"None

The provided bug description indicates a package management issue rather than a specific command that causes an unexpected behavior in coreutils itself. The problem described revolves around how DNF2 handles package dependencies and obsoletes, leading to the installation of `coreutils` instead of `coreutils-single`. This situation doesnât arise from running particular commands but from the configuration and rules set within the package manager (DNF2) regarding package priorities and obsoletion. Thus, there isn't a specific command or test case provided for reproducing this bug beyond whatâs described in ""Steps to Reproduce"", which is more about attempting an installation rather than executing a command that triggers unexpected behavior from coreutils directly.","```bash
dnf install coreutils-single
```",https://bugzilla.redhat.com/show_bug.cgi?id=1444802,
1446494,Ali Akcaagac,2017-04-28T08:30:38Z,2017-04-28T09:58:47Z,CLOSED CANTFIX,unspecified,unspecified,Fedora,coreutils,coreutils conflicts with coreutils-single,normal,the installation of coreutils should be allowed without conflicts or dependency issues,"a conflict is reported between coreutils and coreutils-single-8.27-3.fc27.x86_64, preventing installation",Always,,"$ sudo yum install coreutils
$ sudo yum install coreutils-single-8.27-3.fc27.x86_64
$ sudo yum install coreutils",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1446494,
1361694,Graham White,2016-07-29T18:56:39Z,2017-04-20T08:57:52Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,ls output changed to include quoting space characters in coreutils 8.25,normal,ls command should list filenames without single quotes around filenames containing spaces,ls command now displays filenames containing spaces wrapped in single quotes,Always,,$ ls,"```bash
mkdir reproducing_dir
cd reproducing_dir
touch ""file with space""
ls
```","None

The provided bug report describes a change in behavior of the `ls` command where it now outputs single quotes around filenames with spaces. While the report gives instructions on how to observe this behavior, it does not provide an exact command or test case that can be directly executed to reproduce the issue in a standardized manner. The instruction suggests running `ls` in a directory containing a file with a space in its name but does not specify the exact filenames or steps needed for a precise reproduction scenario.","```bash
ls 'file with spaces'
```",https://bugzilla.redhat.com/show_bug.cgi?id=1361694,
186879,Karel van Houten,2006-03-27T08:32:12Z,2017-03-11T22:27:55Z,CLOSED NOTABUG,medium,medium,Fedora,coreutils,"su -c ""command"" has no controlling terminal anymore",normal,"[karel@fc5 karel]$ /tmp/su4 root -c ""bash""
Password: 
[root@fc5 karel]# cat
(type ^C)
[root@fc5 karel]# exit
exit","[karel@fc5 karel]$ /bin/su root -c ""bash""
Password: 
[root@fc5 karel]# cat
(type ^C)
Session terminated, killing shell... ...killed.
(session hangs, with 2 processes reading from terminal)",Always,"1. su root -c ""bash"" (enter password)
2. cat
3. type ^C to interrupt.","$ su root -c ""bash""
$ cat
$ ^C","su -c ""bash""; cat; Ctrl+C","su root -c ""bash""  
cat  
# Then interrupt with ^C","su root -c ""bash""  
cat  
(type ^C)",https://bugzilla.redhat.com/show_bug.cgi?id=186879,
1398913,Scott Shambarger,2016-11-27T09:42:33Z,2017-03-06T08:01:05Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,mkdir fails to label some directories when -p -Z options are used.,normal,a/b should also be labeled,"mkdir: failed to set default creation context for 'a/b': No such file or directory
SELinux labels set on a and a/b/c, but not on a/b",Always,1. Create 3 or more directories together with (for eg) mkdir -p -Z a/b/c,$ mkdir -p -Z a/b/c,"```bash
mkdir -p -Z a/b/c
```","mkdir -p -Z a/b/c

mkdir -p -Z a/b/c/d",mkdir -p -Z a/b/c,https://bugzilla.redhat.com/show_bug.cgi?id=1398913,
1421495,J. Randall Owens,2017-02-12T18:24:20Z,2017-02-13T13:20:12Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,undocumented df -m switch,normal,"partitions listed in megabytes
documentation at least mentions the switch exists","partitions listed in megabytes (mebibytes, really)
documentation not mentioning any -m switch",Always,"1. df -m
2. df --help
3. man df","$ df -m
$ df --help
$ man df","```bash
df -m
df --help
man df
```","df -m
df --help
man df",df -m,https://bugzilla.redhat.com/show_bug.cgi?id=1421495,
1411403,Greg Oliver,2017-01-09T16:07:34Z,2017-01-09T20:40:45Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Coreutils not displaying thousands separator,normal,"-rw-r--r-- 1 greg greg  75,434 Oct 31 12:12 coreutils.spec
-rw-r--r-- 1 greg greg 172,107 Dec 25 12:42 kernel.spec","-rw-r--r-- 1 greg greg  75434 Oct 31 12:12 coreutils.spec
-rw-r--r-- 1 greg greg 172107 Dec 25 12:42 kernel.spec",Always,"1.  unalias ls && ls -l --block-size=""'1""","$ unalias ls && ls -l --block-size=""1""","```bash
unalias ls && ls -l --block-size=1
```","unalias ls && ls -l --block-size=""'1""",unalias ls && LC_ALL=C ls -l --block-size=1,https://bugzilla.redhat.com/show_bug.cgi?id=1411403,
1084376,Jakub DorÅÃ¡k,2014-04-04T08:25:25Z,2016-12-01T00:57:48Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,/bin/echo does not treat -- as the last option,normal,"The second command should print just ""-n"".","The first command prints nothing, as it treats -n as an option.
The second command print ""-- -n"", as it treats -- as the first argument.",Always,"1. echo -n
2. echo -- -n","$ echo -n
$ echo -- -n","```bash
echo -n
echo -- -n
```",echo -- -n,echo -- -n,https://bugzilla.redhat.com/show_bug.cgi?id=1084376,
953194,Jakub Filak,2013-04-17T15:24:42Z,2016-12-01T00:44:05Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils-8.17-8.fc18: __nanosleep_nocancel: Process /usr/bin/sleep was killed by signal 11 (SIGSEGV),normal,The program should execute without crashing and successfully complete the sleep command for 1000 seconds.,"The program crashed with a segmentation fault while trying to execute the sleep command, causing abnormal termination.",Always,"1. Run the command sleep 1000.
2. Observe the segmentation fault and program termination.","$ sleep 1000",sleep 1000,None,sleep 1000,https://bugzilla.redhat.com/show_bug.cgi?id=953194,
1320681,George R. Goffe,2016-03-23T17:38:31Z,2016-11-22T11:29:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,TTY brightness increases after several lines of display,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1320681,Lack of information
1396064,John Kissane,2016-11-17T11:50:52Z,2016-11-17T19:05:34Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,'who' command has blank output,normal,List of logged in users.,Blank,Always,"1. Run the who command on Fedora 24.
2. Observe the output, which will be blank.",$ who,who,who,who,https://bugzilla.redhat.com/show_bug.cgi?id=1396064,
1392210,Tommy He,2016-11-06T09:10:08Z,2016-11-09T09:32:56Z,CLOSED DUPLICATE,unspecified,high,Fedora,coreutils,[aarch64]rpm install error for coreutils-common,normal,Install without error,Error while installing,Always,1. Try to upgrade coreutils-common by dnf,$ sudo dnf upgrade coreutils-common,dnf update coreutils-common,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1392210,
1339135,Petr Lautrbach,2016-05-24T08:43:01Z,2016-11-03T23:55:02Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,install -d or install -D is not setting the context on directories,normal,install -d or install -D should set the context on directories to match file_contexts,"install -d or install -D is not setting the context on directories to match file_contexts, only on the final file",Always,"$ sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
$ touch foo
$ install -D foo /tmp/foobar/foo
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar
$ ls -Z /tmp/foobar/foo
system_u:object_r:user_home_t:s0 /tmp/foobar/foo
$ rm -rf /tmp/foobar
$ install -d /tmp/foobar
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar
$ restorecon -v /tmp/foobar
restorecon reset /tmp/foobar context unconfined_u:object_r:user_tmp_t:s0->unconfined_u:object_r:user_home_t:s0","$ sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
$ touch foo
$ install -D foo /tmp/foobar/foo
$ ls -Zd /tmp/foobar
$ ls -Z /tmp/foobar/foo
$ rm -rf /tmp/foobar
$ install -d /tmp/foobar
$ ls -Zd /tmp/foobar
$ restorecon -v /tmp/foobar","```bash
sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
touch foo
install -D foo /tmp/foobar/foo
ls -Zd /tmp/foobar
ls -Z /tmp/foobar/foo
rm -rf /tmp/foobar
install -d /tmp/foobar
ls -Zd /tmp/foobar
restorecon -v /tmp/foobar
```","$ sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
$ touch foo
$ install -D foo /tmp/foobar/foo
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar
$ ls -Z /tmp/foobar/foo
system_u:object_r:user_home_t:s0 /tmp/foobar/foo

$ rm -rf /tmp/foobar
$ install -d /tmp/foobar
$ ls -Zd /tmp/foobar
unconfined_u:object_r:user_tmp_t:s0 /tmp/foobar","```bash
sudo semanage fcontext -a -t user_home_t ""/tmp/foobar(/.*)?""
touch foo
install -D foo /tmp/foobar/foo
ls -Zd /tmp/foobar
ls -Z /tmp/foobar/foo
rm -rf /tmp/foobar
install -d /tmp/foobar
ls -Zd /tmp/foobar
```",https://bugzilla.redhat.com/show_bug.cgi?id=1339135,
1158494,Berthault,2014-10-29T13:51:31Z,2016-11-03T23:54:57Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,expand and unexpand don't correctly manage files having a BOM header,normal,"expand and unexpand should correctly convert between spaces and tabs while preserving the original formatting, regardless of locale settings","unexpand adds extra spaces, expand removes spaces and making all lines with non-ASCII characters incorrect",Always,"1. Write an UTF-8 file (file_spaces) having a BOM header with the following contents:
    Ã©   Ã    Ã§
    Ã©   Ã    Ã§

Two lines with four spaces + 'Ã©' + three spaces + 'Ã ' + three spaces + 'Ã§' + EOL

It's important to test with stressed characters. With ASCII characters, only the first line is incorrect and the second one is OK. With stressed characters, all lines are incorrect.

NB: For writing files with BOM header, I'm using the scite editor.

2. LANG=C unexpand -t4 file_spaces > file_unexpand

3. Edit the two files (e.g. with gedit or scite) and see the problem in file_unexpand

4. Write an UTF-8 file (file_tabs) having a BOM header with the following contents:
    Ã©   Ã    Ã§
    Ã©   Ã    Ã§

Two lines with one tab + 'Ã©' + one tab + 'Ã ' + one tab + 'Ã§' + EOL

5. LANG=C expand -t4 file_tabs > file_expand

6. Edit the two files (e.g. with gedit or scite) and see the problem in file_expand","$ nano file_spaces
$ LANG=C unexpand -t4 file_spaces > file_unexpand
$ gedit file_spaces file_unexpand
$ nano file_tabs
$ LANG=C expand -t4 file_tabs > file_expand
$ gedit file_tabs file_expand ","```bash
echo -e ""\xef\xbb\xbf\xe9\t\t\xe0\t\t\xe7\n\xe9\t\t\xe0\t\t\xe7"" > file_spaces
LANG=C unexpand -t4 file_spaces > file_unexpand
file file_spaces
file file_unexpand

echo -e ""\xef\xbb\xbf\xe9\t\xe0\t\xe7\n\xe9\t\xe0\t\xe7"" > file_tabs
LANG=C expand -t4 file_tabs > file_expand
file file_tabs
file file_expand
```","```bash
LANG=C unexpand -t4 file_spaces > file_unexpand
LANG=C expand -t4 file_tabs > file_expand
```","```bash
echo -e ""\xEF\xBB\xBFÃ©   Ã    Ã§\nÃ©   Ã    Ã§"" > file_spaces
LANG=C unexpand -t4 file_spaces > file_unexpand

echo -e ""\xEF\xBB\xBFe\tÃ \tÃ§\ne\tÃ \tÃ§"" > file_tabs
LANG=C expand -t4 file_tabs > file_expand
```",https://bugzilla.redhat.com/show_bug.cgi?id=1158494,
1001092,Harald Reindl,2013-08-26T13:28:31Z,2016-10-12T14:31:37Z,CLOSED ERRATA,medium,medium,Fedora,coreutils,df prints non-intuitive mount points in the presence of bind mounts,normal,df command should correctly display the actual mount points,"df command incorrectly reports /tmp as being mounted from /dev/sdc1, instead of showing the correct bind-mounted location /Volumes/dune/.tmp",Always,"[root@testserver:~]$ /usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs
Dateisystem    Typ  GrÃ¶Ãe Benutzt Verf. Verw% EingehÃ¤ngt auf
/dev/sdb1      ext4   12G    2,6G  9,2G   22% /
/dev/sda1      ext4  189M     33M  153M   18% /boot
/dev/sdc1      ext4   30G    4,3G   26G   15% /tmp
_____________________________________

/dev/sdc1 is for sure *not* /tmp
hence there is no logic at all display the thris bind-mount 

UUID=bb7dfa33-8d31-496c-99a9-a1978eef98ec  /Volumes/dune                         ext4   defaults,commit=45,inode_readahead_blks=16,noatime,nodiratime  0 1
/Volumes/dune/www-servers/cms              /usr/local/sftp-homes/flow/cms        none   bind
/Volumes/dune/builduser                    /home/builduser                       none   bind
/Volumes/dune/.tmp                         /tmp                                  none   bind
/Volumes/dune/.tmp                         /var/tmp                              none   bind
/Volumes/dune/buildserver/autotest         /Volumes/dune/www-servers/autotest    none   bind",$ /usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs,"To reproduce this bug, you would need a system with a similar configuration to the one described, including specific mount points and bind mounts. Here's a simplified test case that could potentially reproduce the issue:

1. Set up a Linux system (e.g., Fedora 19) with coreutils-8.21-12.fc19.x86_64.
2. Create several file systems (e.g., /dev/sdb1, /dev/sda1, /dev/sdc1) and mount them at different points (e.g., /, /boot, /tmp).
3. Configure bind mounts as described in the fstab snippet:
   - Mount a device (e.g., /dev/sdc1) at /Volumes/dune.
   - Create bind mounts from /Volumes/dune subdirectories to other locations on the system (e.g., /usr/local/sftp-homes/flow/cms, /home/builduser, /tmp, /var/tmp).
4. Run the command: `/usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs`

This setup and command should potentially reproduce the bug where ""df"" shows a random bind mount instead of the actual mount point for certain file systems.",None,/usr/bin/df -hT --exclude-type=tmpfs --exclude-type=devtmpfs,https://bugzilla.redhat.com/show_bug.cgi?id=1001092,
1312864,Adam MariÅ¡,2016-02-29T12:10:58Z,2016-09-27T15:06:41Z,CLOSED CANTFIX,medium,medium,Fedora,coreutils,CVE-2016-2781 coreutils: Non-privileged session can escape to the parent session in chroot [fedora-all],,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1312864,Confused if it should be included
901517,Ales Ledvinka,2013-01-18T11:32:18Z,2016-09-20T04:32:45Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,is not this sorting incorrect?,normal,sorting should maintain the correct numeric order,"sorting appears to be incorrect, with ""0:0:1"" appearing after ""0:0:1f""",Always,,"$ sort -n ./ethercodes.dat > ./sorted_ethercodes.dat
$ diff -up ./ethercodes.dat.orig ./sorted_ethercodes.dat","```bash
sort -n -t: -k1,1 -k2,2 -k3,3 ./ethercodes.dat
sort -n ./ethercodes.dat
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=901517,
1376801,Mohammed Sadiq,2016-09-16T12:26:52Z,2016-09-16T13:55:11Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,manpage lists wrong flags for 'echo' command,normal,echo should treat '--' like any other character,"the manpage of 'echo' command lists --help and --version, which is wrong",Always,,$ man echo,"```
man echo
info echo
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1376801,
1374678,Ray Holme,2016-09-09T12:02:02Z,2016-09-11T20:18:53Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,sort fails to sort in right order,normal,"./Invoice.java
./Invoice.m4
./InvoiceLine.java
./InvoiceLine.m4","./Invoice.java
./InvoiceLine.java
./InvoiceLine.m4
./Invoice.m4",Always,"1.(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort ","$ echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"" | sort","(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort","None

The provided information includes a command that is meant to demonstrate the issue, but the report does not clearly separate the reproducing steps from the actual results and expected results sections. The command given:

```bash
(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort 
```

is indeed the test case to reproduce the issue, but since it's not explicitly stated as a separate reproducible step in the ""Steps to Reproduce"" section and is instead mixed with results discussion, I followed your instruction strictly which requires a clearly delineated test case or command from that section. Hence, based on the structure of the provided bug report and given instructions, the answer should be None. However, for clarity, the test case would be:

```bash
(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort 
```","(echo ""./Invoice.m4""; echo ""./Invoice.java""; echo ""./InvoiceLine.m4""; echo ""./InvoiceLine.java"") | sort",https://bugzilla.redhat.com/show_bug.cgi?id=1374678,
1347746,Leslie Satenstein,2016-06-17T14:09:16Z,2016-08-26T13:18:15Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,"different     ls -l /dev/disk/by-uuid   between previous Fedora, fedora beta and Fedora24",normal,time in hh:mm format,timestamp as the year yyyy,Always,,$ ls -l /dev/disk/by-uuid,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1347746,
1370362,Leslie Satenstein,2016-08-26T04:11:54Z,2016-08-26T06:46:05Z,CLOSED DUPLICATE,unspecified,unspecified,Fedora,coreutils,ls -l /dev/disk/by-xxxx  produces unexpected output,normal,time in hh:mm format,timestamp as the year yyyy,Always,,$ ls -l /dev/disk/by-xxxx,"```
ls -l /dev/disk/by-uuid
ls -l /dev/disk/by-label
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1370362,
1349701,LiuYan,2016-06-24T04:09:56Z,2016-08-01T07:31:00Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Disable quoting file name behavior of ls command in coreutils-8.25,normal,output the original file name without quoting,file name with whitespaces are quoted with single quote,Always,1. ls a file/directory name with whitespaces or single quotes,$ ls 'My Documents',"```bash
ls /hdd/VirtualBox\ VMs -d
```",ls /hdd/VirtualBox\ VMs -d,"```bash
ls /hdd/VirtualBox\ VMs -d
```",https://bugzilla.redhat.com/show_bug.cgi?id=1349701,
1358888,Praveen Doifode,2016-07-21T17:30:15Z,2016-07-25T05:42:17Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,uname -v prints version of the running kernel,normal,kernel version as described in the man page,does not display the kernel version,Always,,"$ uname -v
$ man uname",uname -v,None,uname -v,https://bugzilla.redhat.com/show_bug.cgi?id=1358888,
1285623,Ed Greshko,2015-11-26T04:58:55Z,2016-07-19T18:32:12Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,df doesn't display all mounts,normal,list all mounted file systems including subdirectories of a remote file system,ome mounts that are present in the mount command output are missing,Always,"[egreshko@meimei x86_64]$ mount | grep ds
ds:/volume1/syntegra on /syntegra type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)
ds:/volume1/misty on /home/egreshko/misty type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)
ds:/volume1/video on /home/egreshko/Videos type nfs4 (rw,relatime,vers=4.0,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,port=0,timeo=600,retrans=2,sec=sys,clientaddr=192.168.1.18,local_lock=none,addr=192.168.1.152)

while df shows

[egreshko@meimei ~]$ /usr/bin/df
Filesystem         1K-blocks       Used  Available Use% Mounted on
devtmpfs             4071524          0    4071524   0% /dev
tmpfs                4082468     304268    3778200   8% /dev/shm
tmpfs                4082468       1544    4080924   1% /run
tmpfs                4082468          0    4082468   0% /sys/fs/cgroup
/dev/sda2           50264772   20194444   27493944  43% /
tmpfs                4082468        112    4082356   1% /tmp
/dev/sdb1          480589520   11981140  444172720   3% /home
/dev/sda5          894266040  423171176  425645700  50% /opt
/dev/sda1             487652     136081     321875  30% /boot
ds:/volume1/video 2879621632 1182232064 1697287168  42% /home/egreshko/Videos
tmpfs                 816496          0     816496   0% /run/user/985
tmpfs                 816496         28     816468   1% /run/user/1029","$ mount | grep ds  
$ /usr/bin/df
","```bash
mount -t nfs4 ds:/volume1/syntegra /syntegra
mount -t nfs4 ds:/volume1/misty /home/user/misty
df
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1285623,
1354078,Tomas DabaÅ¡inskas,2016-07-09T08:06:28Z,2016-07-11T15:35:05Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,Error in PREIN scriptlet in rpm package coreutils,normal,coreutils package should install successfully without errors,"coreutils installation fails with an error: ""error: %prein(coreutils-8.25-5.fc24.x86_64) scriptlet failed, exit status 126""",Always,[root@localhost liveuser]# dnf --installroot=/tmp --releasever=24 install coreutils,$ dnf --installroot=/tmp --releasever=24 install coreutils,dnf --installroot=/tmp --releasever=24 install coreutils,"None

The bug report describes an issue with installing coreutils using `dnf`, but it does not provide a specific command or test case that can be used to reproduce the error in a consistent manner. The problem seems related to a scriptlet failing during installation, which may depend on the environment and specific conditions of the Fedora live system at the time of reporting. Without more details or a precise way to replicate the environmental context, no direct commands for reproduction are available from the given information.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1354078,
1352691,shamim.islam,2016-07-04T18:09:32Z,2016-07-04T20:21:22Z,CLOSED DUPLICATE,unspecified,urgent,Fedora,coreutils,ls incorrectly shows quotes when displaying files with a space in the name,normal,File with spaces.txt,File with spaces.txt',Always,"1. > ""File with spaces.txt""
2. ls","$ > ""File with spaces.txt""
$ ls","```bash
touch ""File with spaces.txt""
ls
```","None

The provided steps are not actual shell commands that can be run to reproduce the behavior; they seem more like a misunderstanding of how files with spaces are represented in terminal output. The step `> ""File with spaces.txt""` is intended to create an empty file named `""File with spaces.txt""`, but this will actually result in a filename with quotes due to the way itâs written, which isnât the usual way to test for quoted filenames in terminal output.

A proper command sequence would be:
```
touch 'File with spaces.txt'
ls
```",None,https://bugzilla.redhat.com/show_bug.cgi?id=1352691,
1348043,Yu Watanabe,2016-06-20T03:30:52Z,2016-06-22T14:25:08Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,post-script of coreutils-common cannot find mv command,normal,an error stating /bin/mv: No such file or directory,install without error message.,Always,,"$ dnf --installroot /tmp/hoge --releasever=25 --disablerepo=* \
--enablerepo=rawhide install coreutils","```bash
dnf --installroot /tmp/hoge --releasever=25 --disablerepo=* --enablerepo=rawhide install coreutils
```","None

The provided steps in the ""Steps to Reproduce"" section are incomplete and do not provide a clear sequence of actions beyond step 1. While step 1 suggests running the provided command, it does not clearly state that this command should fail as expected or specify how the outcome differs from what is anticipated, leading to ambiguity on whether the exact behavior described in the ""Actual results"" versus ""Expected results"" can be observed consistently using just that information. Therefore, a precise and complete test case cannot be extracted solely based on the given description.","```bash
dnf --installroot /tmp/hoge --releasever=25 --disablerepo=* --enablerepo=rawhide install coreutils
```",https://bugzilla.redhat.com/show_bug.cgi?id=1348043,
1335320,Account closed by the user,2016-05-11T22:18:36Z,2016-06-17T15:27:31Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,"sync /etc/DIR_COLORS , aka coreutils-DIR_COLORS , with latest upstream file",,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1335320,Lack of information
1303795,Noel McLoughlin,2016-02-02T01:20:07Z,2016-06-16T16:13:23Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,RFE: df output is non intuitive when reporting on multiple files residing in current directory (doc only),normal,,df command in coreutils 8.24 does not provide an option for strict ordering,Always,"1. # cd /
2. Execute these commands:
# df *
# df /*
# df bin lib lib64 sbin
3. Execute these commands:
# cd /
# df --totals *
# df --totals /l*
# df --totals bin lib lib64 sbin","$ cd /
$ df *
$ df /*
$ df bin lib lib64 sbin
$ cd /
$ df --totals *
$ df --totals /l*
$ df --totals bin lib lib64 sbin",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1303795,
647786,Daniel Walsh,2010-10-29T12:57:08Z,2016-06-15T14:31:59Z,CLOSED WONTFIX,low,medium,Fedora,coreutils,ls should show an indicator when there are file capabilities associated with a file,normal,file capabilities displayed in a clear way,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=647786,
440056,Petr Å plÃ­chal,2008-04-01T15:17:28Z,2016-06-01T01:36:49Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,cp preserve security context documentation inconsistencies,normal,cp command should match the documentation regarding security context preservation,cp -a command incorrectly preserves security contexts despite being documented as equivalent to -dpPR,Always,,"$ cp --help
$ man cp","```bash
cp /etc/shadow /tmp/shadow-dpPR; ls -lZ /tmp/shadow-dpPR
cp /etc/shadow /tmp/shadow-p; ls -lZ /tmp/shadow-p
cp /etc/shadow /tmp/shadow--preserve; ls -lZ /tmp/shadow--preserve
cp --preserve=all /etc/shadow /tmp/shadow--preserve=all; ls -lZ /tmp/shadow--preserve=all
cp --preserve=context /etc/shadow /tmp/shadow--preserve=context; ls -lZ /tmp/shadow--preserve=context
cp -a /etc/shadow /tmp/shadow-a; ls -lZ /tmp/shadow-a
```","cp /etc/shadow /tmp/shadow-dpPR -dpPR  
cp /etc/shadow /tmp/shadow-p -p  
cp /etc/shadow /tmp/shadow--preserve --preserve  
cp /etc/shadow /tmp/shadow--preserve=all --preserve=all  
cp /etc/shadow /tmp/shadow--preserve=context --preserve=context  
cp /etc/shadow /tmp/shadow-a -a  

# To check the security context:
ls -Z /tmp/shadow-*","cp -a /etc/shadow /tmp/shadow-a  
cp --preserve=all /etc/shadow /tmp/shadow--preserve=all  
cp --preserve=context /etc/shadow /tmp/shadow--preserve=context  
cp -dpPR /etc/shadow /tmp/shadow-dpPR  
cp -p /etc/shadow /tmp/shadow-p",https://bugzilla.redhat.com/show_bug.cgi?id=440056,
921708,Yann Droneaud,2013-03-14T18:08:45Z,2016-05-12T12:00:26Z,CLOSED WONTFIX,unspecified,medium,Fedora,coreutils,Improve handling of cp --reflink=always when not supported by destination FS,normal,cp --reflink=always command should fail without creating the destination file (dest),cp: failed to clone `dest' from `source',Always,"$ stat source
  File: `source'
  Size: 172253            Blocks: 344        IO Block: 4096   regular file
Device: fd02h/64770d        Inode: 1704360     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1002/ydroneaud)   Gid: ( 1002/ydroneaud)
Access: 2013-03-14 19:05:12.642541940 +0100
Modify: 2013-03-14 19:04:46.787541606 +0100
Change: 2013-03-14 19:04:46.787541606 +0100
 Birth: -
$ cp --reflink=always source dest
cp: failed to clone `dest' from `source': Inappropriate ioctl for device
$ stat dest
  File: `dest'
  Size: 0                 Blocks: 0          IO Block: 4096   regular empty file
Device: fd02h/64770d        Inode: 1707547     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1002/ydroneaud)   Gid: ( 1002/ydroneaud)
Access: 2013-03-14 19:07:06.493543407 +0100
Modify: 2013-03-14 19:07:06.493543407 +0100
Change: 2013-03-14 19:07:06.493543407 +0100
 Birth: -","$ stat source
$ cp --reflink=always source dest
$ stat dest","```bash
cp --reflink=always source dest
stat source
stat dest
```",None,"```bash
cp --reflink=always source dest
stat dest
```",https://bugzilla.redhat.com/show_bug.cgi?id=921708,
981845,JW,2013-07-06T09:18:32Z,2016-05-12T11:42:32Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,rm -I option inadequate,normal,1. -I NUM    prompt once before removing more than NUM files,1. -I     prompt once before removing more than three files,Always,1. man rm,$ man rm,"```bash
rm -I file1 file2 file3 file4
```","None

The provided Bugzilla entry does not specify any concrete command or test case that can be executed to demonstrate the issue; it mainly describes a preference for how an option should work rather than providing steps to reproduce a specific malfunction in behavior. The ""Steps to Reproduce"" section is incomplete, listing only ""man rm"" as step 1 and having no substantive subsequent steps. Therefore, based on the information given, there are no explicit commands or test cases available to reproduce the described issue.",rm -I a b c d,https://bugzilla.redhat.com/show_bug.cgi?id=981845,
1055290,Tom Horsley,2014-01-19T23:32:12Z,2016-05-12T09:59:28Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,nohup gets hup'ed,normal,background job protected from death by nohup,background job killed,Always,"1.install udev scripts in above web page
2.plug in solidoodle to USB port",,"```bash
nohup sleep 5 &
udevadm trigger
```","None

The provided Bug Description does not specify exact commands or a precise test case to reproduce the issue. It describes a scenario involving udev scripts and background tasks that work in one version of Fedora but fail in another, indicating a possible change in behavior between Fedora 19 and Fedora 20. However, without more specific details about the configuration, environment setup, or exact commands from the referenced web page, it is not possible to provide a concrete command or test case for reproducing this bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1055290,
1250113,Nikos Mavrogiannopoulos,2015-08-04T14:30:06Z,2016-05-11T16:09:29Z,CLOSED CURRENTRELEASE,unspecified,unspecified,Fedora,coreutils,coreutils doesn't include a base32 binary,normal,base32 encoding included in Coreutils include as an option,Coreutils does not currently support base32 encoding,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1250113,
890223,RaphaÃ«l Flores,2012-12-25T21:49:56Z,2016-05-11T15:42:24Z,CLOSED CURRENTRELEASE,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils-8.15-9.fc17: leave_dir: Process /usr/bin/du was killed by signal 6 (SIGABRT),normal,du' command executed successfully,du' command causes a crash,Always,,$ du -sh 6e56p56v.default/,"```bash
du -sh -sh 6e56p56v.default/
```",du -sh -sh 6e56p56v.default/,du -sh -sh 6e56p56v.default/,https://bugzilla.redhat.com/show_bug.cgi?id=890223,
1334898,Eric Sammons,2016-05-10T18:31:42Z,2016-05-11T05:27:58Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,ls shows files and directories with spaces surrounded by tic marks,normal,Test File,Test File',Always,"1. mkdir Test\ Dir
2. ls","$ mkdir Test\ Dir
$ ls","```bash
mkdir 'Test Dir'
ls
```",mkdir Test\ Dir; ls,None,https://bugzilla.redhat.com/show_bug.cgi?id=1334898,
1149761,Zbigniew JÄdrzejewski-Szmek,2014-10-06T14:57:21Z,2016-04-25T11:55:33Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,root login in emergency mode shows errors,normal,temporary file created successfully in the /tmp,failure to create the file due to the read-only file system,,,,"```bash
mktemp /tmp/.colorlsXXX
```",None,"```bash
mktemp /tmp/.colorlsXXX
echo ""test"" > ""$TMP""
```",https://bugzilla.redhat.com/show_bug.cgi?id=1149761,
1323163,Harald Hoyer,2016-04-01T12:25:54Z,2016-04-06T15:20:20Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,get rid of openssl-libs,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1323163,Confused if it should be included
1319594,Peng Wu,2016-03-21T07:35:59Z,2016-03-25T06:35:15Z,CLOSED UPSTREAM,unspecified,unspecified,Fedora,coreutils,"[CJK] when use ""ls -lh"", the date/time format is incorrect.",normal,"æ»ç¨é 168K
-rw-rw-r--. 1 guest guest 165K 3æ21æ¥ 14:27 coreutils.po","æ»ç¨é 168K
-rw-rw-r--. 1 guest guest 165K 3æ  21 14:27 coreutils.po",Always,"1. log-in with Simplified Chinese locale
2. run ""ls -lh""","$ export LANG=zh_CN.UTF-8
$ ls -lh","```
LC_ALL=zh_CN.UTF-8 ls -lh
```","```bash
LC_ALL=zh_CN.UTF-8 ls -lh
```","```bash
export LANG=zh_CN.UTF-8 && ls -lh
```",https://bugzilla.redhat.com/show_bug.cgi?id=1319594,
706605,Denys Vlasenko,2011-05-21T14:38:33Z,2016-03-17T12:52:30Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,"Please fix and improve ""od --help""/""man od"" wrt -w and -S options",normal,-S option clearly showing the correct usage,-S incorrectly states that the required parameter(--strings[=BYTES]) is optional,Always,,"$ od --help
$ man od","```bash
od --help
man od
od -S file.txt
od -S=10 file.bin
od -w file.txt
od -w=10 file.txt
```","None

The provided bug description discusses issues with documentation clarity and behavior of options but does not specify exact commands or test cases needed to reproduce any functional bugs directly. The concerns are primarily about how the `-S` and `-w` options are documented, rather than a failure in functionality that can be reproduced with specific commands.",None,https://bugzilla.redhat.com/show_bug.cgi?id=706605,
1314722,Matteo Melli,2016-03-04T10:40:59Z,2016-03-05T21:22:10Z,CLOSED RAWHIDE,unspecified,high,Fedora,coreutils,cut does a strange cut,normal,zip,"https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip
jaxb-xew-plugin-release-1.0",Always,"1. Execute shell command:
echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2","$ echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0"" | cut -d'|' -f2","```bash
echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2
```","echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2","echo ""https://github.com/dmak/jaxb-xew-plugin/archive/release-1.0.zip|zip|jaxb-xew-plugin-release-1.0|com.github.jaxb-xew-plugin:jaxb-xew-plugin:jar:1.0""|cut -d'|' -f2",https://bugzilla.redhat.com/show_bug.cgi?id=1314722,
586029,John Sullivan,2010-04-26T16:31:10Z,2016-02-22T12:47:48Z,CLOSED ERRATA,low,medium,Fedora,coreutils,LS_COLORS setup in /etc/profile.d has insufficient escaping,normal,Shell startup time would ideally be as independent as possible of the current directory,Shell is slow to start if the current directory is slow to enumerate,Always,"1. cd to a large directory (I noticed this in /usr/share/man/man3)
2. echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
3. search for blocks of consecutive getdents calls. Two instances of scanning /etc/profile.d can be ignored. After these the next instance is a scan of the current directory.","$ cd /usr/share/man/man3
$ echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
$ /getdents","```bash
cd /usr/share/man/man3; echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
```","cd /usr/share/man/man3; echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less

None of the steps provided directly pinpoint a coreutils command causing the issue but rather describe how to observe the unnecessary directory scan during shell startup. The given step will reproduce the observed behavior where unnecessary scanning occurs, indicating the presence of the bug.","```bash
cd /usr/share/man/man3 && echo exit | script -c ""strace -f bash 2>&1"" /dev/stdout | less
```",https://bugzilla.redhat.com/show_bug.cgi?id=586029,
1306393,vvs,2016-02-10T17:16:47Z,2016-02-17T03:49:40Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,unexpand chokes on empty lines,normal,it should successfully process all lines.,unexpand: input line is too long,Always,"1. echo >test.txt
2. unexpand test.txt","$ echo >test.txt
$ unexpand test.txt","```bash
echo -e ""\n\n"" > test.txt; unexpand test.txt
```","echo >test.txt  
unexpand test.txt",echo > test.txt && unexpand test.txt,https://bugzilla.redhat.com/show_bug.cgi?id=1306393,
1304839,Sandro Mani,2016-02-04T18:29:24Z,2016-02-15T12:43:06Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,cut with coreutils-i18n-cut.patch broken if field width >= 64 chars,normal,should correctly display the third field based on the colon delimiter whether the field is short or long,fails to process fields wider than 63 characters correctly,Always,"$ echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
$ cut -d':' -f 3 test
a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX

$ echo 'a_shorter_field::foo' > test
$ cut -d':' -f 3 test
foo","$ echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
$ cut -d':' -f 3 test
$ echo 'a_shorter_field::foo' > test
$ cut -d':' -f 3 test","```bash
echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test; cut -d':' -f 3 test
echo 'a_shorter_field::foo' > test; cut -d':' -f 3 test
```","echo 'a_long_field_wider_than_sixty_three_characters_XXXXXXXXXXXXXXXX::foo' > test
cut -d':' -f 3 test

echo 'a_shorter_field::foo' > test
cut -d':' -f 3 test",None,https://bugzilla.redhat.com/show_bug.cgi?id=1304839,
1304071,George R. Goffe,2016-02-02T19:31:58Z,2016-02-03T08:23:33Z,CLOSED NOTABUG,unspecified,medium,Fedora,coreutils,possible sort bug,normal,sort'command should accept both -S 3g and -S3g as valid input,"error message for ""-S 3g"" but NOT for ""-S3g""",Always,"# this seems to work

sort -T $sorttmp -S""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd

# this does not note the blank after ""-S""

sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd

sort: cannot read: 3g: No such file or directory

which sort

/bin/sort","$ sort -T $sorttmp -S""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd
$ sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd","```bash
sort -T /tmp -S""3g"" -uk1 < input.txt
sort -T /tmp -S ""3g"" -uk1 < input.txt
```","sort -T $sorttmp -S ""3g"" -uk1 | egrep -v '^$' | egrep '\.com' < 1000s > 1000s.srtd","sort -T $sorttmp -S ""3g"" -uk1 < 1000s > 1000s.srtd",https://bugzilla.redhat.com/show_bug.cgi?id=1304071,
1249695,Viktor Jancik,2015-08-03T15:09:04Z,2016-02-01T02:25:52Z,CLOSED NOTABUG,unspecified,low,Fedora,coreutils,Install utility manpage references yum instead of dnf,normal,"Should mention dnf",Mentions yum,Always,"1. $man install
2. /yum","$ man install","$ man install | grep yum 
$ man install | grep dnf",None,$ man install,https://bugzilla.redhat.com/show_bug.cgi?id=1249695,
1298736,Richard Geary,2016-01-14T21:04:13Z,2016-01-18T00:44:26Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,[abrt] coreutils: set_program_name(): cat killed by SIGABRT,normal,gtest application should run successfully without crashing and the set_program_name function ,failure in the set_program_name function,Always,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1298736,Lack of information
1297464,Yeasah Pell,2016-01-11T15:21:44Z,2016-01-15T23:24:06Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,mv data loss when destination directory appears in source list more than once,normal,"mv: cannot move 'test' to a subdirectory of itself, 'test/test'
mv: will not create hard link 'test/test' to directory 'test/test'
(and the directory remains unchanged with contents intact)","mv: cannot move 'test' to a subdirectory of itself, 'test/test'
mv: warning: source directory 'test' specified more than once
(and the directory and all contents are destroyed)",Always,"1. mkdir test
2. mv test test test","$ mkdir test
$ mv test test test","```bash
mkdir test
mv test test test
```","mkdir test
mv test test test","```bash
mkdir test && mv test test test
```",https://bugzilla.redhat.com/show_bug.cgi?id=1297464,
1013171,JW,2013-09-28T00:08:37Z,2016-01-04T14:47:53Z,CLOSED EOL,unspecified,unspecified,Fedora,coreutils,"rm gets concept of ""write-protected"" wrong",normal,"root should also be prompted, just like an ordinary user","As a non-root user result is prompt ""remove write-protected regular empty file 'testfile'"".
For root user the result is silent removal of file.",Always,"1. touch testfile
2. chmod -w testfile
3. rm testfile","$ touch testfile
$ chmod -w testfile
$ rm testfile","```bash
touch testfile; 
chmod 0444 testfile; 
sudo rm testfile
```","None

The steps provided in the bug report are descriptions of how to set up a scenario and what happens, but they do not directly state a command that would be used to test for the bug specifically as requested. The scenario setup is:
1. `touch testfile`
2. `chmod -w testfile`
3. `rm testfile`

However, these steps are more explanatory in nature and describe both how to set up the environment and what behavior occurs based on user permissions. Since there isn't a single command or explicit test case given that isolates the bug for direct reproduction (beyond setting up the scenario), ""None"" is provided as per instruction if no specific reproducible command or test case exists.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1013171,
1199679,Tom Horsley,2015-03-07T00:21:42Z,2016-01-04T14:43:55Z,CLOSED NEXTRELEASE,unspecified,unspecified,Fedora,coreutils,df -l stats everything and can hang on NFS mountpoints,normal,"No hang, it shouldn't be touching anything on the network.",Hang when there is network or server trouble,Always,"1.run strace df -l -h on a system with network mounts.
2.grep the strace output for stat() calls.
3.see stat() calls for every single network mount as well as the local ones.","$ strace df -l -h
$ strace df -l -h 2>&1 | grep stat",strace df -l -h,strace df -l -h,strace df -l -h | grep stat\(,https://bugzilla.redhat.com/show_bug.cgi?id=1199679,
1196642,Lubomir Rintel,2015-02-26T12:45:08Z,2016-01-04T14:43:16Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,DIR_COLORS.256color ls colors hard to read with white and dark gray background,normal,Directories and symbolic links should be displayed with readable color variants,DIR_COLORS.256color uses dark variants of the colors for directories and links which are sometimes hard to read,Always,,"$ gnome-terminal -- bash -c 'export TERM=xterm-256color; bash'
$ xterm -bg white -e 'export TERM=xterm-256color; bash'","```
LS_COLORS=$(/etc/profile.d/dir_colors.256color.sh) ls -l --color=always
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1196642,
1027279,PÃ¡draig Brady,2013-11-06T13:15:15Z,2016-01-04T14:41:28Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"colorls.csh errors out if ""noclobber"" is set",normal,/etc/profile.d/colorls.csh script successfully write to the temporary file regardless of the noclobber setting,/etc/profile.d/colorls.csh script fails with the error /tmp/.colorlsXXX: File exists. when noclobber is enabled,Always,,"$ echo ""set -o noclobber"" >> ~/.bashrc
$ source ~/.bashrc
$ /etc/profile.d/colorls.csh","```bash
set -o noclobber
mktemp /tmp/.colorlsXXX
echo ""test"" > /tmp/.colorlsXXX
```","None

The provided Bug Description does not include specific commands or a test case that can be directly executed to reproduce the bug. The issue revolves around modifications in script behavior due to shell settings and script interactions, but no explicit command sequence is given for reproduction.","To reproduce the bug, you can use the following command sequence:

```bash
set noclobber
/tmp/profile.d/colorls.csh
```

This sets the `noclobber` option in the shell and then runs the script that is known to cause issues when `noclobber` is set.",https://bugzilla.redhat.com/show_bug.cgi?id=1027279,
1270480,Ali Akcaagac,2015-10-10T09:22:39Z,2015-10-14T15:09:00Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,*fatal* sort broken: yet again!,normal,correctly ordered text data,"incorrect sorting, introducing unexpected spaces",Always,,"$ cat > input.txt <<EOF
b
c
a
d
f
                      : e
e
h
g
EOF
$ sort input.txt > old.txt # using coreutils 8.23-9 
$ sort input.txt > new.txt # using coreutils 8.23-11
$ diff -ruN old.txt new.txt > diff.txt
$ cat diff.txt","```bash
find . -type f -exec md5sum {} \; | sort
```
Note: To fully reproduce the bug, you would need to create a directory with at least two files having the same checksum and then run this command on machines with coreutils 8.22-15 and 8.23-10 respectively, comparing the outputs for differences.","None

The provided bug description does not specify exact input files or additional details that would allow someone to reproduce the issue reliably. While a command is given (`find . -type f -exec md5sum {} \; | sort`), without knowing the specific file contents and structure of the directories, it's not possible to precisely recreate the scenario where two different versions of coreutils produce different outputs for identical input data.",find . -type f -exec md5sum {} \; | sort,https://bugzilla.redhat.com/show_bug.cgi?id=1270480,
920806,Daniel BerrangÃ©,2013-03-12T19:56:38Z,2015-07-21T18:20:27Z,CLOSED RAWHIDE,unspecified,unspecified,Fedora,coreutils,df command misses out NFS mounts,normal,df shows all usage for every single mount point that the 'mount' command reports,df only shows usage for one random mount,Always,"1. Export multiple NFS volumes from a remote server
2. Mount all volumes on the client
3. Run 'df'","$ sudo exportfs -o rw,sync /export/vol1 client_IP
$ sudo mount -t nfs server_IP:/export/vol1 /mnt/vol1
$ df",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=920806,
1243572,Michael S. Tsirkin,2015-07-15T19:45:03Z,2015-07-16T12:25:36Z,CLOSED CANTFIX,unspecified,unspecified,Fedora,coreutils,relative date broken in date,normal,should give a date 3 days from now at midnight,gives todays' date,Always,"1. date +%F --date=""00:00:00 +3 days""","$ date +%F --date=""00:00:00 +3 days""",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1243572,
1135583,Paul Moore,2014-08-29T17:21:10Z,2015-07-08T12:25:12Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,coreutils-8.23 changes the output formatting of SELinux label information,normal,"Similar output.","<< Original behavior (coreutils-8.22)
# rpm -q coreutils
coreutils-8.22-11.el7.x86_64
# ls -Z foo
-rw-r--r--. root root root:object_r:user_tmp_t:s0      foo
# ls -lZ foo
-rw-r--r--. root root root:object_r:user_tmp_t:s0      foo
<< New behavior (coreutils-8.23)
# rpm -q coreutils
coreutils-8.23-3.fc22.x86_64
# ls -Z foo
unconfined_u:object_r:user_tmp_t:s0 foo
# ls -lZ foo
-rw-r--r--. 1 root root unconfined_u:object_r:user_tmp_t:s0 0 Aug 29 13:11 foo",Always,Compare the output of 'ls -Z' using coreutils-8.22 to coreutils-8.23.,"$ rpm -q coreutils
$ ls -Z foo
$ ls -lZ foo","```bash
sha256sum -c CHECKSUM
```
Assuming there is a `CHECKSUM` file in the current directory with contents similar to:

```bash
 sha256 hash  filename1
 sha256 hash  filename2
 sha256 hash  missingfile1
 sha256 hash  filename3
 sha256 hash  missingfile2
```

And only some of these files exist in the current directory. 

To create such a `CHECKSUM` file:

```bash
echo ""sha256_hash_1 filename1"" > CHECKSUM
echo ""sha256_hash_2 filename2"" >> CHECKSUM
echo ""sha256_hash_3 missingfile1"" >> CHECKSUM
echo ""sha256_hash_4 filename3"" >> CHECKSUM
echo ""sha256_hash_5 missingfile2"" >> CHECKSUM

touch filename1
touch filename2
touch filename3
```",None,sha256sum -c *SUM,https://bugzilla.redhat.com/show_bug.cgi?id=1135583,
1235873,rvcsaba,2015-06-26T00:35:44Z,2015-06-28T13:06:45Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,Version sort generate bad order,normal,Correct order.,First and second row changed.,Always,,"$ echo -e ""version-1.2.10\nversion-1.2.2\nversion-1.2.3\nversion-1.10.1\nversion-1.2.20"" > sortbug.txt
$ cat sortbug.txt
$ sort -rV sortbug.txt","```
dd if=/dev/zero of=/dev/null& pid=$!; kill -USR1 $pid; sleep 1; kill $pid
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=1235873,
1146185,GÃ¶ran Uddeborg,2014-09-24T17:34:20Z,2015-05-30T15:37:30Z,CLOSED ERRATA,unspecified,unspecified,Fedora,coreutils,"""sort"" looks at more than the flags specify in non-C locales",normal,"sort: using âen_US.utf8â sorting rules
sort->strcoll(""a b"", ""a-b-c"")                    = -1
a b!x
___
a-b-c!x
_____
+++ exited (status 0) +++","sort: using âen_US.utf8â sorting rules
sort->strcoll(""a b!x"", ""a-b-c!x"")                = 21
a-b-c!x
_____
a b!x
___
+++ exited (status 0) +++",Always,"1. printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 ltrace -e strcoll sort -s --debug -k1,1 -t!","$ printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 ltrace -e strcoll sort -s --debug -k1,1 -t!","```
sort -k 1 old.txt > sorted_old.txt
sort -k 1 new.txt > sorted_new.txt
diff -ruN sorted_old.txt sorted_new.txt > diff.txt
```","None

The provided bug report does not specify exact commands or a precise test case that would allow one to directly reproduce the issue. The developer mentions differences observed between two versions of coreutils through attached files (`old.txt` and `new.txt`) but doesn't provide an explicit command for reproducing the erroneous behavior with the sort utility itself.",None,https://bugzilla.redhat.com/show_bug.cgi?id=1146185,
1169027,(GalaxyMaster),2014-11-29T05:06:18Z,2015-05-30T15:37:23Z,CLOSED ERRATA,unspecified,low,Fedora,coreutils,missing %lang info for LC_TIME locale subdirs,normal,,,Always,"[root@localhost ~]# rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5
	/usr/share/locale/af/LC_TIME
af	/usr/share/locale/af/LC_TIME/coreutils.mo
	/usr/share/locale/be/LC_TIME
be	/usr/share/locale/be/LC_TIME/coreutils.mo
	/usr/share/locale/bg/LC_TIME
[root@localhost ~]# rpm -qf /usr/share/locale/af
filesystem-3.2-18.el7.x86_64
[root@localhost ~]# rpm -qf /usr/share/locale/af/LC_MESSAGES
filesystem-3.2-18.el7.x86_64
[root@localhost ~]# rpm -qf /usr/share/locale/af/LC_TIME
coreutils-8.22-11.el7.x86_64
[root@localhost ~]#","$ rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5  
$ rpm -qf /usr/share/locale/af  
$ rpm -qf /usr/share/locale/af/LC_MESSAGES  
$ rpm -qf /usr/share/locale/af/LC_TIME  ","```bash
# Set up NFS server and client environment (not provided in detail)
# Export multiple NFS volumes from a remote server
# Mount all volumes on the client
mount nas.example.com:/Photos /mnt/Photos -t nfs
mount nas.example.com:/Download /mnt/Download -t nfs
mount nas.example.com:/Multimedia /mnt/Multimedia -t nfs
mount nas.example.com:/VirtualMachines /mnt/VirtualMachines -t nfs
mount nas.example.com:/Backups /mnt/Backups -t nfs

# Run 'df'
df | grep nas
```","None

The provided description outlines a sequence of steps but does not offer a specific and direct command or test case that can be executed independently to reproduce the issue. The reproducibility requires setting up an NFS server with multiple exports, mounting these on a client system, and then observing the behavior with `df`, which is not a self-contained test case within the scope of coreutils alone but involves external configurations (NFS setup).",None,https://bugzilla.redhat.com/show_bug.cgi?id=1169027,
1177515,ljm,2014-12-28T12:05:10Z,2015-05-30T06:49:23Z,CLOSED INSUFFICIENT_DATA,unspecified,low,Fedora,coreutils,Cat end-of-file processing,normal,"/verlaine/home/vbox/VDI/ton/Logs/VBox.log.2â
â/home/vbox/VDI/ton/ton.vbox-prevâ -> â/room/wdbook1/nfs/Public/backup/verlaine/home/vbox/VDI/ton/ton.vbox-prevâ
[ljm@verlaine ~]$ ","/verlaine/home/vbox/VDI/ton/Logs/VBox.log.2â
â/home/vbox/VDI/ton/ton.vbox-prevâ -> â/room/wdbook1/nfs/Public/backup/verlaine/home/vbox/VDI/ton/ton.vbox-prevâ
ï¿½ï¿½Tpts/0ï¿½[n`ï¿½ZHd\Hï¿½6ZHï¿½d\Hl?ï¿½YHï¿½d\HÐd\HÐd\Hï¿½6ZHPï¿½a\HÐd\H ï¿½d\Ðd\H`ï¿½Þ£ï¿½0ï¿½a\HXï¿½Þ£ï¿½ï¿½d\Hï¿½ï¿½6ZHï¿½d\Hï¿½d\Hï¿½c\Hï¿½d\Hï¿½ï¿½d\?ï¿½ï¿½T:0[ljm@verlaine ~]$ ",Always,"1. Start a process that produces output. In my case: cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup
2.After a while, do a cat of that file.","$ cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup  
$ cat /var/log/lastbackup  ","date +%F --date=""00:00:00 +3 days""","date +%F --date=""00:00:00 +3 days""","date +%F --date=""00:00:00 +3 days""",https://bugzilla.redhat.com/show_bug.cgi?id=1177515,
1207314,Pavel LisÃ½,2015-03-30T16:49:17Z,2015-03-30T17:22:21Z,CLOSED NOTABUG,unspecified,unspecified,Fedora,coreutils,tr does not work with file ':' in current directory,normal,ABC,abc,Always,"1. echo > :
2. echo abc | tr [:lower:] [:upper:]
3. rm \:","$ echo > :
$ echo abc | tr '[:lower:]' '[:upper:]'
$ rm \:",ls -Z foo; ls -lZ foo,"ls -Z foo  
ls -lZ foo","```bash
ls -Z foo
ls -lZ foo
```",https://bugzilla.redhat.com/show_bug.cgi?id=1207314,
239501,Simon Perreault,2007-05-08T23:12:39Z,2014-05-15T20:53:06Z,CLOSED WORKSFORME,medium,low,Fedora,coreutils,Colors are too dark,normal,Directory colors are light blue.,"Directory colors are dark blue.",Always,"Type ""ls /""","$ ls /","```bash
sort -rV sortbug.txt
```","sort -rV sortbug.txt

cat sortbug.txt 
NetworkManager-1.0.0-5.fc22
NetworkManager-0.9.10.0-8.git20140704.fc22
NetworkManager-1.0.0-8.fc22
NetworkManager-1.0.0-9.fc22
NetworkManager-1.0.4-0.1.git20150618.8cffaf3bf5.fc22
NetworkManager-0.9.10.0-10.git20140704.fc22
NetworkManager-1.0.0-7.fc22
NetworkManager-0.9.10.0-14.git20140704.fc22
NetworkManager-0.9.10.0-13.git20140704.fc22
NetworkManager-1.0.2-1.fc22
NetworkManager-1.0.0-1.fc22
NetworkManager-1.0.4-0.1.git20160624.f245b49a.fc22
NetworkManager-1.0.0-4.fc22
NetworkManager-1.0.0-6.fc22
NetworkManager-1.0.0-3.fc22
NetworkManager-0.9.10.0-11.git20140704.fc22
NetworkManager-0.9.10.0-6.git20140704.fc22
NetworkManager-0.9.10.0-12.git20140704.fc22","```bash
echo -e ""NetworkManager-1.0.4-0.1.git20150618.8cffaf3bf5.fc22\nNetworkManager-1.0.4-0.1.git20160624.f245b49a.fc22"" | sort -rV
```",https://bugzilla.redhat.com/show_bug.cgi?id=239501,
243588,Michael McLagan,2007-06-10T08:42:23Z,2008-06-17T01:31:54Z,CLOSED WONTFIX,low,medium,Fedora,coreutils,cp gives error when destination is symlink,normal,"[root@localhost var]# dir tmp
total 12
lrwxrwxrwx 1 root     root        4 Jun 10 04:35 alpha -> beta
-rw-r--r-- 1 root     root        5 Jun 10 04:36 beta",cp: cannot create regular file `tmp/alpha': File exists,Always,"1. cd /var
2. ln -sf beta tmp/alpha
3. echo ""blah"" > tmp/alpha  (this creates a file called beta with ""blah"" in it)
4. rm tmp/beta
5. echo ""blah"" > file
6. cp file tmp/alpha","$ cd /var
$ ln -sf beta tmp/alpha
$ echo ""blah"" > tmp/alpha
$ rm tmp/beta
$ echo ""blah"" > file
$ cp file tmp/alpha","```bash
printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 sort -s -k1,1 -t!
```","printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 sort -s --debug -k1,1 -t!","printf 'a b!x\na-b-c!x\n' | LANG=en_US.utf8 sort -s --debug -k1,1 -t!",https://bugzilla.redhat.com/show_bug.cgi?id=243588,
228304,ericm24x7,2007-02-12T16:18:08Z,2008-04-22T16:13:27Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,"avc: denied { associate } for comm=""cp"" egid=0 euid=0 exe=""/bin/cp""",normal,Should proceed without AVC denial,"`/mnt/autorun.apm' -> `test/autorun.apm'
cp: cannot create regular file `test/autorun.apm': Permission denied",Always,"1. mount an ISO image file
   i.e.
   mount -o loop dvdimage.iso /mnt
2. mkdir ~/test ; cd 
3. cp -av /mnt/* ~/test","$ mount -o loop dvdimage.iso /mnt
$ mkdir ~/test ; cd ~
$ cp -av /mnt/* ~/test","```bash
rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5
rpm -qf /usr/share/locale/af
rpm -qf /usr/share/locale/af/LC_MESSAGES
rpm -qf /usr/share/locale/af/LC_TIME
```","None

The provided steps are more about identifying the ownership issue rather than reproducing a functional bug in coreutils or filesystem packages. The reported issue is related to package management and directory ownership, not a functional error that can be reproduced with specific commands or input data.","```bash
rpm -ql --queryformat '[%{FILELANGS}\t%{FILENAMES}\n]' coreutils | grep LC_TIME | head -5
rpm -qf /usr/share/locale/af/LC_TIME
```",https://bugzilla.redhat.com/show_bug.cgi?id=228304,
368721,Sigh,2007-11-06T18:47:04Z,2008-03-13T07:45:37Z,CLOSED CURRENTRELEASE,low,low,Fedora,coreutils,PAM *-l files undocumented,normal,"I would have expected the parts of the docs that mention PAM support in the
first place to include ""If the -l option is given, the corresponding *-l PAM
file will be used instead.  By default, these include the base PAM file and then
add some additional blahblahblah...""","I had to look at coreutils-split-pam.patch in the srpm to confirm my guess that
these files had something to do with the -l option.",Always,"1.  See ""su-l"" mentioned in logwatch report.
2.  Fail to find explanation anywhere in docs, --help, FAQs, bug lists.
3.  Become mildly annoyed at the presence of undocumented /etc files.
4.  Become slightly alarmed at ""su-l"" appearing in strings(1) output on /bin/su
with no explanation.",,"```bash
cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaine/home >> /var/log/lastbackup &
cat /var/log/lastbackup
```","sudo cp -vrup /home/* /room/wdbook1/nfs/Public/backup/verlaiine/home >> /var/log/lastbackup
sudo cat /var/log/lastbackup",None,https://bugzilla.redhat.com/show_bug.cgi?id=368721,
430821,Antonio Gallardo,2008-01-29T23:06:29Z,2008-01-30T11:07:26Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,Sort does not sort in normal order,normal,"F-A
F-C
FB","F-A
FB
F-C",Always,"1. Write a file called ""a.txt"" with the following 3 lines:
F-A
FB
F-C

2. run in shell this command:
sort a.txt","$ echo -e ""F-A\nFB\nF-C"" > a.txt
$ sort a.txt",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=430821,
284881,"Jan ""Yenya"" Kasprzak",2007-09-10T17:11:46Z,2008-01-28T15:42:52Z,CLOSED NOTABUG,medium,low,Fedora,coreutils,"sort -n -t, does not work",normal,"2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
2101,5AHBVEQW@dUGE@
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
21014,V8:AACI4TD925@","2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@",Always,"1. keep the default locales (LC_COLLATE and LC_NUMERIC) value of en_US.UTF-8
2. sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF","$ export LC_COLLATE=en_US.UTF-8
$ export LC_NUMERIC=en_US.UTF-8
$ sort -n -t, -k1 <<'EOF'",None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=284881,
428494,Harold Kornylak,2008-01-12T06:21:35Z,2008-01-17T16:13:30Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,sort man page needs to be updated to reflect i18n,normal,lines with leading space or _ should sort to top unless -b and -d set,sort order ignores leading spaces,Always,"1.create a file with some lines having leading space or leading _
2.sort","$ echo -e ""  leading space\n_leading underscore\nnormal line\n another space"" > file.txt  
$ sort file.txt  ","```bash
TIME_STYLE=locale LC_ALL=en_US.UTF-8 ls -l / | head -n 3
TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3
```","TIME_STYLE=locale LC_ALL=en_US.UTF-8 ls -l / | head -n 3  
TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3",TIME_STYLE=locale LC_ALL=fi_FI.UTF-8 ls -l / | head -n 3,https://bugzilla.redhat.com/show_bug.cgi?id=428494,
428679,Harold Kornylak,2008-01-14T15:35:04Z,2008-01-14T17:52:25Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,Sort behaves as if the -b and -d options are always set,normal," a
 a
_a
_Z
a
aa
A
Z","a
 a
  a
_a
A
aa
Z
_Z",Always,,"$ echo -e ""a\na\n a\n_a\nA\naa\nZ\n_Z"" > test.txt
$ sort test.txt","```bash
echo > :
echo abc | tr [:lower:] [:upper:]
rm \:
```","echo > :
echo abc | tr [:lower:] [:upper:]
rm \:",None,https://bugzilla.redhat.com/show_bug.cgi?id=428679,
232458,Gergely GÃ¡bor,2007-03-15T16:36:01Z,2007-12-17T09:56:21Z,CLOSED WORKSFORME,medium,low,Fedora,coreutils,dd reports false statistics in hu_HU.UTF-8 locale,normal,"[ggergely@vosztok ~]$ LC_ALL=C dd if=/dev/zero of=/dev/null bs=4M count=1024
1024+0 records in
1024+0 records out
4294967296 bytes (4.3 GB) copied, 0.242406 seconds, 17.7 GB/s
[ggergely@vosztok ~]$ ","[ggergely@vosztok ~]$ LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M
count=1024
1024+0 beolvasott rekord
1024+0 kiÃ­rt rekord
1 bÃ¡jt (1 B) mÃ¡solva, 0,24047 mÃ¡sodperc, 17,9 GB/mp
[ggergely@vosztok ~]$ ",Always,"1. use dd
2. wait untils finishez
3. see bas statistics -> panic!",$ LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,"To reproduce the bug described, we need to analyze the provided information carefully. The details include environment variables, memory maps, and log messages indicating that a core dump was saved for the `/bin/sleep` command on multiple occasions.

Given this context, it seems like the issue might be related to how the `sleep` command is executing or being terminated, possibly due to a signal or an unexpected condition. Here are some steps and commands that could potentially reproduce the bug:

1. **Run the Sleep Command**: The most straightforward approach is to run the `/bin/sleep` command with various parameters to see if it crashes or produces a core dump.
   ```
   /bin/sleep 10
   ```

2. **Check for Signal Handling**: Sometimes, processes crash due to how they handle signals. You can try sending different signals to the `sleep` process to observe its behavior.
   ```
   /bin/sleep 100 &
   kill -SIGINT $!
   kill -SIGSEGV $!
   ```

3. **Use GDB for Debugging**: Running the `sleep` command under a debugger like GDB might provide insights into what's going wrong.
   ```
   gdb --args /bin/sleep 10
   run
   ```

4. **Valgrind for Memory Issues**: If the issue is related to memory management, running the command with Valgrind could help identify problems.
   ```
   valgrind /bin/sleep 10
   ```

5. **Strace for System Calls**: To see if the problem lies in how system calls are being made or handled, you can use `strace`.
   ```
   strace /bin/sleep 10
   ```

6. **Reproduce with Different Parameters and Environment**: Try modifying environment variables that might affect the behavior of the `sleep` command, such as `LC_ALL`, `LANG`, etc., to see if the issue is locale or environment-dependent.
   ```
   LC_ALL=C /bin/sleep 10
   ```

7. **Check for File System Issues**: Ensure that the file system where `/bin/sleep` resides and where it might write temporary files (if any) is not full, corrupted, or has permissions issues.

8. **System Call Tracing with syscall**: If available, tracing syscalls can provide detailed insights into what the process was doing when it crashed.
   ```
   syscall_trace -c /bin/sleep 10
   ```

Remember, without more specific details about the expected behavior versus the actual behavior (e.g., error messages, exact conditions under which the bug occurs), these suggestions are speculative. The goal is to stress the `sleep` command in various ways to see if any of these methods can reproduce the core dump or crash condition described in the log messages.","To identify and potentially reproduce a bug based on the information provided in the log messages and environment details, we need to analyze the logs for clues about what caused the crashes. The logs show that `abrt` (Automatic Bug Reporting Tool) saved core dumps of the `/bin/sleep` command. This indicates that there might be some issue with how `/bin/sleep` is being run or a system-level problem causing it to crash.

### Steps to Reproduce the Issue

1. **Run Basic Sleep Command:**
   Start by running the `sleep` command in a controlled environment and observe if any crashes occur.
   ```sh
   sleep 5
   ```
   Check for core dumps using:
   ```sh
   abrt-cli list
   ```

2. **Check System Logs:**
   Look at `/var/log/messages` or similar system log files to see if there are any relevant messages around the time the crashes occurred.

3. **Inspect Environment Variables:**
   Ensure no unusual environment variables are set that might be causing issues with `sleep`. For example:
   ```sh
   env | grep SLEEP
   ```

4. **Run in Different Contexts:**
   Try running the sleep command under different conditions, such as within a script or background process.
   ```sh
   nohup sleep 5 &
   ```
   
   Or,
   ```sh
   (sleep 10; echo ""done"") &
   ```

5. **Check for Memory Corruption:**
   Use tools like `valgrind` to check if there's any memory corruption or issues that might cause the crash.
   ```sh
   valgrind /bin/sleep 5
   ```

6. **Verify System Dependencies:**
   Ensure all system libraries are up-to-date and properly installed, as a corrupted library could potentially cause crashes.
   ```sh
   ldd $(which sleep)
   ```
   
7. **Check for Kernel Issues:**
   Sometimes kernel issues can cause seemingly unrelated applications to crash. Check the dmesg output:
   ```sh
   dmesg | grep -i ""sleep""
   ```

8. **Reproduce with Specific Arguments:**
   The logs don't mention any specific arguments, but try running `sleep` with different arguments and see if that affects behavior.
   ```sh
   sleep 10 &
   sleep 30 &
   ```

### Test Cases

- Run `sleep` in the foreground and background to ensure it behaves consistently:
  ```sh
  sleep 5       # Foreground
  nohup sleep 10 &   # Background
  (sleep 20; echo ""done"") &    # Subshell Background
  ```

- Monitor system resources while running `sleep`:
  ```sh
  top | grep -i ""sleep""
  ```

### Summary

The steps above should help you systematically reproduce and diagnose the issue with `/bin/sleep`. By testing under different conditions, monitoring system resources, and using tools like `valgrind`, you can gather more information about what might be causing the crashes.","The provided information suggests that `/bin/sleep` is crashing and core dumps are being generated by ABRT (Automatic Bug Reporting Tool) on your system.

To reproduce this issue, follow these steps:

### 1. Set Up Environment

Make sure you have `abrt` installed on the system:
```sh
sudo yum install abrt  # On CentOS/RHEL
sudo apt-get install abrt  # On Ubuntu/Debian
```

Enable and start the ABRT service if it is not already running:
```sh
sudo systemctl enable abrtd
sudo systemctl start abrtd
```

### 2. Run Sleep Command

Try running the `sleep` command in a loop to simulate high usage, which might increase the likelihood of reproducing the issue:
```sh
while true; do /bin/sleep 10 & done
```
Or run it with various parameters (this is more likely if certain sleep values are problematic):
```sh
for i in {1..3600}; do /bin/sleep $i & done
```

### 3. Monitor ABRT

Monitor the ABRT logs to see if any core dumps are generated:
```sh
sudo journalctl -u abrtd -f
# or look at the specific log file for ABRT coredumps
tail -f /var/log/messages | grep abrt
```

### 4. Analyze Core Dumps

Once a core dump is generated, use `abrt-cli` to investigate:
```sh
sudo abrt-cli list
sudo abrt-cli info <problem_id>
# Optionally, analyze the coredump with gdb
gdb /bin/sleep /var/spool/abrt/ccpp-<timestamp>.new/coredump
```

### 5. Additional Checks

Check for any kernel panic messages or other system logs that could indicate an underlying hardware or software issue:
```sh
dmesg | grep -i error
tail -f /var/log/messages
```

By performing these steps, you should be able to reproduce the bug and gather more information about what is causing the `sleep` command to crash. If you can reliably reproduce this issue, consider reporting it to the appropriate maintainers with detailed logs and system specifications.",https://bugzilla.redhat.com/show_bug.cgi?id=232458,
230950,Michal Jaegermann,2007-03-05T00:01:46Z,2007-12-14T11:19:20Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,anaconda  confused by selinux,normal,cp /tmp/syslog /tmp/logs/ should successfully copy the file without errors,cp: cannot set setfscreatecon `system_u:object_r:ramfs_t:s0': Read-only file system,Always,"After a boot with images using kernel-2.6.20-1.2962.fc7 and
in a shell supplied by ancoda if you try, say, this:

mkdir /tmp/logs
cp /tmp/syslog /tmp/logs/","$ mkdir /tmp/logs  
$ cp /tmp/syslog /tmp/logs/",sleep 100000,None,sleep 100000,https://bugzilla.redhat.com/show_bug.cgi?id=230950,
246567,Karl Czajkowski,2007-07-03T05:03:48Z,2007-12-06T22:53:18Z,CLOSED ERRATA,low,medium,Fedora,coreutils,ls colour display corrupt for symbolic links,normal,"host::karlcz[~] /bin/ls --color=always | grep hosts
hosts","host::karlcz[~] /bin/ls --color=always | grep hosts
argetmhosts",Always,"1. create a symbolic link such as /home/user -> ../../etc/hosts
2. cd /home/user
3. /bin/ls --color=always | grep hosts","$ ln -s ../../etc/hosts /home/user
$ cd /home/user
$ /bin/ls --color=always | grep hosts",mktemp -t /tmp/.colorlsXXX; bash -c 'echo > $TMP',None,None,https://bugzilla.redhat.com/show_bug.cgi?id=246567,
411181,Frank Sweetser,2007-12-04T22:03:44Z,2007-12-06T20:51:47Z,CLOSED ERRATA,low,low,Fedora,coreutils,%C output format (selinux file security context) of stat broken,,,,,,,"```
TZ=UTC+1 date  
TZ=UTC+2 date
TZ=UTC+3 date
```","TZ=UTC+1 date  
TZ=UTC+2 date  
TZ=UTC+3 date","```bash
TZ=UTC+1 date
TZ=UTC+2 date
TZ=UTC+3 date
```",https://bugzilla.redhat.com/show_bug.cgi?id=411181,
404511,idak,2007-11-29T15:00:38Z,2007-12-03T11:42:21Z,CLOSED ERRATA,low,low,Fedora,coreutils,Coreutils ls is wrong color for broken symlinks,,,,,,,sleep 100,"Based on the provided information, it appears that there's a segmentation fault or invalid memory access in the `pause` system call function. The issue seems to be related to a write operation to an invalid address within the `fs` segment register.

To reproduce this kind of issue, you would typically need more context about what triggers the bug, but given limited information, we can devise some potential test cases that might help identify the root cause:

### Steps to Reproduce

1. **Compile and Run a Minimal Test Case:**
   Create a minimal program that calls the `pause` system call repeatedly or under certain conditions (e.g., with specific environment variables set).

2. **Environment Setup:**
   - Ensure you are running on an appropriate architecture where this issue is observed.
   - Set up any necessary environment variables or configurations mentioned in the bug report.

### Example Test Case

Here's a minimal C program that calls `pause`:

```c
#include <unistd.h>
#include <stdio.h>

int main() {
    printf(""Calling pause...\n"");
    while (1) {
        pause();
    }
    return 0;
}
```

Compile and run this program to see if it crashes:

```sh
gcc -o test_pause test_pause.c
./test_pause
```

### Analyzing the Crash

If the crash occurs, use a debugger like `gdb` to analyze the exact location of the crash. Here are some commands you can use with `gdb`:

1. **Compile with Debugging Symbols:**

   ```sh
   gcc -o test_pause -ggdb test_pause.c
   ```

2. **Run with GDB:**

   ```sh
   gdb ./test_pause
   ```

3. **Set Breakpoints and Analyze the Crash:**

   ```gdb
   (gdb) run
   # When it crashes, use backtrace to see where it happened
   (gdb) bt
   # You can inspect registers with:
   (gdb) info registers
   ```

### Additional Tests

- **Threaded Environment:**
  If the issue is thread-related, you might want to test in a multi-threaded environment:

```c
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>

void *thread_func(void *arg) {
    while (1) {
        pause();
    }
    return NULL;
}

int main() {
    pthread_t thread;

    printf(""Creating thread...\n"");
    pthread_create(&thread, NULL, thread_func, NULL);

    while (1) {
        sleep(1);
    }

    return 0;
}
```

### Environment Variables and Configuration

- Ensure any environment variables that might influence the behavior of `pause` are set appropriately.
- Check for any known issues in specific versions of the OS or libraries you're using.

By running these test cases, you can pinpoint whether the issue is reproducible under normal conditions or if it requires a more complex setup.","The provided core dump indicates that a segmentation fault (SIGSEGV) occurred within the `pause` system call. However, given the context, this could be an artifact of how the signal handler interacts with the program, particularly if there is some misuse of memory or incorrect handling of signals.

However, based on what has been provided, it seems like you have a binary that, when executed, might end up in a state where the `pause` system call is invoked and then a segmentation fault happens. Since no specific code or context around how `pause` is being used is provided, reproducing this issue requires some guessing based on common patterns.

One scenario could be if there's an incorrect manipulation of the stack pointer inside a signal handler, which could cause undefined behavior when `pause` is called. Hereâs a test case to try and replicate this:

1. Write a simple C program that sets up a signal handler for a specific signal (e.g., SIGUSR1) that modifies the stack pointer in an incorrect way.
2. Call `pause` in the main function of the program.

Here's an example code snippet to illustrate this scenario:

```c
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

void handle_signal(int sig) {
    // Incorrectly manipulate the stack pointer
    asm(""mov $0xdeadbeef, %rsp"");
}

int main() {
    struct sigaction sa;
    sa.sa_handler = handle_signal;
    sa.sa_flags = 0;
    sigemptyset(&sa.sa_mask);

    if (sigaction(SIGUSR1, &sa, NULL) == -1) {
        perror(""sigaction"");
        return 1;
    }

    printf(""Process ID: %d\n"", getpid());
    printf(""Send SIGUSR1 to this process to trigger the signal handler.\n"");

    // Call pause
    pause();

    return 0;
}
```

To test this:

1. Compile the program using `gcc -o faulty_signal faulty_signal.c`.
2. Run the program: `./faulty_signal`.
3. Note the process ID printed in the output.
4. Send the SIGUSR1 signal to the process (replace `<PID>` with the actual PID from step 2): `kill -SIGUSR1 <PID>`

This example deliberately causes a segmentation fault by setting the stack pointer to an invalid address inside the signal handler before calling `pause`. The actual bug in your scenario might be different, but this can serve as a starting point for debugging.

If the issue isn't related to signal handling and incorrect stack manipulation, please provide more context about how `pause` is used in your application.",https://bugzilla.redhat.com/show_bug.cgi?id=404511,
358701,Elliot Lee,2007-10-30T17:48:11Z,2007-11-30T22:12:20Z,CLOSED DUPLICATE,low,urgent,Fedora,coreutils,/bin/cp can cause data loss on filesystems that are not SELinux aware,normal,file2 has same contents as file1,file2 is empty,Always,"1. Go to an NFS-mounted directory that has a non-empty file named 'file1'.
2. Run 'cp -av file1 file2'.
3. Run 'cp -av file1 file2' again.","$ cd /path/to/nfs-mounted-directory
$ ls file1
$ cp -av file1 file2
$ cp -av file1 file2",sleep 100,"None

The provided information indicates that the `/bin/sleep` command was involved in a segmentation fault (SIGSEGV), but it does not provide enough context or specific conditions under which this occurred to formulate a precise command or test case for reproducing the issue. The reported `cmdline: sleep 100` suggests that simply running `sleep 100` led to the crash, however, without additional details on the system state (e.g., environment variables, memory state), no specific and reliable test case can be definitively provided based solely on this information.",None,https://bugzilla.redhat.com/show_bug.cgi?id=358701,
356311,Andrew Haley,2007-10-29T11:36:46Z,2007-11-30T22:12:20Z,CLOSED RAWHIDE,low,low,Fedora,coreutils,SELinux does not allow cp -a over NFS,normal,cp -a works correctly,cp -a fails due to fsetxattr error,Always,"- echo poo > a
- cat a
poo
- cp -a a b
- echo $?
1
- cat b
- ls -l b
 -rw-r--r-- 1 aph aph 0 2007-10-29 11:33 b","$ echo poo > a
$ cat a
$ cp -a a b
$ echo $?
$ cat b
$ ls -l b",sleep 100,"None

The provided information indicates that a segmentation fault occurred in the `sleep` command from coreutils when running `sleep 100`. However, there are no additional details or specific conditions (such as environment variables, library versions, etc.) listed that might be necessary to reproduce this error. Since segmentation faults can often depend on very specific contexts or conditions beyond just the basic usage of a command, and given that no such context is provided here, it's not possible to definitively state a set of commands or test cases that would reliably reproduce the bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=356311,
340291,Stas Sergeev,2007-10-19T18:27:08Z,2007-11-30T22:12:19Z,CLOSED NOTABUG,low,low,Fedora,coreutils,test -n doesnt work,,,,,,,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=340291,
313401,Edward J. Huff,2007-10-01T00:41:41Z,2007-11-30T22:12:17Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"date --help, man date and info date now omit --iso option",normal,documentation of date --iso,not found,Always,"1. date --help or man date or info date
2. search for --iso","$ date --help
$ man date
$ info date",sleep 100,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=313401,
305341,Andrew Clayton,2007-09-25T15:47:57Z,2007-11-30T22:12:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,fchmodat won't remove setgid/uid bits,normal,"Sticky bits should be removed ",Sticky bits remain,Always,"1. Create a directory
2. Set the group and/or user bits on the directory
3. Try to remove the sticky bits",,None,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=305341,
299121,Jonathan Kamens,2007-09-20T19:42:01Z,2007-11-30T22:12:16Z,CLOSED NOTABUG,low,low,Fedora,coreutils,"""[ -n ${emptyvariable} ]"" returns true",,,,,,,"```
sleep 100
```",None,None,https://bugzilla.redhat.com/show_bug.cgi?id=299121,
280331,Jacques Beigbeder,2007-09-06T11:35:45Z,2007-11-30T22:12:15Z,CLOSED DUPLICATE,medium,low,Fedora,coreutils,"cp -a with NFS and selinux permissive fails, copy is empty!",normal,"-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto1
-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto2      <<< CORRECT","-rw-r--r-- 1 beig hard 30 Sep  6 13:17 toto1
-rw-r--r-- 1 beig hard  0 Sep  6 13:17 toto2     <<< BUG!",Always,"cd /partition  (NFS mounted, for instance localhost:/partition; so NFS server
                 and NFS client are FC7-64)
rm -f toto*
date > toto1
cp -i -a toto1 toto2
cp -i -a toto1 toto2
ls -l toto*","$ cd /partition
$ rm -f toto*
$ date > toto1
$ cp -i -a toto1 toto2
$ cp -i -a toto1 toto2
$ ls -l toto*",sleep 100,"None

The report indicates that a segmentation fault occurred while running `sleep 100`, but it does not provide additional context suggesting that this is consistently reproducible or under specific conditions beyond what was reported. Without further details on how this issue can be reliably reproduced, we cannot provide an exact command or test case to reproduce the bug.",None,https://bugzilla.redhat.com/show_bug.cgi?id=280331,
251800,vikram goyal,2007-08-11T12:26:35Z,2007-11-30T22:12:12Z,CLOSED NOTABUG,low,medium,Fedora,coreutils,command install sets wrong permissions,,,,,,,sleep 1000000,None,sleep 1000000,https://bugzilla.redhat.com/show_bug.cgi?id=251800,
251653,Krzysio (Chris) Leszczynski,2007-08-10T09:20:09Z,2007-11-30T22:12:12Z,CLOSED NOTABUG,low,low,Fedora,coreutils,rm -rf cannot kill directory that is protected,normal,"I'd expect rm to try hard to remove the directory by changing its mode. If it
can't remove the directory it should restore the mode. It would be even better
if it try to chmod just to read and then chmod just to x to remove subdirs.
It's hard to do safely and simply by shell script.","""a"" is not removed even if rm could change its permission. The unix manual
incorrectly states that one should do chown +rwx first. This is incorrect,
because some of files could be hard-linked to others. Oh, ther",Always,"1. mkdir -p a/b/c
2. chmod 0 a
3. rm -rf a","$ mkdir -p a/b/c
$ chmod 0 a
$ rm -rf a",sleep 1000000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=251653,
250089,Tim Waugh,2007-07-30T13:56:59Z,2007-11-30T22:12:11Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,du doesn't report size of unreadable sub directories,normal,"du test
4       test/dir
du: cannot read directory `test/unreachable-dir': Permission denied
12      test","du: `du_test/unreadable': Permission denied
4096    du_test",Always,"1. cd /tmp
2. mkdir -p du_test/unreadable
3. du -a -b du_test
   4096    du_test/unreadable
   8192    du_test
4. chmod 000 du_test/unreadable
5. du -b -a du_test
   du: `du_test/unreadable': Permission denied
   4096    du_test","$ cd /tmp
$ mkdir -p du_test/unreadable
$ du -a -b du_test
$ chmod 000 du_test/unreadable
$ du -b -a du_test",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=250089,
249421,Scott Baker,2007-07-24T16:45:01Z,2007-11-30T22:12:11Z,CLOSED DUPLICATE,low,low,Fedora,coreutils,sort -R is not random,,,,,,,sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=249421,
248591,zeno,2007-07-17T16:55:34Z,2007-11-30T22:12:10Z,CLOSED ERRATA,low,low,Fedora,coreutils,The i and u switches for cp do not work together,normal,"You should not be prompted. The u switch indicates that the file should only be
copied if file1 is newer than file2.",You will be prompted to overwrite file2.,Always,"1. Create a file (file1).
2. Create another file (file2) with the same name in another directory.
3. Make sure file1 has an older file modified date than file2.
4. Use cp -iu to copy file to the directory in the same place as file2.","$ touch file1
$ mkdir dir && touch dir/file2
$ touch -t 202301010000 file1 && touch file2
$ cp -iu file1 dir/",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=248591,
232652,Ulrich Drepper,2007-03-16T14:52:47Z,2007-11-30T22:11:59Z,CLOSED RAWHIDE,medium,medium,Fedora,coreutils,runcon shouldn't reorder parameters,normal,Success,"runcon: invalid option -- N
[...]",Always,"1.echo 'int main(){return 0;}' > u.c
2.gcc -o u u.c
3.runcon -t unconfined_t /usr/sbin/prelink -N ./u","$ echo 'int main(){return 0;}' > u.c
$ gcc -o u u.c
$ runcon -t unconfined_t /usr/sbin/prelink -N ./u",sleep 1000,None,None,https://bugzilla.redhat.com/show_bug.cgi?id=232652,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf"" | sort -k 1,1 -k 2n,2
```","echo -e 'x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf' | sort -k 1,1 -k 2n,2","```bash
echo -e ""x 1 dsfdfdsf\nx2 1 dsfdfdsf\nx2 2 dsfdfdsf\nx 2 dsfdfdsf"" | sort -k 1,1 -k 2n,2
```",,
,,,,,,,,,,,,,,,,"```bash
cat > test <<EOF
x  A 1
x  B 1
xx A 2
xx B 2
EOF

sort -k2 < test
```","cat <<EOF > test
x  A 1
x  B 1
xx A 2
xx B 2
EOF
<test sort -k2","cat <<EOF > test
x  A 1
x  B 1
xx A 2
xx B 2
EOF
sort -k2 < test",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
sudo cp -Z unconfined_u:object_r:samba_share_t:s0 file1 testing/
```",sudo cp -Z unconfined_u:object_r:samba_share_t:s0 file1 testing/,"```bash
sudo cp -Z unconfined_u:object_r:samba_share_t:s0 file1 testing/
```",,
,,,,,,,,,,,,,,,,man cp,man cp,man cp,,
,,,,,,,,,,,,,,,,"```bash
touch /var/www/html/file1
ls -Z /var/www/html/file1
chcon -c -t samba_share_t /var/www/html/file1
```","touch /var/www/html/file1
ls -Z /var/www/html/file1
chcon -c -t samba_share_t /var/www/html/file1","```bash
chcon -c -t samba_share_t /var/www/html/file1
```",,
,,,,,,,,,,,,,,,,"```bash
date
date --date=""last month""
```",None,"date --date=""last month""",,
,,,,,,,,,,,,,,,,`readprofile | sort -n`,None,None,,
,,,,,,,,,,,,,,,,who am i,who am i,who am i,,
,,,,,,,,,,,,,,,,"`head -n 1 /tmp/ms-firefox-9wkj212z.default/search.json` 

Note that this command is likely to be dependent on specific system conditions (like suspend) and file contents as described in the bug report, so it may not reproduce the bug in all environments.","None of the provided information directly specifies a set of steps or specific commands that would reliably reproduce the issue described in the bug report. However, based on the details given about the execution context and the command-line parameters used (i.e., running `head` with some options), one could try to emulate what appears to have happened:

The relevant part of the stack trace suggests a failure when executing the `head` utility which is part of coreutils. The main arguments passed were `-n 1 /path/to/some/file`. This indicates that someone tried to use the `head` command to extract the first line (or first N bytes) from a file.

A basic test case based on the given information might be:

```sh
# Create a sample file with some content.
echo ""First Line"" > testfile.txt
echo ""Second Line"" >> testfile.txt

# Run head with -n 1 option on the created file.
head -n 1 testfile.txt
```

However, to more closely match the failure described in the bug report, you would need a specific environment or possibly a problematic version of `head` that could lead to the crash. The error seems related to low-level memory handling within `lib/libc.so.6`, which suggests something unusual with how `mempcpy` is being used.

Since this problem might involve specifics such as compiler versions, operating system patches, or specific conditions in the file system (like very large files, or possibly sparse files), reproducing it may require further investigation into the exact circumstances under which the bug was observed.",None,,
,,,,,,,,,,,,,,,,"date -d 'TZ=""America/Los_Angeles"" ""00:00 + 1 hour""'","date -d 'TZ=\""America/Los_Angeles\"" \""00:00 + 1 hour\""'","date -d 'TZ=""America/Los_Angeles"" ""00:00 + 1 hour""'",,
,,,,,,,,,,,,,,,,"```bash
id
echo $XDG_RUNTIME_DIR
su - another_user
id
echo $XDG_RUNTIME_DIR
gcalctool
```","None

The description provides a scenario but does not explicitly outline a specific command sequence that reproduces the bug as a test case. The issue is related to environment variable propagation when switching users with `su -`, which leads to permission errors due to an incorrect `$XDG_RUNTIME_DIR`. While the steps provided by the user (logging in, using `su -` to switch to another user, and running an application) describe how they encountered the bug, it doesn't translate into a precise command or test case that developers can directly use for reproduction purposes.","```bash
su - gamer
gcalctool
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir Default
touch Default/file
rm -rf Default
ls -laZ Default
ls -laZd Default
sudo rm -rf Default
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
dd if=xxx-tst of=xxx-tst-op count=20; wc -l xxx-tst* 
```","None

The provided steps to reproduce are descriptive but not directly executable as a single command or concise test case. The creation of the initial file with 1000 lines is not specified with an exact command and would require additional context to be fully reproducible. Therefore, a precise, standalone command or test case cannot be extracted from the given information.",None,,
,,,,,,,,,,,,,,,,"```bash
ll dr_replay/ -sh; ls -sh dr_replay/
```","None

The provided information does not clearly indicate a coreutils bug but rather shows different output sizes reported by `ll` and `ls -sh`. The discrepancy might be due to filesystem features (like sparse files) or specific conditions under which these commands are executed, such as the mentioned XFS file system. However, there is no clear indication of a bug in coreutils based on the provided details, nor is there a precise set of reproducible steps given beyond running `ll` and `ls -sh`, which doesn't constitute a test case for reproducing a specific bug within coreutils itself.",None,,
,,,,,,,,,,,,,,,,"```bash
ls -dlZ /; ls -dZl /
```","$ ls -dlZ /
$ ls -dZl /",ls -dZl /,,
,,,,,,,,,,,,,,,,cd /bin; realpath -s .,cd /bin; realpath -s .,"```bash
cd /bin; realpath -s .
```",,
,,,,,,,,,,,,,,,,make check,"None

The provided information indicates that the failure occurs during `make check`, specifically with a test named `test-isnanl-nolibm`. However, no specific command outside of running `make check` is given to directly trigger and isolate this particular test case for reproducing the issue. Therefore, without more detailed steps or a precise command to invoke just this failing test, we cannot provide an exact command or test case to reproduce the bug independently of the full `make check` process.",make check,,
,,,,,,,,,,,,,,,,"```bash
# Set up environment
mkdir ~/tmp
chmod 755 ~/tmp
echo 'setenv TMPDIR ~/tmp' >> ~/.login

# Restart or log out and log back in to apply changes

# Start XFCE4
startxfce4
```","None

The provided bug description does not include specific coreutils command(s) that can directly reproduce a bug related to the Linux coreutils package. The issue described seems more related to desktop environment initialization and configuration rather than a core utility tool like those found in coreutils (e.g., `ls`, `cp`, `rm`). Thus, no direct test case or command from coreutils is identifiable from this description that would reproduce the problem as it involves complex interactions with the xfce4 session manager and desktop processes.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,`tr '\\001' '\\012'`,tr '\\001' '\\012',None,,
,,,,,,,,,,,,,,,,ls /,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkfs.xfs /dev/sdX
mount /dev/sdX /mnt
cd /mnt
git clone https://github.com/coreutils/coreutils.git
cd coreutils
./configure
make
make check
```",None,None,,
,,,,,,,,,,,,,,,,rpmbuild -ba --with Werror=format-security coreutils-8.21-19.fc21.src.rpm,"None

The provided information indicates how to reproduce the build failure with the specific flag and context around a modified package for easier reproduction. However, it doesn't provide an explicit command or test case that can be directly executed outside of this specific build context. The issue is tied to the build process rather than a runtime command or user-level interaction with coreutils commands.","Build coreutils-8.21-19.fc21.src.rpm with ""-Werror=format-security"" flag to reproduce the problem.

To make this process easier, you can use a modified ""redhat-rpm-config"" package from http://people.fedoraproject.org/~halfie/artifacts/redhat-rpm-config/ URL.

Here is the command:

```bash
rpmbuild -ba --with format-security coreutils-8.21-19.fc21.src.rpm
```

Note: Ensure you have the modified `redhat-rpm-config` package installed as described in the bug report to use the `-Werror=format-security` flag during the build process.",,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /usr/lib/systemd/user-generators/
mkdir -p /usr/lib/systemd/system-generators/

ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator
ls -al /usr/lib/systemd/user-generators/

ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator
ls -al /usr/lib/systemd/user-generators/

ln -s --relative -f /usr/lib/systemd/system-generators/systemd-dbus1-generator /usr/lib/systemd/user-generators/systemd-dbus1-generator
```",None,"```bash
# Create necessary directories
mkdir -p /usr/lib/systemd/user-generators /usr/lib/systemd/system-generators

# First run
ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator

# Second run (this will create a broken link)
ln -s --relative -f /usr/lib/systemd/user-generators/ /usr/lib/systemd/system-generators/systemd-dbus1-generator
```",,
,,,,,,,,,,,,,,,,"```bash
echo ""test"" > file.txt
echo ""md5sum of file.txt"" > checksums.txt
md5sum file.txt >> checksums.txt
echo ""sha1sum of file.txt"" >> checksums.txt
sha1sum file.txt >> checksums.txt
md5sum -c checksums.txt
sha1sum -c checksums.txt
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,su -,None,None,,
,,,,,,,,,,,,,,,,"```bash
source colorls.sh; echo $TMP
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ls -l > log
sort -k9 log > sorted_log
diff <(ls -l) sorted_log
```","None

The provided bug description does not specify an exact command or test case to reproduce the issue. The developer describes the problem in general terms but does not provide a precise sequence of steps or specific input that causes the sorting discrepancy with umlauts and other special characters.",None,,
,,,,,,,,,,,,,,,,"```bash
LANG=en_US.UTF-8 time cut -c 1-10 /path/to/large/file > /dev/null
LANG=C time cut -c 1-10 /path/to/large/file > /dev/null
LANG=en_US.UTF-8 time grep ""pattern"" /path/to/large/file > /dev/null
LANG=C time grep ""pattern"" /path/to/large/file > /dev/null
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mktemp /tmp/colorlsXXX; 
(colorls.sh && return) || (colorls.sh; exit) | tee /dev/null; 
ls /tmp/colorls*
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 30,None,None,,
,,,,,,,,,,,,,,,,sleep 30,None,None,,
,,,,,,,,,,,,,,,,"```bash
date
date -d ""$(date)""
```","```bash
export LC_ALL=en_GB.UTF-8
date; date -d ""$(date)""
```","```bash
date; date -d ""$(date)""
```",,
,,,,,,,,,,,,,,,,"To reproduce the bug related to the provided `dircolors` configuration file (typically used with the `ls` command in Unix-like systems), you would need to follow these steps. However, please note that the provided text doesn't explicitly describe a bug but rather a configuration for coloring different types of files and directories when listed by the `ls` command.

Given that, if we were to interpret this as needing to test or reproduce an issue with file type colorization based on this configuration, here are some steps you might follow:

1. **Save the Configuration**: First, save the provided text into a file, typically named `.dircolors` in your home directory (`~/.dircolors`).

2. **Apply the Configuration**: You can apply these colors to your `ls` command by running:
   ```
   eval ""$(dircolors ~/.dircolors)""
   ```
   This command evaluates the color settings defined in the `.dircolors` file.

3. **Test with Different File Types**:
   - Create files of different types mentioned in the configuration (e.g., text documents, archives, images, audio files) to see if they are colored correctly according to the rules specified.
   - Use the `ls` command to list these files and observe their colors.

4. **Specific Test Cases**:
   - For archives/compressed files: `.tar`, `.tgz`, `.zip`, etc.
     ```
     touch example.tar
     ls
     ```
   - For image formats: `.jpg`, `.png`, `.gif`, etc.
     ```
     touch image.jpg
     ls
     ```
   - For audio formats: `.mp3`, `.wav`, `.ogg`, etc.
     ```
     touch song.mp3
     ls
     ```

5. **Verify Color Output**:
   - After running `ls` in the terminal, verify that each file type is displayed with the expected color based on the configuration.

6. **Automating Color Settings**:
   - To apply these settings automatically every time you log in, add the following line to your shell configuration file (e.g., `~/.bashrc` or `~/.zshrc`, depending on your shell):
     ```
     eval ""$(dircolors ~/.dircolors)""
     ```

By following these steps, you should be able to test whether the provided color configuration works as expected with different types of files. If there's an actual bug in how colors are applied or displayed, this process will help identify discrepancies between the expected and actual behavior.","The provided text is not a typical bug description but rather an excerpt from a configuration file for `ls` colorization settings on Unix-like systems (likely `.dircolors`). There's no indication of any actual issue that needs debugging based on this information alone.

However, if we interpret the task as wanting to test whether these color settings are applied correctly using `ls`, hereâs how you can do it:

1. **Save Configuration**: Save the provided configuration into a file named `.dircolors` in your home directory.
    ```sh
    mkdir -p ~/.dir_colors
    echo ""[The entire content of your .dircolors config]"" > ~/.dir_colors/.dircolors
    ```

2. **Set Environment Variable**: Ensure the `LS_COLORS` environment variable is set to use this configuration file.
    ```sh
    eval $(dircolors ~/.dir_colors/.dircolors)
    ```

3. **Test with `ls` Command**: Create files of different types (as defined in your `.dircolors`) and run the `ls --color=always` command to see if they are colorized correctly.
    ```sh
    touch test.jpg test.mp3 test.txt test.pdf
    ls --color=always
    ```

4. **Check Colors**: Verify that each file type is being colored according to what you defined in your `.dircolors`. For example:
   - `test.jpg` should be magenta (for images).
   - `test.mp3` should be cyan (for audio formats).
   - `test.txt` should remain default color or be brown if specified.

5. **Script Test Case**: You can write a small script to automate the creation of test files and check their colors.
    ```sh
    #!/bin/bash

    mkdir -p testdir
    cd testdir

    touch test.jpg test.mp3 test.txt test.pdf
    ls --color=always | grep -E ""test\.(jpg|mp3|txt|pdf)""

    cd ..
    rm -rf testdir
    ```

If you want to ensure that the configuration is loaded properly, run this script after setting up your `LS_COLORS` environment variable.

This setup will allow you to confirm if the color settings are applied correctly based on the types of files created.","Based on the provided `dircolors` configuration, it appears that the request is not specifically for a ""bug"" but rather a detailed explanation of how to apply and test this color scheme with `ls` in Unix-like systems.

However, if we interpret this as a task where you want to ensure the colors are applied correctly (which could be considered as verifying functionality), here's how you can set up your environment and verify that the color scheme works as expected:

1. **Save the Configuration:**
   - Save the provided configuration into a file named `dircolors.conf`.

2. **Apply the Color Scheme:**
   - To apply this color scheme, you need to source the `LS_COLORS` variable in your shell's startup script (e.g., `.bashrc`, `.zshrc`). You can do this by adding the following line:
     ```bash
     eval ""$(dircolors ~/.config/dircolors.conf)""
     ```
   - Alternatively, if you want to use the system-wide `LS_COLORS` and have `dircolors` automatically load your custom file when it's available in a standard location, place the configuration file at one of these paths: 
     - `~/.dir_colors`
     - `/etc/DIR_COLORS`

3. **Test the Color Scheme:**
   - To test whether the color scheme is applied correctly, you can use the `ls` command with color output enabled. Run:
     ```bash
     ls --color=auto
     ```
   - Alternatively, if your shell already uses color (like in many modern distributions), simply running:
     ```bash
     ls
     ```
     should display files and directories using the specified colors from your `dircolors.conf`.

4. **Verify Specific File Types:**
   - To ensure that specific file types are colored as expected, create or find files of each type mentioned in the configuration and run `ls` to see if they match the desired color. For example:
     ```bash
     touch test.pdf test.mp3 test.jpg
     ls --color=auto
     ```
   - Check if `test.pdf` is brown, `test.mp3` is cyan, and `test.jpg` is magenta.

5. **Adjustments:**
   - If you find that certain colors are not being applied as expected or need to adjust the configuration, modify the `dircolors.conf` file accordingly and reload it using the method described in step 2.

By following these steps, you can verify that the `dircolors` configuration is correctly set up and applied in your terminal environment.",,
,,,,,,,,,,,,,,,,"```bash
df
mount
```","None

The bug description does not provide a specific sequence of commands that can be directly executed to reproduce the issue beyond simply running `df`. The steps provided are general and do not detail an exact command or set of actions (beyond the initial setup described) that one could use to consistently reproduce the described behavior.",None,,
,,,,,,,,,,,,,,,,"```
sync
```","gcc -o test test.c  
./test  

sync

^C

None of these directly reproduces a hang as described since they are dependent on the specific environment (Linux kernel and coreutils version) mentioned in the report. However, based on the provided Steps to Reproduce, these commands are what was used to demonstrate the issue:

```bash
gcc -o test test.c 
./test

sync
```

The expectation is that attempting to interrupt `./test` or `sync` with Ctrl-C would not terminate the process as described in the bug report.","```bash
sync
```",,
,,,,,,,,,,,,,,,,"```bash
module avail
```","None

The provided bug description indicates an issue with the sorting of input files for the `comm` command when using environment module completions in Bash. However, no specific command sequence is given that would allow someone else to directly reproduce this issue. The error occurs within a complex series of function calls and shell expansions, and without more context or a simplified test case provided by the reporter, there isn't an explicit, direct command or set of commands available for reproducing the bug as described.","```bash
module load + local cur= prev=load cmds opts
COMPREPLY=()
cmds='add apropos avail clear display help          initadd initclear initlist initprepend initrm initswitch        keyword list load purge refresh rm show swap switch             unload unuse update use whatis'
opts='-c -f -h -i -l -s -t -u -v -H -V              --create --force  --help  --human   --icase             --long   --silent --terse --userlvl --verbose --version'
case ""$prev"" in
COMPREPLY=($(compgen -W ""$(_module_not_yet_loaded)"" -- ""$cur""))
_module_not_yet_loaded() {
    comm -23 <(echo ""compiler/intel/2011_sp1.11.339/i386
compiler/intel/2011_sp1.11.339/x86_64
compiler/intel/2011_sp1.12.361/i386
compiler/intel/2011_sp1.12.361/x86_64"" | LANG=C sort) <(echo ""compiler/intel/2011_sp1.13.367/i386
compiler/intel/2011_sp1.13.367/x86_64
compiler/intel/2013.0.079/i386
compiler/intel/2013.0.079/x86_64"" | LANG=C sort -r)
}
compgen -W ""$(_module_not_yet_loaded)"" -- """"
```",,
,,,,,,,,,,,,,,,,"```bash
export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort
```","export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort","```bash
export LC_ALL=pl_PL.UTF-8
echo -e ""Ä\na\nb\nc\nÄ\nÅ\nz\nÅ¼\nÅº"" | sort
```",,
,,,,,,,,,,,,,,,,"```
cat data | LC_ALL=C uniq
cat data | LC_ALL=en_US.utf8 uniq
```",None,None,,
,,,,,,,,,,,,,,,,"```
uniq
```",None,None,,
,,,,,,,,,,,,,,,,"To reproduce the bug, we need to analyze the given information and try to recreate the scenario that led to the crash. Based on the provided details, here are the steps to potentially reproduce the bug:

1. **Setup the environment**: Ensure you have a similar environment as described in the bug report, which includes:
	* Fedora 21 (or a similar distribution)
	* `glibc` version 2.18.90-18.fc21.x86_64 (or a similar version)
	* `coreutils` version 8.22-2.fc21.x86_64 (or a similar version)
2. **Run the command**: Execute the command that was running when the crash occurred:
```bash
yum update -x mutter\* --skip-broken
```
This command updates the system using `yum`, excluding packages with names starting with `mutter` and skipping any broken dependencies.
3. **Verify the presence of `uniq`**: Ensure that the `uniq` command is installed and available on the system, as it was the executable that crashed.
4. **Monitor the system**: While running the `yum update` command, monitor the system for any signs of crashes or errors related to `uniq`.

**Additional test cases**:

1. **Run `uniq` directly**: Try running `uniq` with various inputs to see if it crashes:
```bash
uniq <input_file>
```
Replace `<input_file>` with a file containing duplicate lines.
2. **Test with different inputs**: Test `uniq` with different types of input files, such as:
	* A file with many duplicate lines
	* A file with no duplicate lines
	* A file with very long lines
3. **Check for memory issues**: Investigate if the crash is related to memory allocation or deallocation issues by running `uniq` with tools like `valgrind` or `AddressSanitizer`.

By following these steps and test cases, you may be able to reproduce the bug and gather more information about the issue.","Based on the information provided in the bug report, it seems that a segmentation fault occurred during a `yum update` command. However, there are not enough specific steps provided to reliably reproduce this issue. Here is an outline of how you might approach reproducing and debugging this particular case:

### Steps for Reproducing and Debugging

1. **Install Required Packages:**
   Ensure you have the same versions of the packages that were installed when the bug occurred.
   
   ```bash
   sudo dnf install glibc-debuginfo-common-2.18.90-17.fc21 x86_64 \
                    glibc-debuginfo-2.18.90-17.fc21 x86_64 \
                    coreutils-8.22-2.fc21 x86_64 \
                    glibc-common-2.18.90-18.fc21 x86_64 \
                    glibc-2.18.90-18.fc21 x86_64 \
                    glibc-devel-2.18.90-18.fc21 x86_64 \
                    glibc-headers-2.18.90-18.fc21 x86_64
   ```

2. **Configure Environment:**
   Ensure your environment is similar to the one where this occurred, including system configuration and installed packages.

3. **Run the `yum update` Command with Debugging Tools:**

   To capture more information about what might be causing the crash, you can use tools like `gdb`, `valgrind`, or run `strace`.

   ```bash
   gdb --args yum update -x mutter* --skip-broken
   ```

   In GDB:
   
   ```bash
   (gdb) run
   ```
   
   If it crashes, you can inspect the stack trace and other information provided by GDB.

4. **Run with Valgrind:**

   Using `valgrind` might provide more insights into memory issues.
   
   ```bash
   valgrind --tool=memcheck --leak-check=yes yum update -x mutter* --skip-broken
   ```

5. **Collect System Logs:**
   Check system logs for any related errors:
   
   ```bash
   journalctl -xe
   ```

6. **Reproduce with Specific Conditions:**
   Since the original command included `--skip-broken`, it suggests that some packages might be broken or conflicting. Verify if there are specific package conflicts by running:

   ```bash
   yum check
   ```

### Expected Results

The expected result would be for `yum update` to run without any segmentation faults and complete successfully.

### Actual Results

Based on the provided information, the actual results indicate a crash (segmentation fault) during the execution of `yum update`. The stack trace indicates that an issue occurred in libc's `_int_free` function, which is often indicative of a memory corruption or misuse.

### Additional Debugging Steps:

- **Check for Overlapping Packages:**
  Ensure there are no overlapping packages or conflicting dependencies.
  
  ```bash
  yum check-update --showduplicates | grep <package-name>
  ```

- **Verify Environment Stability:**
  Ensure that your environment is stable and free of other system issues.

### Conclusion

To further investigate the root cause, it's crucial to gather more detailed logs or run `yum` under debugging tools like GDB or Valgrind. If you can provide a consistent way to reproduce the error, further steps will be needed to pinpoint the exact issue.","The provided information about the bug seems somewhat incomplete and does not provide concrete steps to reliably reproduce the issue. However, based on the context given, here are some suggestions for how you might go about reproducing this problem:

1. **Install the same version of `coreutils` and `glibc`:**
   Make sure that your system is configured with the exact versions of `coreutils` (8.22-2.fc21.x86_64) and `glibc` (2.18.90-18.fc21.x86_64) as those mentioned in the bug report.

   ```bash
   sudo yum downgrade coreutils-8.22-2.fc21.x86_64 glibc-2.18.90-18.fc21.x86_64
   ```

2. **Set up a similar environment:**
   If you're using Koji, Rawhide, or any other specific setup, try to replicate that environment as closely as possible.

3. **Run the `yum update` command with the specified options:**
   Execute the same `yum` command mentioned in the bug report to see if it triggers the issue again.
   
   ```bash
   sudo yum update -x mutter\* --skip-broken
   ```

4. **Test with specific files:**
   The backtrace suggests that the problem might be related to a specific file or input when using `uniq`. If you can identify the exact files being processed, try running `uniq` on them manually to see if it causes a crash.

5. **Use valgrind for memory debugging:**
   Run `valgrind` with `uniq` to detect any memory-related issues.
   
   ```bash
   valgrind --tool=memcheck /usr/bin/uniq [your_input_file]
   ```

6. **Check system logs:**
   Look at the system logs (`/var/log/messages`, `/var/log/syslog`, etc.) for any relevant information about the crash.

7. **Test on a clean environment:**
   If possible, try reproducing this issue in a clean virtual machine or container with the same software versions to isolate external factors.

8. **Check for known issues:**
   Look through existing bug reports and mailing lists to see if others have encountered similar problems.

Unfortunately, without more detailed steps or context about what might be triggering the crash, it's difficult to provide definitive instructions for reproducing this specific issue. The above suggestions should help you create a testing environment that closely mirrors the original setup and make it easier to identify the root cause of the problem.",,
,,,,,,,,,,,,,,,,"```bash
sudo tune2fs -r 0 /dev/sda11; 
df -h /home; 
df -i /home
```","```bash
sudo tune2fs -m 0 /dev/sda11
# write files on disk until almost full (but not considering reserved blocks which are now set to 0%)
df -h /home
df -i /home
```",None,,
,,,,,,,,,,,,,,,,"```bash
chcon --reference=/dev/null /var/lib/mock/fedora-12-x86_64/root/dev/null
```","None

The provided steps involve using `mock` to set up an environment which then indirectly causes `chcon` to dump core. While the exact command that triggers the issue is mentioned (`chcon --reference=/dev/null /var/lib/mock/fedora-12-x86_64/root/dev/null`), it relies on a specific setup created by `mock`, making it not directly reproducible without this setup. Therefore, a direct and simple command to reproduce the bug isn't available from the given information.",chcon --reference=/dev/null /var/lib/mock/fedora-12-x86_64/root/dev/null,,
,,,,,,,,,,,,,,,,"```bash
mkdir test && cd test
mkdir source
ln -s ../../target source/link
mkdir target
cp -rl source dest
ls -l dest
```","```bash
mkdir -p vanilla-3.12/arch/arm/boot/dts/include/
ln -s ../../../../../include/dt-bindings vanilla-3.12/arch/arm/boot/dts/include/dt-bindings
cp -rl vanilla-3.12 vanilla-3.13
ls -l vanilla-3.13/arch/arm/boot/dts/include/
```","```bash
cp -rl vanilla-3.12 vanilla-3.13
ls -l vanilla-3.13/arch/arm/boot/dts/include/
```",,
,,,,,,,,,,,,,,,,"```bash
PWD=/home/greearb/git
userdir=$(expr match ""$PWD"" '\(/home/[0-Z]*/\).*')
echo $userdir
```",None,"PWD=$(pwd); userdir=$(expr match ""$PWD"" '\(/home/[0-Z]*/\).*'); echo $userdir",,
,,,,,,,,,,,,,,,,"```
runuser -l <username> -c 'env |grep XDG'
su - <username> -c 'env |grep XDG'
```","runuser -l <username> -c 'env |grep XDG'
su - <username> -c 'env |grep XDG'","```
runuser -l <username> -c 'env |grep XDG'
su - <username> -c 'env |grep XDG'
```",,
,,,,,,,,,,,,,,,,"```bash
printf 'A\nB\na\n' | LC_ALL=en_US.UTF-8 sort -i
```",None,"```bash
printf 'A\nB\na\n' | LC_ALL=en_US.UTF-8 sort -i
```",,
,,,,,,,,,,,,,,,,None,"None

The provided text is a proposal for a new tool called `multisum` and does not describe a specific bug in existing Linux coreutils tools. It describes desired behavior and usage of a hypothetical command but doesn't indicate any failure or incorrect operation of current utilities that would constitute a reproducible bug. Therefore, there are no commands or test cases provided to reproduce an actual bug.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C && echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | join --check-order
LC_ALL=C && echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | join --check-order
LC_ALL=C && echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | join --check-order
LC_ALL=C && echo -n -e ""a\nx\no"" ""b\ny\np"" | join --check-order
LC_ALL=C && echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | join --header --check-order

LC_ALL=fr_FR.UTF-8 && echo -n -e "" b 1\n a 2\n"" "" b Y\n a Z\n"" | join --check-order
LC_ALL=fr_FR.UTF-8 && echo -n -e "" a 2\n b 1\n"" "" b Y\n a Z\n"" | join --check-order
LC_ALL=fr_FR.UTF-8 && echo -n -e "" a 2\n b 1\n"" "" b Y\n\n"" | join --check-order
LC_ALL=fr_FR.UTF-8 && echo -n -e ""a\nx\no"" ""b\ny\np"" | join --check-order
LC_ALL=fr_FR.UTF-8 && echo -n -e ""ID Name\n2 B\n1 A\n"" ""ID Color\n2 blue\n"" | join --header --check-order
```","None

The provided steps describe how to call certain commands under different locales and mention that results are expected to be consistent but differ or cause failures. However, there is no explicit command or single test case given that definitively reproduces a specific bug; rather, it's a collection of scenarios meant to highlight potential inconsistencies after applying a patch. Therefore, based strictly on the information provided in this report format, we cannot extract a singular reproducible command or test case.","a) echo -n -e "" b 1\n a 2\n"" | join --check-order -
b) echo -n -e "" a 2\n b 1\n"" | join --check-order -
c) echo -n -e "" a 2\n b 1\n"" | join --check-order -
d) echo -n -e ""a\nx\no"" | join --check-order -
e) echo -n -e ""ID Name\n2 B\n1 A\n"" | join --header --check-order -",,
,,,,,,,,,,,,,,,,"```bash
rm -f /usr/bin/strip
cp /bin/date /tmp/foo; chmod 600 /tmp/foo 
install -s -m 755 /tmp/foo /usr/bin
ls -l /usr/bin/foo
```",rm -f /usr/bin/strip; cp /bin/date /tmp/foo; chmod 600 /tmp/foo; install -s -m 755 /tmp/foo /usr/bin; ls -l /usr/bin/foo,rm -f /usr/bin/strip; cp /bin/date /tmp/foo; chmod 600 /tmp/foo; install -s -m 755 /tmp/foo /usr/bin; ls -l /usr/bin/foo,,
,,,,,,,,,,,,,,,,"```
rm -f /var/run/pm-utils/locks/pm-powersave.lock
```",None,rm -f /var/run/pm-utils/locks/pm-powersave.lock,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""1.E\n2.M\n"" | sort -h
LC_ALL=fr_FR.UTF-8 echo -n -e ""1.E\n2.M\n"" | sort -h
LC_ALL=C echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR
LC_ALL=fr_FR.UTF-8 echo -n -e ""ABC\nABc\nAbC\nAbc\naBC\naBc\nabC\nabc\n"" | sort -c -k 1,1fR
LC_ALL=C echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR
LC_ALL=fr_FR.UTF-8 echo -n -e "".ABC\n.ABc.\nA.bC\nA.bc.\naB.C\naB.c.\nabC.\nabc..\n"" | sort -c -k 1,1dfR
LC_ALL=C echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a 2\nb 1\n"" | sort -n -k1.3,1.1
LC_ALL=C echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2
LC_ALL=fr_FR.UTF-8 echo -n -e ""aa 2\nbb 1\n"" | sort -n -k2.2,1.2
LC_ALL=C echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3
LC_ALL=fr_FR.UTF-8 echo -n -e ""  a 2\n  b 1\n"" | sort -k1.3nb,1.3
LC_ALL=C echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b
LC_ALL=fr_FR.UTF-8 echo -n -e ""a c\na b\n"" | sort -s +0 -1.1b
LC_ALL=C echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a\t:a\na :b\n"" | sort -t: -k1,1b -k2,2
LC_ALL=C echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""a :b\na\t:a\n"" | sort -t: -k1,1b -k2,2
LC_ALL=C echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1 
LC_ALL=fr_FR.UTF-8 echo -n -e ""a:1\nb:-\n"" | sort -n -t: +1 
LC_ALL=C echo -n -e ""b:-\na:1\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""b:-\na:1\n"" | sort -n -t: +1
LC_ALL=C echo -n -e ""a:1\nb:X\n"" | sort -n -t: +1
LC_ALL=fr_FR.UTF-8 echo -n -e ""a:1\nb:X\n"" | sort -n -t: +1
LC_ALL=C echo -n -e ""b:X\na:1\n"" | sort -n -t: +1 
LC_ALL=fr_FR.UTF-8 echo -n -e ""b:X\na:1\n"" | sort -n -t: +1 
LC_ALL=C echo -n -e ""ax 2\nbx 1\n"" | sort -n -k1.3,1.1
LC_ALL=fr_FR.UTF-8 echo -n -e ""ax 2\nbx 1\n"" | sort -n -k1.3,1.1
LC_ALL=C echo -n -e ""Ã© 2\nÃ¼ 1\n"" | sort -n -k1.3,1.1
LC_ALL=fr_FR.UTF-8 echo -n -e ""Ã© 2\nÃ¼ 1\n"" | sort -n -k1.3,1.1
```","None

The provided steps contain a list of commands that are supposed to be executed under different locales (LC_ALL=C and LC_ALL=fr_FR.UTF-8) to observe differences in behavior. However, the description does not specify which exact commands fail or produce unexpected results; it only indicates that ""Results are different (or command fails)"" without pointing out specific failing cases. Therefore, we cannot pinpoint an exact command or test case required to reproduce the bug based on this information alone.",None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""x"" ""y"" | cut -f2-
LC_ALL=fr_FR.UTF-8 echo -n -e ""x"" ""y"" | cut -f2-

LC_ALL=C echo -n -e "":\n"" | cut -f -- 
LC_ALL=fr_FR.UTF-8 echo -n -e "":\n"" | cut -f -- 

LC_ALL=C echo -n -e "":\n"" | cut -b ''
LC_ALL=fr_FR.UTF-8 echo -n -e "":\n"" | cut -b ''

LC_ALL=C echo -n -e """" | cut -f 2-0
LC_ALL=fr_FR.UTF-8 echo -n -e """" | cut -f 2-0
```","echo -n -e ""x"" ""y"" | cut -f2-
echo -n -e "":\n"" | qw(cut -f --)
echo -n -e "":\n"" | qw(cut -b '')
echo -n -e """" | qw(cut -f 2-0)","```
echo -n -e ""x"" ""y"" | LC_ALL=C cut -f2-
echo -n -e ""x"" ""y"" | LC_ALL=fr_FR.UTF-8 cut -f2-

echo -n -e "":\n"" | LC_ALL=C qw(cut -f --)
echo -n -e "":\n"" | LC_ALL=fr_FR.UTF-8 qw(cut -f --)

echo -n -e "":\n"" | LC_ALL=C qw(cut -b '')
echo -n -e "":\n"" | LC_ALL=fr_FR.UTF-8 qw(cut -b '')

echo -n -e """" | LC_ALL=C qw(cut -f 2-0)
echo -n -e """" | LC_ALL=fr_FR.UTF-8 qw(cut -f 2-0)
```",,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C && echo -n -e ""aaa\naaa\n"" | uniq -s1
LC_ALL=C && echo -n -e ""baa\naaa\n"" | uniq -s1
LC_ALL=C && echo -n -e ""aaa\naaa\n"" | uniq -s1 --
LC_ALL=C && echo -n -e ""baa\naaa\n"" | uniq -s1 --
LC_ALL=fr_FR.UTF-8 && echo -n -e ""aaa\naaa\n"" | uniq -s1
LC_ALL=fr_FR.UTF-8 && echo -n -e ""baa\naaa\n"" | uniq -s1
LC_ALL=fr_FR.UTF-8 && echo -n -e ""aaa\naaa\n"" | uniq -s1 --
LC_ALL=fr_FR.UTF-8 && echo -n -e ""baa\naaa\n"" | uniq -s1 --
```",None,"```sh
echo -n -e ""aaa\naaa\n"" | LC_ALL=C uniq -s1
echo -n -e ""baa\naaa\n"" | LC_ALL=C uniq -s1
echo -n -e ""aaa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1
echo -n -e ""baa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1
echo -n -e ""aaa\naaa\n"" | LC_ALL=C uniq -s1 --
echo -n -e ""baa\naaa\n"" | LC_ALL=C uniq -s1 --
echo -n -e ""aaa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1 --
echo -n -e ""baa\naaa\n"" | LC_ALL=fr_FR.UTF-8 uniq -s1 --
```",,
,,,,,,,,,,,,,,,,"```bash
ssh user@host 'colorls --help' ; sleep 1 ; ls /tmp/.colorls*
```",None,None,,
,,,,,,,,,,,,,,,,`du -sh /path/to/mtpfs/mount/point`,None,du -sh /path/to/mtpfs/mountpoint,,
,,,,,,,,,,,,,,,,df,df,df,,
,,,,,,,,,,,,,,,,"```bash
cd /tmp
touch test
mkdir test
```","cd /tmp  
touch test  
mkdir test",None,,
,,,,,,,,,,,,,,,,"```
ls -l --color
```",None,None,,
,,,,,,,,,,,,,,,,"1. yum install bind-chroot
2. df",sudo dnf install bind-chroot && df,"Install bind-chroot and then run:

```bash
df
```",,
,,,,,,,,,,,,,,,,"```bash
touch q; chcon -u system_u -r object_r -t postgresql_log_t q
```","As root:
1. touch q
2. chcon -u system_u -r object_r -t postgresql_log_t q","```bash
chcon -u system_u -r object_r -t postgresql_log_t q
```",,
,,,,,,,,,,,,,,,,"```bash
PGLOG=/var/lib/pgsql/pgstartup.log
touch ""$PGLOG"" || exit 1
chown postgres:postgres ""$PGLOG""
chmod go-rwx ""$PGLOG""
/usr/bin/chcon -t postgresql_log_t ""$PGLOG""
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo hello | tr [:lower:] [:upper:]
```",echo hello | tr '[:lower:]' '[:upper:]',echo hello | tr '[:lower:]' '[:upper:]',,
,,,,,,,,,,,,,,,,"1. Create a user with a home directory on NFS where root cannot write: 
```bash
useradd -m -d /nfs/home/testuser testuser```
2. Mount an NFS share at /nfs/home (ensure that root has no write permissions on this share)
3. Log in as the new user:
```bash
su - testuser```
4. Then, switch to the superuser:
```bash
su```

Note: Ensure that you have NFS set up and mounted correctly with the appropriate permissions before running these commands.",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /tmp/testhome && mount --bind -o ro /dev/null /tmp/testhome && HOME=/tmp/testhome bash -c 'source /etc/profile.d/colorls.sh'
```",None,None,,
,,,,,,,,,,,,,,,,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,LANG=en_US dd if=/dev/zero of=/tmp/x bs=10G seek=1 count=0,,
,,,,,,,,,,,,,,,,"```perl
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq
```","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | uniq",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears to be a memory-related issue, possibly related to a segmentation fault or memory corruption. To reproduce this bug, we can try the following commands or test cases:

1. **Run the `sort` command with a large input file**: The bug description mentions the `/bin/sort` executable, which suggests that the issue might occur when sorting large datasets. Try running the `sort` command with a large input file to see if it reproduces the error.

   ```bash
sort -n large_input_file.txt
```

2. **Use the `gdb` debugger to analyze the core dump**: The bug description includes a memory map, which suggests that a core dump might have been generated. Use `gdb` to analyze the core dump and gather more information about the crash.

   ```bash
gdb -c core_file /bin/sort
```

3. **Run the `sort` command with valgrind**: Valgrind is a memory debugging tool that can help detect memory-related issues. Run the `sort` command with valgrind to see if it reports any memory errors.

   ```bash
valgrind --tool=memcheck /bin/sort large_input_file.txt
```

4. **Test the `sort` command with different input files and options**: Try running the `sort` command with different input files, sorting options (e.g., `-n`, `-r`, `-k`), and locale settings to see if the issue is specific to a particular scenario.

   ```bash
sort -n -r large_input_file.txt
LC_ALL=C sort -k 2 large_input_file.txt
```

5. **Verify the system's libc version**: The bug description mentions the `libc-2.14.90.so` library, which might be related to the issue. Check the system's libc version and try updating or downgrading it to see if it resolves the problem.

   ```bash
ldd --version
```

By running these test cases, you may be able to reproduce the bug and gather more information about its cause. However, without more context or specific details about the bug, it is difficult to provide a more targeted approach.","The provided information appears to be a process memory map and environment details of a running process (likely `strace` output or similar). To determine what specific command or test case is needed to reproduce the issue, we need more context about what exactly constitutes ""the bug."" However, based on the given data, here are some steps you can take:

### Step-by-Step Approach

1. **Identify the Executable:**
   - From the environment variables and memory map, it seems that `strace` is running a command, but we don't know which exact command.
   
2. **Check Environment Variables:**
   - Look for any specific settings or paths in the environment that might be relevant to the issue (e.g., `LD_LIBRARY_PATH`, `PATH`, etc.).

3. **Analyze Memory Map:**
   - The memory map shows various loaded libraries and their addresses, which can help understand the runtime environment.

4. **Reproduce the Command:**
   - You will need to know what command was executed to reproduce the issue. If it's a shell script or another executable, you may have to look at the calling context.

### Hypothetical Test Cases

To reproduce the bug, we might consider running `strace` with various commands and options based on the environment and memory map:

#### Example 1: Running a Simple Command
```sh
strace -o strace_output.txt /path/to/executable arg1 arg2
```
- Replace `/path/to/executable` with the actual executable that was being run.
- `arg1`, `arg2`, etc. should be replaced by any arguments passed to the command.

#### Example 2: Setting Environment Variables
If specific environment variables are critical:
```sh
export PATH=/specific/path:$PATH
export LD_LIBRARY_PATH=/lib/another/path
strace -o strace_output.txt /path/to/executable arg1 arg2
```

### Detailed Steps to Find the Command

1. **Look for Clues in the Environment:**
   - Check any scripts or command history that might show how `strace` was invoked.
   
2. **Check Specific Processes:**
   - Use tools like `ps aux | grep strace` to see if there are active processes related to this issue.

3. **Consult Logs and History Files:**
   - Look at `.bash_history`, system logs, or any logging files that might contain the command or relevant context.

### Conclusion

Without more specific details about the exact behavior of the bug (e.g., error messages, expected vs actual output), it's difficult to provide an exact command. However, by following the steps above and adjusting based on additional information, you should be able to narrow down the test cases needed to reproduce the issue.

If you can provide more context or specific symptoms of the bug, further refining these steps would be possible.","The given information is a process dump of a Linux system running the `sort` command with the `-m` option, which merges sorted files. However, no specific issue or bug has been described in your request. In order to help you identify the commands or test cases required to reproduce a bug, I would need more details about what the bug is.

Without knowing the exact nature of the bug (e.g., crashes, incorrect output, performance issues), it's challenging to provide specific reproduction steps. But, based on the information provided and assuming that there might be some issue related to `sort -m`, here are some general suggestions:

1. **Test with Sample Data:**
   Create several sorted files and merge them using `sort -m`. Check if the output is as expected.

   ```bash
   # Generate sample sorted files
   echo -e ""apple\nbanana\ncat"" > file1.txt
   echo -e ""dog\nelk\nfish"" > file2.txt

   # Merge sorted files
   sort -m file1.txt file2.txt
   ```

2. **Check for Crash:**
   Run the command with different combinations of arguments and data to see if it crashes.

3. **Test with Large Files:**
   Generate large files, sort them, and merge to check if there are any issues related to memory usage or performance.
   
   ```bash
   # Create large sorted file
   seq 100000 > unsorted_large_file.txt
   sort -n unsorted_large_file.txt > sorted_large_file.txt

   # Merge with another large sorted file
   seq 100001 200000 > unsorted_large_file_2.txt
   sort -n unsorted_large_file_2.txt > sorted_large_file_2.txt
   
   # Merge two sorted large files
   sort -m sorted_large_file.txt sorted_large_file_2.txt
   ```

4. **Check for Output Consistency:**
   Verify that the merged output is consistent and sorted correctly.

5. **Test Edge Cases:**
   Test edge cases like empty files, single-line files, or very large numbers.
   
   ```bash
   # Merge an empty file with a non-empty file
   touch empty_file.txt
   sort -m file1.txt empty_file.txt

   # Merge two files with only one line each
   echo ""zoo"" > single_line_1.txt
   echo ""ant"" > single_line_2.txt
   sort -m single_line_1.txt single_line_2.txt
   ```

6. **Check for Race Conditions or Parallel Issues:**
   If the bug is related to parallel processing, try running the command multiple times and under different system load conditions.

If you have more specific information about what the bug is, such as an error message, a crash report, or incorrect behavior observed, please provide that information so I can tailor my suggestions accordingly.",,
,,,,,,,,,,,,,,,,"```bash
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
join -i /tmp/test.txt /tmp/test.txt
```","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
join -i /tmp/test.txt /tmp/test.txt","$ perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' > /tmp/test.txt
$ join -i /tmp/test.txt /tmp/test.txt",,
,,,,,,,,,,,,,,,,"```perl
perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | sort -d
```","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | sort -d","perl -e 'print ""1"",""A""x50000000,""\r\n\r\n""' | sort -d",,
,,,,,,,,,,,,,,,,"```bash
xterm -ls; echo $TERM; cp /etc/DIR_COLORS.256color /etc/DIR_COLORS.xterm-256color; sed -i 's/.*00;36:/&red/' /etc/DIR_COLORS.xterm-256color; /bin/ls --color=auto
```","None

The provided steps describe the process to observe the issue but do not provide a concise command or test case that can be run directly to reproduce the bug. The description involves manual creation of files and starting an xterm session which cannot be expressed as a single reproducible command.","```bash
xterm -ls; echo $TERM; /bin/ls
```",,
,,,,,,,,,,,,,,,,/bin/ls -l /,None,None,,
,,,,,,,,,,,,,,,,"```bash
valgrind tac <(printf %0$((2**14 + 1))d 0) > /dev/null
tac <(printf %0$((2**14 + 1))d 0) > /dev/null
```",valgrind tac <(printf %0$((2**14 + 1))d 0) > /dev/null,valgrind tac <(printf %0$((2**14 + 1))d 0) > /dev/null,,
,,,,,,,,,,,,,,,,"```bash
(export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; 
  diff <(seq 99|sort -R) <(seq 99|sort -R))
```","(export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; \
  diff <(seq 99|sort -R) <(seq 99|sort -R))",(export PATH=/bin:$PATH LC_ALL=fr_FR.utf8; diff <(seq 99|sort -R) <(seq 99|sort -R)),,
,,,,,,,,,,,,,,,,"```bash
:>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok
```",":>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok",":>k && :>x && timeout 1 ../tail -F k > out 2>/dev/null &
echo b >> k; sleep .01; env mv x k; sleep .01; echo ok >> k
sleep .01; grep ok out > /dev/null && ok=. || ok=X; printf $ok",,
,,,,,,,,,,,,,,,,unxz < uniq-c.crash.txt.xz | uniq -c,unxz < uniq-c.crash.txt.xz | uniq -c,unxz < uniq-c.crash.txt.xz | uniq -c,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 100,None,None,,
,,,,,,,,,,,,,,,,sleep 30,None,None,,
,,,,,,,,,,,,,,,,"```bash
configure --host=aarch64-linux-gnu && make src/factor.o
```","None

The provided bug report does not specify exact commands or test cases needed to reproduce the issue. It mentions that building `coreutils` for AArch64 triggers the problem but lacks specific steps or commands beyond just mentioning the architecture and component involved.",build coreutils for aarch64,,
,,,,,,,,,,,,,,,,sleep 1d,sleep 1d,None,,
,,,,,,,,,,,,,,,,ls --color=auto lzo tzo lrz cab,None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e ""x\t\t .\n"" | unexpand -t 1,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""x\t\t .\n"" | unexpand -t 1,2
LC_ALL=C echo -n -e "" b  c   d\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" b  c   d\n"" | unexpand -t 1
LC_ALL=C echo -n -e "" a a  a\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" a a  a\n"" | unexpand -t 1
LC_ALL=C echo -n -e ""1234567\t1\n"" | unexpand -a
LC_ALL=fr_FR.UTF-8 echo -n -e ""1234567\t1\n"" | unexpand -a
```",None,"```bash
LC_ALL=C echo -n -e ""x\t\t .\n"" | unexpand -t 1,2
LC_ALL=fr_FR.UTF-8 echo -n -e ""x\t\t .\n"" | unexpand -t 1,2

LC_ALL=C echo -n -e "" b  c   d\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" b  c   d\n"" | unexpand -t 1

LC_ALL=C echo -n -e "" a a  a\n"" | unexpand -t 1
LC_ALL=fr_FR.UTF-8 echo -n -e "" a a  a\n"" | unexpand -t 1

LC_ALL=C echo -n -e ""1234567\t1\n"" | unexpand -a
LC_ALL=fr_FR.UTF-8 echo -n -e ""1234567\t1\n"" | unexpand -a
```",,
,,,,,,,,,,,,,,,,"```bash
echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-
```","echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-","```bash
echo ""a: bc def"" | LANG=en_US.utf8 valgrind --track-origins=yes -q cut -d "" "" -f 2-
```",,
,,,,,,,,,,,,,,,,"```bash
du -hs subdir
du -hs .
du -hs subdir .
```","du -hs subdir .
du -hs .","du -hs slides .
du -hs .",,
,,,,,,,,,,,,,,,,boot && df -h,None,df -h,,
,,,,,,,,,,,,,,,,"```bash
echo '#!/usr/bin/env ruby --verbose' > test.rb
echo 'puts ""Hello World""' >> test.rb
chmod +x test.rb
./test.rb
```","```bash
echo '#!/usr/bin/env ruby --verbose' > test_script.sh
chmod +x test_script.sh
./test_script.sh
```","```bash
echo '#!/usr/bin/env ruby --verbose' > test_script.sh && chmod +x test_script.sh && ./test_script.sh
```",,
,,,,,,,,,,,,,,,,"```bash
umask 0002
touch a
chmod 600 a
cp a b
cp --no-preserve=mode a c
ls -l
```","umask
0002

touch a
chmod 600 a
cp --no-preserve=mode a c
ls -l","```
umask 0002
touch a
chmod 600 a
cp --no-preserve=mode a c
ls -l c
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /mnt/bind
mount --bind / /mnt/bind
df -h /
```","None

The provided description indicates a general issue with `df` and bind mounts in Fedora 15 but does not provide specific commands or a detailed test case to reproduce the exact problem described. The steps mentioned are high-level and refer to configuring a bind mount via fstab, which is a setup step rather than a precise command for reproducing the bug.",df -h,,
,,,,,,,,,,,,,,,,"```
strace -o strace.out cp -a source_tree dest_tree
```","strace -o strace.out cp -a source_tree dest_tree

Inspect strace.out for fscreate sequences similar to:
-----
gettid()                                = <tid>
open(""/proc/self/task/<tid>/attr/fscreate"", O_RDWR) = 3
write(3, ""unconfined_u:object_r:user_tmp_t""..., 36) = 36
close(3)                                = 0
-----",strace -o strace.out cp -a source_tree dest_tree,,
,,,,,,,,,,,,,,,,"```bash
dd if=/dev/zero of=/dev/null &
kill -USR1 %1
pkill -USR1 dd
```","None

The provided Bug Description does not contain a clear and specific command or test case that can be executed to reproduce the described behavior consistently. While it mentions using `kill -USR1 dd` versus `pkill`, there is no precise scenario or setup given to reliably reproduce the issue. Therefore, based on the information available in the bug report, no exact command or test case can be derived for reproduction.",None,,
,,,,,,,,,,,,,,,,"```
uniq -c
```","To reproduce the bug described in the given crash report for `uniq`, you need to understand that it's a segmentation fault occurring when using the `uniq` command. The exact cause of this issue is not immediately clear from the provided information, but we can make some educated guesses based on common scenarios where such issues might occur.

Here are steps and test cases you could use to try and reproduce the bug:

1. **Check Environment and Dependencies:**
   - Ensure that your environment matches the one described in the crash report.
   - Verify the version of `uniq` and other relevant libraries (e.g., glibc).

2. **Generate Large Input Data:**
   - The segmentation fault could be related to handling large input data or certain specific patterns within the input file.

3. **Use Different Input Files:**
   - Test with various types of input files, including empty files, small files, and large files with different kinds of content (e.g., numeric values, strings).

4. **Run `uniq` Command Directly:**
   - Try running `uniq` on a specific file that might cause the issue.
   
Here are some test cases you could use:

### Test Case 1: Empty File
```bash
echo """" > empty_file.txt
uniq empty_file.txt
```

### Test Case 2: Small Input File with Numeric Values
```bash
echo -e ""1\n2\n3\n4"" > numeric_values.txt
uniq numeric_values.txt
```

### Test Case 3: Large Input File with Repeated Lines
Generate a large file with repeated lines using `seq` and `sort`:
```bash
seq 10000 | sort -R > large_file.txt
uniq large_file.txt
```

### Test Case 4: File with Various Strings
Create a file containing various strings, possibly including special characters or very long lines:
```bash
echo -e ""apple\nbanana\ncherry\ndate\napple"" > mixed_strings.txt
uniq mixed_strings.txt
```

### Test Case 5: Large Input File with Special Characters
Generate a large file containing special characters:
```bash
for i in {1..10000}; do echo -n ""$RANDOM""; done | tr '\n' ' ' > special_chars.txt
uniq special_chars.txt
```

### Debugging Steps
- If the bug is reproducible, you can use a debugger like `gdb` to get more information:
  ```bash
  gdb --args uniq large_file.txt
  ```

- Use `strace` to trace system calls and signals:
  ```bash
  strace -o uniq_trace.log uniq large_file.txt
  ```

By following these test cases, you can potentially reproduce the segmentation fault described in the crash report. If the issue still cannot be reproduced, consider gathering more details about the original environment where the bug occurred or inspecting the core dump for additional clues.","To reproduce a `segfault` in `/usr/bin/uniq`, we need to understand under what conditions it occurs. The provided information indicates that the issue happens when the program attempts to access an invalid memory location (indicated by `ip 00000034fb438f8c sp 00007fffb1ccdd80 error 4` in the `var_log_messages` entry).

However, since we don't have a detailed backtrace or exact input that causes the issue, here are some general steps and test cases you can try to reproduce this bug:

### General Steps:
1. **Basic Usage:**
   - Try running `uniq` with simple inputs and common options to see if it crashes.
     ```bash
     echo -e ""a\na\nb\nc\nc"" | uniq
     ```

2. **Large Inputs:**
   - Test `uniq` with large files or a large amount of input data, as sometimes memory issues arise under these conditions.
     ```bash
     # Create a large file with repeated lines
     yes ""test"" | head -n 1000000 > testfile.txt
     
     # Run uniq on the large file
     uniq testfile.txt
     ```

3. **Empty Input:**
   - Test `uniq` with empty input, as this might lead to edge-case issues.
     ```bash
     echo """" | uniq
     ```

4. **Special Characters and Non-ASCII Data:**
   - Test `uniq` with inputs that contain special characters or non-ASCII data, as these might cause unexpected behavior.
     ```bash
     # Special characters
     echo -e ""a\nb\nc\n@\n#\n$"" | uniq
     
     # Non-ASCII data (for example, UTF-8 characters)
     echo -e ""a\nb\nc\nÃ©\nÃ¼\nÃ¶"" | uniq
     ```

5. **Very Large Single Lines:**
   - Test `uniq` with very long single lines to see if there's a limit on the line length.
     ```bash
     # Create a string of 1 million 'a' characters
     python3 -c ""print('a'*1000000)"" | uniq
     ```

6. **Corrupted or Malformed Input:**
   - Test `uniq` with corrupted or malformed input to see if it can handle such cases gracefully.
     ```bash
     # Create a file with random bytes
     head /dev/urandom -c 1024 > randomfile
     
     # Run uniq on the random bytes (this might not work as expected)
     uniq randomfile
     ```

### Advanced Steps:
7. **Valgrind:**
   - Use Valgrind to check for memory issues in `uniq` when running it with various inputs.
     ```bash
     echo -e ""a\na\nb\nc\nc"" | valgrind --leak-check=full --track-origins=yes uniq
     ```

8. **Core Dump Analysis:**
   - If you can reproduce the crash, analyze the core dump to get more information about where the issue occurs.
     ```bash
     gdb /usr/bin/uniq /var/spool/abrt/ccpp-2012-07-06-22:57:23-24465/coredump
     ```

### Note:
If none of these steps reproduce the bug, it might be related to specific system conditions or configurations. In that case, you can try running `uniq` in different environments (e.g., virtual machines with varying configurations) or check for any known issues or patches related to your version of `glibc` and `coreutils`.

By systematically testing these scenarios, you should be able to identify the specific input or condition that causes the segfault.",,
,,,,,,,,,,,,,,,,"```bash
touch file1
ln file1 file2
md5sum file1 file2
```",None,None,,
,,,,,,,,,,,,,,,,"./factor 2 
(or any other number divisible by 2)","./factor 2
./factor 4
./factor 6
./factor 8
./factor 10
./factor 12
./factor 14
./factor 16",./factor 2,,
,,,,,,,,,,,,,,,,"```bash
sha256sum -c Fedora-15-i386-CHECKSUM
```","None

The provided bug report does not include a precise command or test case that can be directly used to reproduce the issue. It describes symptoms and comparisons across different versions of coreutils but lacks specific instructions on how to recreate the exact conditions described.","```bash
sha256sum -c Fedora-15-i386-CHECKSUM
```",,
,,,,,,,,,,,,,,,,"```
su - user
```","ssh user@host  
su - user",su - user,,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug described, let's break down the key elements of the bug report:

1. **Program Involved**: The program experiencing issues is `/usr/bin/md5sum`.
2. **Nature of the Issue**: The issue involves the program crashing and producing core dumps. This indicates that the problem might be related to how `md5sum` handles certain inputs or operations, potentially leading to segmentation faults or other crashes.
3. **Environment**: The system where the bug was encountered is likely a Linux distribution since `/usr/bin/md5sum` is mentioned, and tools like `abrt` (Automatic Bug Reporting Tool) are involved.

Given these points, here's how one might approach reproducing the bug:

### Steps to Reproduce

1. **Verify md5sum Installation**: Ensure that `md5sum` is installed on your system. This should be the case by default on most Linux distributions.
   
2. **Run md5sum with Various Inputs**:
   - Try running `md5sum` with different types of files (text, binary, empty) to see if any specific file type causes the crash.
   - Example commands: 
     ```bash
     echo ""Hello World"" > test.txt
     md5sum test.txt
     ```
     For a binary file:
     ```bash
     dd if=/dev/urandom of=binary_test bs=1024 count=1
     md5sum binary_test
     ```
   - Attempt to use `md5sum` on very large files or on files that do not exist to test boundary conditions.
   
3. **Test with Null Input**:
   - Sometimes, programs crash when given unexpected input, such as null characters. You can try piping output from a command that generates null bytes into `md5sum`.
     ```bash
     dd if=/dev/zero bs=1 count=1024 | md5sum
     ```
   
4. **Concurrent Execution**:
   - Since there are multiple instances of the program crashing as per the log, try running `md5sum` concurrently on different files to see if this triggers the bug.
     ```bash
     for i in {1..10}; do md5sum large_file.txt & done
     ```
   
5. **Check System Limits**:
   - The bug might be triggered by hitting system limits (e.g., open file descriptors, memory limits). Try running `md5sum` on a very large number of small files simultaneously.
   
6. **Specific Command from Logs**:
   - Given that the logs mention specific PIDs and times for crashes, it seems like the issue might be somewhat reproducible under certain conditions. Look for patterns in how `md5sum` was invoked before each crash.

### Additional Considerations

- **Version of md5sum**: The version of `md5sum` being used could be a factor. Check if updates are available or try downgrading to see if the issue persists.
- **System Configuration and Load**: High system load, specific kernel versions, or other running processes might influence the reproducibility of the bug.

### Reporting Findings

If you successfully reproduce the bug using any of these methods, document your steps precisely, including the exact commands used, the environment (OS version, `md5sum` version, etc.), and the outcome. This information will be invaluable for debugging and fixing the issue.","Based on the provided information, it appears that multiple instances of `/usr/bin/md5sum` are crashing and generating core dumps. To reproduce this bug, you would need to:

1. **Identify the conditions under which `md5sum` is failing**: The log entries suggest that multiple invocations of `md5sum` have resulted in crashes. Since there's no specific information on what files or commands caused these failures, a general approach involves testing common use cases and edge cases.

2. **Test Common Use Cases**:
    - Generate the checksum for a valid file:
      ```bash
      md5sum /path/to/valid_file
      ```
    
3. **Test Edge Cases**:
    - Generate the checksum for large files (e.g., several GBs in size) to see if there are memory or resource limitations that cause issues.
      ```bash
      dd if=/dev/urandom of=largefile bs=1M count=4096 # Create a 4GB file filled with random data
      md5sum largefile
      ```
    - Generate the checksum for non-existent files:
      ```bash
      md5sum /non/existent/file
      ```
    - Generate the checksum for special files (e.g., device files, sockets):
      ```bash
      md5sum /dev/null
      md5sum /path/to/socket_file
      ```

4. **Check if certain inputs cause a crash**:
    - Use a known problematic file or input that has been reported in similar issues.
    - Test with specific versions of `md5sum` to see if the issue is version-specific.

5. **Run with verbose/debugging options (if available)**:
    - Some tools have debug modes that can provide more information about where it fails.
      ```bash
      md5sum --debug /path/to/suspected_problematic_file
      ```

6. **Analyze core dump files**:
    - The `abrt` logs indicate that core dumps are being saved, which may help in pinpointing the exact cause of the crash.
      ```bash
      gdb /usr/bin/md5sum /var/spool/abrt/ccpp-2012-10-31-13\:19:42-2833/coredump
      ```

7. **Run under a debugger**:
    - Use `gdb` to run the program and catch any errors.
      ```bash
      gdb --args /usr/bin/md5sum /path/to/suspected_problematic_file
      (within gdb) run
      ```

By systematically testing these scenarios, you can identify if there are specific conditions or files that cause `md5sum` to crash. This will help in reproducing the bug and potentially provide more detailed information about its root cause.","Based on the information provided, it seems that the `/usr/bin/md5sum` command is causing a crash and generating core dumps. The same process repeats over and over again.

To help in reproducing this bug, here are some steps you can follow:

1. **Run `md5sum` Command:**
   Start with running the basic `md5sum` command on various files to see if it crashes.
   
   ```bash
   md5sum /path/to/some/file
   ```

2. **Try Different Inputs:**
   Test `md5sum` with different types of input, including:
   - Empty files
   - Large files (e.g., 1GB or more)
   - Special characters in the file names
   - Binary files
   
   ```bash
   md5sum /path/to/emptyfile
   dd if=/dev/zero bs=1M count=1024 > largefile; md5sum largefile
   md5sum ""/path/to/file with spaces and special!@#$%^&*()characters""
   md5sum /usr/bin/somebinaryfile
   ```

3. **Run in a Loop:**
   Try running `md5sum` in a loop to see if it crashes after multiple runs.
   
   ```bash
   for i in {1..100}; do md5sum /path/to/some/file; done
   ```

4. **Check with Different File Descriptors and Redirections:**
   Test `md5sum` with different file descriptors and redirections, to see if this causes a crash.
   
   ```bash
   md5sum < /path/to/some/file
   echo -n ""data"" | md5sum
   ```

5. **Test with Pipe and Other Commands:**
   Test `md5sum` when used in combination with pipes and other commands, to see if this causes a crash.
   
   ```bash
   cat /path/to/some/file | md5sum
   ls -lR /some/directory | md5sum
   ```

6. **Check for Race Conditions:**
   Test `md5sum` in a multi-threaded environment, to see if there are any race conditions.
   
   ```bash
   while true; do (md5sum /path/to/some/file &); done
   ```

7. **Use Core Dumps to Diagnose:**
   If the program crashes again, you can use `gdb` or other debuggers to analyze core dumps and find out where exactly the crash is occurring.
   
   ```bash
   gdb /usr/bin/md5sum /var/spool/abrt/ccpp-2012-10-31-13:09:18-25494/coredumpfile
   ```

By systematically testing `md5sum` with different inputs and conditions, you should be able to reproduce the crash and gather more information on what is causing it.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /tmp/testdir
echo ""echo Syntax error"" > /tmp/testdir/rm
chmod +x /tmp/testdir/rm
export PATH=/tmp/testdir:$PATH
setuidgid nobody env PATH=/tmp/testdir:$PATH rm --version
```","None

The provided information does not specify an exact command or test case for reproducing the described issue in a straightforward manner, despite detailing a scenario involving 'setuidgid' and path issues. The steps mentioned are more about setting up a condition rather than providing a direct way to reproduce the bug with specific commands.","```bash
setuidgid nobody env PATH=/path/to/src:<oldpath> rm --version
```",,
,,,,,,,,,,,,,,,,"```
md5sum
```","None of the information provided directly specifies a unique set of steps or specific input that is causing the issue. However, based on the backtrace and arguments in the `main` function, it appears the command was likely run against standard input:

```bash
md5sum -
```

The hyphen (`-`) typically represents standard input (stdin) for many command-line utilities.

### Test Case to Reproduce:
1. Run the following command:

    ```bash
    md5sum -
    ```

2. Do not provide any input and let it run, or alternatively, send specific inputs to see if that triggers a similar issue.

This might help in reproducing the crash or assert failure observed in the report. Further investigation may be needed based on what happens when this command is executed.","None

The provided backtrace and description do not offer any clear indication of specific input values or conditions that led to the crash. The `md5sum` command was being used on a file named ""-"", which typically represents standard input in Unix-like systems. However, without knowing what data was fed into stdin at the time of the execution, it's impossible to reproduce this exact scenario.

If there is any additional context or if the bug report mentions specific steps leading up to the crash, those details would be necessary to craft a test case. Otherwise, based on the given information alone, no concrete commands can be identified for reproducing the issue.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
md5sum
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
md5sum
```",None,None,,
,,,,,,,,,,,,,,,,"```
echo -n ""swfsdf"" | md5sum
```","Based on the provided information, it appears that a core dump has occurred while running `md5sum`, which is a command-line utility for computing MD5 message digest checksums of files. The presence of a core dump suggests there may be an issue with the program or its environment.

To reproduce this bug, we can start by trying to use `md5sum` on various types of input and see if it crashes under specific conditions. Here are some test cases and commands that you could use:

1. **Basic Usage:**
   - Try computing the MD5 sum for a small text file.
     ```sh
     echo ""test data"" > testfile.txt
     md5sum testfile.txt
     ```

2. **Large File:**
   - Check if `md5sum` crashes when handling large files.
     ```sh
     dd if=/dev/urandom of=largefile bs=1M count=100 # Create a 100MB file filled with random data
     md5sum largefile
     ```

3. **Special Characters:**
   - Check for issues when processing files with special characters in their names.
     ```sh
     touch 'special*chars'
     md5sum 'special*chars'
     ```

4. **Empty File:**
   - Try computing the MD5 sum of an empty file.
     ```sh
     touch emptyfile.txt
     md5sum emptyfile.txt
     ```

5. **Non-Existing File:**
   - Check if `md5sum` handles missing files gracefully.
     ```sh
     md5sum nonexistingfile.txt
     ```

6. **Corrupted File:**
   - If available, try computing the MD5 sum of a corrupted file to see if it causes issues.
     ```sh
     # Assuming you have access to a corrupted binary file
     md5sum corrupted_binary_file
     ```

7. **Multiple Files at Once:**
   - Test with multiple files as input arguments.
     ```sh
     touch file1.txt file2.txt
     echo ""test"" > file1.txt
     echo ""another test"" > file2.txt
     md5sum file1.txt file2.txt
     ```

8. **Pipe Input:**
   - Test `md5sum` with input from a pipe.
     ```sh
     echo ""pipe input"" | md5sum -
     ```

These commands will help you identify whether the crash happens under specific conditions or consistently across different scenarios. If any of these tests cause `md5sum` to crash, it would indicate where the issue might lie and help in further debugging.

If the bug is reproducible with one of these test cases, please provide more details about which case triggers the crash so that we can narrow down the problem further.","The provided information indicates that a core dump has been generated for `/usr/bin/md5sum` on the system, which is being handled by ABRT (Automatic Bug Reporting Tool). However, there are no specific details given about what caused `md5sum` to crash or under what conditions it happened. To reproduce this issue, we need to simulate similar conditions that might have led to the crash.

Given that `md5sum` is a utility for computing and checking MD5 message digest, we can try the following test cases:

1. **Input Large Files:**
   Since `md5sum` reads data from files provided as arguments, feeding it very large files (e.g., several GB in size) could potentially cause memory issues or other problems.
   ```bash
   dd if=/dev/zero of=large_file bs=1G count=4 # Create a 4GB file filled with zeros
   md5sum large_file
   ```

2. **Corrupted Files:**
   Providing corrupted files might also trigger an unexpected behavior in `md5sum`.
   ```bash
   truncate -s +1M corrupt_file # Creates a sparse file, which may cause problems for some applications.
   md5sum corrupt_file
   ```
   
3. **Simultaneous File Operations:**
   Simulating simultaneous read/write operations on the same files could also cause issues if not handled correctly by `md5sum`.
   ```bash
   while true; do echo ""data"" >> file & sleep 0.1; done &
   md5sum file
   ```

4. **Memory Stress:**
   Running memory stress tests alongside `md5sum` might uncover bugs related to memory management or allocations.
   ```bash
   stress-ng --vm 2 --vm-bytes 1G --timeout 60s & # Run a memory stress test in background
   md5sum large_file
   ```

5. **Edge Cases:**
   Test `md5sum` with edge cases like special characters, null bytes, or empty files.
   ```bash
   echo -n """" > empty_file
   md5sum empty_file

   printf '\0' > null_byte_file
   md5sum null_byte_file
   
   echo ""file_with_special_chars_!@#$%^&*()_+{}|:\""<>?[];',./"" > special_chars_file
   md5sum special_chars_file
   ```

6. **Running from Different File Systems:**
   The behavior of `md5sum` might differ on different types of file systems (e.g., ext4, xfs). Try running it on a mounted network filesystem or other filesystems to see if the issue still persists.
   
7. **Run with Valgrind/Memcheck:**
   Using tools like Valgrind can help in identifying memory management issues that might be causing `md5sum` to crash.
   ```bash
   valgrind --leak-check=full md5sum large_file
   ```

Given the limited information, these are some generic test cases that could potentially help reproduce the issue. However, for an accurate reproduction of the exact scenario, more specific details about what was happening when `md5sum` crashed would be needed. If you have access to the environment where this happened, it would be ideal to try running similar operations there.",,
,,,,,,,,,,,,,,,,"```bash
ls --color=always
TERM=xterm ls --color=always
TERM=xterm-256color ls --color=always
```",None,"TERM=xterm ls --color=always
TERM=xterm-256color ls --color=always",,
,,,,,,,,,,,,,,,,who,None,who,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C echo -n -e "" \ta\tb"" | expand --tabs=3 -i
LC_ALL=fr_FR.UTF-8 echo -n -e "" \ta\tb"" | expand --tabs=3 -i
```","echo -n -e "" \ta\tb"" | LC_ALL=C expand --tabs=3 -i  
echo -n -e "" \ta\tb"" | LC_ALL=fr_FR.UTF-8 expand --tabs=3 -i","echo -n -e "" \ta\tb"" | LC_ALL=C expand --tabs=3 -i  
echo -n -e "" \ta\tb"" | LC_ALL=fr_FR.UTF-8 expand --tabs=3 -i",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,md5sum --binary /dev/zero,"Based on the provided information in the bug report, it appears that the issue occurred when running the `md5sum` command. The backtrace indicates that the failure happened while processing input from standard input (stdin). Therefore, a possible command and test case to attempt reproducing this bug might be:

```bash
echo -n ""Some sample input"" | md5sum -
```

Here is an explanation of the above command:
- `echo -n ""Some sample input""`: This sends some text as standard input.
- `|`: This pipes the output from `echo` into `md5sum`.
- `md5sum -`: The `-` tells `md5sum` to read from stdin.

To better reproduce and diagnose this issue, you could try a variety of inputs with different characteristics (e.g., long strings, binary data) to see if any specific type triggers the bug.

Example test cases:
1. Simple text input:

   ```bash
   echo -n ""Test string"" | md5sum -
   ```

2. Large amount of text:

   ```bash
   printf 'a%.0s' {1..10000} | md5sum -
   ```

3. Binary data:

   ```bash
   tr -cd '\11\12\15\40-\176' < /dev/urandom | head -c 1024 | md5sum -
   ```

These test cases should help in determining if the bug is reproducible and under what conditions.","None. The bug report indicates that this issue is an ABRT (Automated Bug Reporting Tool) entry which has been generated automatically in response to a program crash. It doesn't provide specific steps or commands to reproduce the problem.

However, based on the information provided, it seems like `md5sum` command might have caused the crash:

```bash
md5sum -
```

Here, `-` typically stands for standard input. If you want to try reproducing this issue, you would need to provide some input via standard input, for example using a pipe or redirection from a file.

For instance:
```bash
echo ""test"" | md5sum -
```
or
```bash
md5sum < /path/to/some/file
```

However, these are just educated guesses based on the command `md5sum` being mentioned in the backtrace. There could be other factors that might contribute to this crash which aren't apparent from the provided information.",,
,,,,,,,,,,,,,,,,"```bash
who; last -5; top -n1 | grep agica; who
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
VAR=''
test -n $VAR ; echo $?
test $VAR ; echo $?
```","None

The provided steps in the Bug Description actually describe how to observe the behavior of the bug rather than providing a concise command or test case to directly reproduce it as per the instruction guidelines. However, based on the information given, one can infer that the issue lies with the interaction between `test -n` and an unquoted variable expansion when the variable is empty.

The described sequence of commands in Steps to Reproduce does illustrate the bug but doesn't match a single direct command or test case as requested by your instruction.","```
VAR=''; test -n $VAR ; echo $?
```",,
,,,,,,,,,,,,,,,,"```bash
sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd
```","```
sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd 
```","```bash
sudo cp /etc/passwd .
ls -l passwd 
sudo cp --attributes-only /etc/passwd passwd 
ls -l passwd 
```",,
,,,,,,,,,,,,,,,,"```bash
du -hs scons-hg-00?
```","du -hs *
du -hs scons-hg-00?",du -hs scons-hg-00?,,
,,,,,,,,,,,,,,,,"```bash
mkdir Bug
cd Bug
git clone git://git.kernel.org/pub/scm/git/git.git git.git
du -s *
```","None

The provided Bug Description does not contain explicit commands but rather mentions running an attached script that needs to be executed for reproduction. Since the actual content of the attached script is not included in the description provided here, we cannot list out specific shell commands to reproduce the issue without it. Therefore, based solely on the information given, no direct command or test case can be definitively extracted and provided.",None,,
,,,,,,,,,,,,,,,,"```bash
for F in /boot/xen*; do if /usr/bin/test -f ${F}; then echo ${F} is a file.; fi; done
```","With xen installed, for F in /boot/xen*; do if /usr/bin/test -f ${F}; then echo ${F} is a file.; fi; done","```bash
for F in /boot/xen*; do if /usr/bin/test -f ${F}; then echo ${F} is a file.; fi; done
```",,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears that the `uniq` command is experiencing a segmentation fault under certain conditions. To reproduce this bug, we can attempt to run the `uniq` command with various inputs and options.

Here are some possible commands or test cases that could be used to reproduce the bug:

1. **Basic usage**: Run the `uniq` command on a simple input file:
   ```
   uniq input_file.txt
   ```
   Replace `input_file.txt` with a text file containing duplicate lines.

2. **Empty input**: Try running `uniq` without any input or with an empty file:
   ```
   uniq empty_file.txt
   ```
   or
   ```
   uniq < /dev/null
   ```

3. **Large input**: Test `uniq` with a large input file to see if it crashes due to memory issues:
   ```bash
   yes ""test"" | head -n 1000000 > large_input.txt
   uniq large_input.txt
   ```

4. **Special characters and encoding**: Attempt to use `uniq` on files containing special characters or non-standard encodings:
   ```
   uniq file_with_special_chars.txt
   ```

5. **Piped input**: Run `uniq` with piped input to see if it affects the behavior:
   ```bash
   cat input_file.txt | uniq
   ```

6. **Multiple files**: Test `uniq` on multiple files at once:
   ```
   uniq file1.txt file2.txt
   ```

7. **Options and flags**: Experiment with different options and flags, such as `-c`, `-d`, `-u`, etc.:
   ```bash
   uniq -c input_file.txt
   uniq -d input_file.txt
   uniq -u input_file.txt
   ```

8. **Invalid or corrupted input**: Try running `uniq` on a file that is intentionally corrupted or contains invalid data.

To further analyze and reproduce the issue, you may need to:

* Run these commands under different environments (e.g., different operating systems, shells, or `uniq` implementations).
* Use debugging tools like `gdb` or `valgrind` to examine the core dumps and identify potential causes of the segmentation fault.
* Test with various input sizes, contents, and formats to determine if there's a specific pattern that triggers the bug.

Keep in mind that reproducing the exact behavior might be challenging without access to the original environment and inputs. These test cases are meant to provide a starting point for investigation rather than guaranteed reproduction of the issue.","Based on the provided information, it appears that the `uniq` command is causing a segmentation fault under certain conditions. The logs show multiple occurrences of this issue with varying amounts of memory used in core dumps.

To reproduce the bug, you need to identify what specific input or conditions cause `uniq` to crash. Here are some steps and test cases you can try:

1. **Basic Usage:**
   Start by testing basic usage scenarios to see if they produce a segmentation fault.
   
   ```bash
   echo -e ""a\nb\nc"" | uniq
   ```

2. **Large Input Data:**
   Try feeding large input data into `uniq` as the issue might be related to memory handling with large inputs.

   ```bash
   seq 1000000 > file.txt
   uniq file.txt
   ```

3. **Repeated Lines:**
   Test cases where there are repeated lines, which is a common use case for `uniq`.

   ```bash
   echo -e ""a\nb\nc\na\nb"" | uniq
   ```

4. **Empty Input:**
   Check behavior with an empty input.

   ```bash
   cat /dev/null | uniq
   ```

5. **Binary Data:**
   Try feeding binary data to `uniq` as this might cause issues if the program is not handling non-textual inputs correctly.

   ```bash
   dd if=/dev/urandom bs=1M count=10 > file.bin
   uniq file.bin
   ```

6. **Mix of Text and Binary Data:**
   Combine text and binary data to see if there are any boundary issues where the program might mishandle mixed input types.

   ```bash
   echo -e ""a\nb\nc"" | cat /dev/stdin <(dd if=/dev/urandom bs=1M count=1) > file.txt
   uniq file.txt
   ```

7. **Very Large File with Small Memory:**
   Check for memory handling when dealing with very large files on systems with limited memory.

   ```bash
   seq 1000000 | uniq --memory-limit=5M
   ```

8. **Specific Input Patterns:**
   Try input patterns that might be specific to the problem based on the addresses where `uniq` crashes:

   ```bash
   echo -e ""segment\nfault\ncore"" > file.txt
   uniq file.txt
   ```

### Summary of Commands and Test Cases:
1. Basic usage with small inputs.
2. Large input data (large files or large sequences).
3. Repeated lines for common use cases.
4. Empty input to check edge cases.
5. Binary data to test handling non-textual inputs.
6. Mixed text and binary data.
7. Memory-limited operations on large inputs.
8. Specific input patterns based on crash addresses.

By running these test cases, you can identify the specific conditions under which `uniq` crashes and help in further debugging or reporting the bug to maintainers.","The error messages indicate that `/usr/bin/uniq` is causing a segmentation fault (segfault) with specific details about where it occurred in memory and the process ID at the time of failure. However, the provided information does not directly suggest what input caused these issues.

To try to reproduce the bug, we should consider several factors:
1. The inputs being passed to `uniq`.
2. The environment (e.g., shell, other processes running, system state).
3. Specific cases that might trigger a memory access violation, which is likely causing the segfault.

Here are some commands and test cases you can use to attempt reproducing the issue:

### 1. Basic Usage
Try using `uniq` with simple inputs:
```bash
echo -e ""a\nb\nc\na"" | uniq
```

### 2. Large Inputs
Since the core dump sizes suggest a larger amount of data might be involved, try using very large input files. You can generate a large file for testing purposes:
```bash
head /dev/urandom | tr -dc '[:print:]' > largefile.txt
# Run uniq on this large file
uniq < largefile.txt
```

### 3. Special Characters and Edge Cases
Test `uniq` with special characters, including control characters and very long lines:
```bash
echo -e ""a\0b\nc\na"" | uniq
printf ""%s\n"" $(head /dev/urandom | tr -dc '[:print:]' | fold -w 10000) > longlinefile.txt
uniq < longlinefile.txt
```

### 4. Random Input Data
Generate random input data and test `uniq`:
```bash
head -c 100M /dev/urandom | tr -dc '[:print:]' > randomdata.txt
# Run uniq on this file
uniq < randomdata.txt
```

### 5. Check for Memory Corruption with Valgrind
Run `uniq` under the control of a memory debugging tool like valgrind to catch invalid memory access:
```bash
echo -e ""a\nb\nc\na"" | valgrind --tool=memcheck --leak-check=yes /usr/bin/uniq
```

### 6. Environment Factors
Check if specific environment variables or shell configurations might be influencing the behavior:
- Try running `uniq` in different shells (bash, sh, zsh).
- Check if other processes are using a lot of memory that could affect `uniq`.

### 7. Reproduce with Core Dump Analysis
If you have access to one of the core dumps, you can analyze it to get more information about the state of the process when it crashed:
```bash
gdb /usr/bin/uniq <path_to_coredump>
(gdb) backtrace
```

By systematically testing these scenarios and checking for patterns in which `uniq` fails, you should be able to identify a specific set of inputs or conditions that cause the segfault. Once identified, this can help in diagnosing and fixing the underlying bug.",,
,,,,,,,,,,,,,,,,"```
echo HKT: `date -d ""2012-05-18 21:00:00 HKT""`
echo `TZ=America/New_York date -d ""$(TZ=:Asia/Hong_Kong date -d 9pm)""`
```","None

The provided description contains commands but does not clearly indicate which of these commands actually reproduces the bug. The first two mentioned commands are reported as not working, while the third command is said to work correctly. Without a clear indication of which command fails in a way that demonstrates the bug, there isn't a specific test case or command that can be extracted for reproduction purposes from this description alone.","```bash
echo HKT: `date -d ""2012-05-18 21:00:00 HKT""`
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
touch file.html
touch file.htm
ls
```","None

The provided bug report describes a discrepancy in file colorization by `ls` for `.html` and `.htm` files but does not provide specific coreutils command(s) that can be executed to reproduce the exact issue in a controlled environment. The description outlines steps on what to observe, rather than how to precisely replicate the condition through command execution alone.","```bash
touch example.html example.htm
ls --color=auto
```",,
,,,,,,,,,,,,,,,,stat -f /,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file_1 file.1 file_2 file.2
ls -l
```","touch file_1 file.1 file_2 file.2     
ls -l",touch file_1 file.1 file_2 file.2 && ls -l,,
,,,,,,,,,,,,,,,,sync,"sync

None

The provided bug report indicates that simply running the `sync` command causes the prompt to not return on an AMD Athlon XP1800+ CPU with Fedora 17 beta installed. However, no specific steps beyond executing the `sync` command are given for reproducing the issue. Therefore, only the `sync` command itself is provided as it seems to trigger the problem according to the report. The ""Steps to Reproduce"" section in the bug description does not contain any actionable steps other than implicitly suggesting running the command, hence no additional test case beyond the command execution can be derived from this report.",sync,,
,,,,,,,,,,,,,,,,"```bash
mkdir d
ln -s d l
setfacl -m u:daemon:rx d
ls -dl -L l
```","mkdir d
ln -s d l
setfacl -nm u:daemon:rx d
ls -dl -L l","```bash
mkdir d && ln -s d l && setfacl -nm u:daemon:rx d && ls -dl -L l
```",,
,,,,,,,,,,,,,,,,ssh remotehost /usr/bin/tput,ssh remotehost /usr/bin/test,ssh remotehost /usr/bin/test,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p bugz; mkdir -p bugz; echo $?
```","None

The provided steps do not actually describe how to observe a failure or unexpected behavior. The command `mkdir -p` is designed to create directories and will succeed silently if the directory already exists, which matches the actual results described in the bug report. Thus, there are no commands that would reproduce an error as per the expected results; `mkdir -p` correctly handles the case of creating a pre-existing directory by not failing and not altering the existing contents (including any files inside it).",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p cptest/bin cptest/nonbin cptarget
cp -avZ cptest/* cptarget/
```","mkdir -p cptest/bin cptest/nonbin cptarget
cp -avZ cptest/* cptarget/",mkdir -p cptest/bin cptest/nonbin cptarget && cp -avZ cptest/* cptarget/,,
,,,,,,,,,,,,,,,,"```bash
du -s /usr /var /run
du -s /var /usr /run
du -s /var /run /usr
du -s /var /run
```","du -s /usr /var /run  
du -s /var /usr /run  
du -s /var /run /usr  
du -s /var /run","du -s /usr /var /run  
du -s /var /usr /run  
du -s /var /run",,
,,,,,,,,,,,,,,,,"```bash
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test
```","sudo su -
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test","```bash
sudo su -
mkdir test
chown 500:500 test
chown -v --from=600:600 1000:1000 test
```",,
,,,,,,,,,,,,,,,,"```bash
su; suspend
```","None

The provided Bug Description does not mention a coreutils command directly but rather describes behavior related to shell handling when using `su`. The issue seems more related to how `tcsh` and `su` interact rather than being an issue within the Linux core utilities themselves. Thus, no specific coreutils command or test case is available from this description for reproducing a coreutils bug.","```bash
su
suspend
```",,
,,,,,,,,,,,,,,,,"```bash
/bin/df -hT
```","None

The provided bug description does not include a specific command or test case that can be directly executed to reproduce the bug. It describes the symptoms and environment where the issue occurs but lacks explicit instructions on how to recreate the exact conditions leading to the problem.",None,,
,,,,,,,,,,,,,,,,"Based on the provided bug description, it appears that the issue is related to a segmentation fault in the `/usr/bin/md5sum` command. The `var_log_messages` section indicates that there have been multiple instances of core dumps being saved for this command.

To reproduce the bug, here are some possible commands or test cases:

1. **Run md5sum with invalid input**:
   ```bash
md5sum <invalid_input>
```
   Replace `<invalid_input>` with something that could potentially cause issues, such as a very large file, a special character, or an empty string.

2. **Run md5sum on a large file**:
   ```bash
dd if=/dev/zero of.large_file bs=1M count=1024
md5sum large_file
```
   This will create a 1GB file and then attempt to calculate its MD5 checksum using `md5sum`.

3. **Run md5sum in a loop**:
   ```bash
for i in {1..1000}; do md5sum /dev/zero; done
```
   This command runs `md5sum` 1000 times on `/dev/zero`, which could potentially trigger the bug if it's related to repeated execution or memory leaks.

4. **Run md5sum with multiple files**:
   ```bash
touch file1 file2 file3
md5sum file1 file2 file3
```
   This command creates three empty files and then attempts to calculate their MD5 checksums using `md5sum`.

To further investigate the issue, you could also try:

* Running `md5sum` with the `--version` flag to check if it's a version-specific problem.
* Using `strace` or `gdb` to attach to the `md5sum` process and gather more information about the crash.
* Checking the system logs for any other related errors or warnings.

Note that without more specific details about the bug, these test cases are just educated guesses. The actual commands required to reproduce the bug may vary depending on the underlying issue.","To reproduce a bug involving `md5sum`, we need to understand what might cause it to crash. The provided logs indicate that `md5sum` is crashing repeatedly across different times and instances. However, there are no specific details about the input or environment causing these crashes.

Here's how you can approach identifying commands or test cases:

1. **Check Environment:**
   Ensure that the system has the necessary dependencies for running `md5sum`. You can verify if any recent updates or changes have affected the behavior of this utility.
   
2. **Test with Various Inputs:**
   Test `md5sum` with different types of input files, both valid and invalid cases to see under what conditions it crashes.

3. **Capture Logs and Debug Information:**
   Capture logs and debug information when running these commands. This will help in identifying if there are any patterns or specific inputs causing the crash.

### Steps for Testing:

1. **Create Valid and Invalid Input Files:**

    - Create a valid file with text:
      ```bash
      echo ""This is a test file"" > testfile.txt
      ```

    - Run `md5sum` on this file:
      ```bash
      md5sum testfile.txt
      ```

2. **Test with Empty Files:**
   
    - Create an empty file and run `md5sum` on it:
      ```bash
      touch emptyfile.txt
      md5sum emptyfile.txt
      ```
      
3. **Test with Large Files:**

    - Generate a large file (e.g., 1 GB):
      ```bash
      dd if=/dev/urandom of=largefile.bin bs=1M count=1024
      ```

    - Run `md5sum` on this large file:
      ```bash
      md5sum largefile.bin
      ```
    
4. **Test with Special Characters:**

    - Create a file containing special characters and non-printable characters:
      ```bash
      echo -e ""\x01\x02\x03 This is a test with special chars"" >specialchars.txt
      ```

    - Run `md5sum` on this file:
      ```bash
      md5sum specialchars.txt
      ```
      
5. **Test with Non-Existing Files:**

    - Try running `md5sum` on a non-existing file to see if it handles the error gracefully:
      ```bash
      md5sum nonexistentfile.txt
      ```

6. **Run Under Debugging Tools (Optional):**
   If you suspect that there might be an issue with the binary itself or specific conditions, running under tools like `strace` or `gdb` can provide deeper insights.

    - Use `strace` to trace system calls:
      ```bash
      strace md5sum testfile.txt
      ```

    - Use `gdb` for debugging if you have the source code and a debug build of `md5sum`.
    
7. **Check System Logs:**
   Check the system logs (e.g., `/var/log/syslog`, `/var/log/messages`) to see if there are any additional hints or messages related to these crashes.

### Steps Summary:

1. Create valid and invalid input files.
2. Run `md5sum` on various types of files including empty, large, special characters, non-existent files.
3. Use debugging tools like `strace` or `gdb`.
4. Check system logs for additional information.

By following these steps, you can identify the specific conditions that cause `md5sum` to crash and provide detailed test cases to reproduce the bug.","The provided data indicates that the `md5sum` utility is crashing repeatedly and generating core dumps on your system. The core dumps are stored in `/var/spool/abrt/ccpp-<timestamp>-<pid>/`. To attempt reproducing this issue, you can follow these test cases:

1. **Basic md5sum Command**: Try running the `md5sum` command with a simple input file to see if it crashes:
   ```
   echo ""hello world"" > testfile.txt
   md5sum testfile.txt
   ```

2. **Large Input File**: Test with a large file, as memory issues might be causing the crash:
   ```
   dd if=/dev/zero of=largefile bs=1M count=1024 # creates a 1GB file
   md5sum largefile
   rm largefile
   ```

3. **Empty Input File**: Test with an empty file to see if it crashes in this case as well:
   ```
   touch emptyfile.txt
   md5sum emptyfile.txt
   rm emptyfile.txt
   ```

4. **Special Characters and Long Filenames**: Test how `md5sum` handles special characters and long filenames:
   ```
   echo ""test"" > file_!@#$%^&*()-_=+[]{}|;:'\"",.<>?/`.txt
   md5sum file_!@#$%^&*()-_=+[]{}|;:'\"",.<>?/`.txt

   # Create a long filename (256 characters)
   LONG_NAME=$(printf ""%0.1s"" ""a""{1..256})
   touch ""$LONG_NAME""
   md5sum ""$LONG_NAME""

   rm file_!@#$%^&*()-_=+[]{}|;:'\"",.<>?/`.txt
   rm ""$LONG_NAME""
   ```

5. **Non-existent File**: Test how `md5sum` handles non-existent files:
   ```
   md5sum non_existent_file
   ```

6. **Symbolic Links**: Create a symbolic link to a file and calculate the checksum using the symlink:
   ```
   ln -s testfile.txt symlink_to_testfile.txt
   md5sum symlink_to_testfile.txt
   rm symlink_to_testfile.txt
   ```

7. **Multiple Files at Once**: Test how `md5sum` behaves when given multiple files to process:
   ```
   echo ""file1"" > file1.txt
   echo ""file2"" > file2.txt
   md5sum file1.txt file2.txt

   rm file1.txt
   rm file2.txt
   ```

8. **Stress Testing**: Run `md5sum` repeatedly in a loop to see if the crashes occur:
   ```bash
   for i in {1..100}; do md5sum testfile.txt; done
   ```
   
9. **Run Under Valgrind or GDB**: Use memory debugging tools like valgrind or gdb to detect any memory issues or segmentation faults while running `md5sum`:
   ```bash
   # Install valgrind if not already installed (e.g., on Debian/Ubuntu):
   sudo apt-get install valgrind

   # Run md5sum under valgrind
   valgrind --leak-check=full md5sum testfile.txt

   # Alternatively, run with gdb:
   gdb -ex run -ex bt -ex q --args md5sum testfile.txt
   ```

10. **Check for Environment Issues**: Sometimes, the issue might be environment-specific (e.g., file system corruption). Check your file systems for errors and ensure everything is running correctly:
    ```bash
    sudo fsck /dev/sdXN # Replace XN with your partition (e.g., sda1)
    ```

These test cases should help you identify under what conditions the `md5sum` command crashes. If the issue persists, consider checking if there are any updates or patches available for your version of `coreutils`, as this is where the `md5sum` utility is included.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, let's analyze the key points from the information given:

1. **Executable and Version**: The executable involved is `/usr/bin/md5sum`, which is a command-line utility used to calculate and verify MD5 message digests.

2. **Crash Reports**: Multiple crash reports are mentioned, all involving `md5sum`. These crashes were reported by `abrt` (Automatic Bug Reporting Tool), indicating that the program terminated abnormally.

3. **Core Dump Locations**: Core dumps were saved in `/var/spool/abrt/`, which suggests that each time `md5sum` crashed, a core dump was generated and saved for further analysis.

Given this information, to reproduce the bug or understand what might be causing it, you would need to consider how `md5sum` is being used when these crashes occur. Since specific commands or inputs are not provided in the description, here are some generalized steps that could potentially help reproduce or troubleshoot the issue:

### Steps to Reproduce or Troubleshoot

1. **Run md5sum with Various Inputs**:
   - Try running `md5sum` on different types of files (text, binary, large files, etc.) to see if it crashes.
     ```bash
     md5sum /path/to/your/file
     ```
   - Consider using files with specific characteristics that might trigger the bug, such as very large files or files containing certain patterns of data.

2. **Use md5sum in Loops or Scripts**:
   - Given the repetitive nature of some crash reports (e.g., multiple crashes within a short time frame), it's possible that running `md5sum` in a loop could reproduce the issue.
     ```bash
     for i in {1..100}; do md5sum /path/to/a/file > /dev/null; done
     ```
   - This command runs `md5sum` 100 times on the same file, discarding output. If `md5sum` crashes during this loop, it might indicate a problem related to repeated execution or resource handling.

3. **Check for Environment and System Specifics**:
   - The bug might be specific to certain system configurations or environments. Check if there are any known issues with the version of `md5sum`, the Linux distribution, or other system software that could contribute to the crashes.
   - Consider running `md5sum` on different systems or environments to see if the issue is reproducible.

4. **Analyze Core Dumps**:
   - If possible, analyze the core dumps generated by these crashes using tools like `gdb`. This can provide more detailed information about what was happening in the program when it crashed.
     ```bash
     gdb /usr/bin/md5sum /var/spool/abrt/ccpp-<date>-<pid>/coredump
     ```
   - Look for clues such as the current function, variables, and backtrace to understand what led to the crash.

5. **Report Bugs**:
   - If you can reproduce the bug or gather more information about it, consider reporting it to the maintainers of `md5sum` or your distribution's bug tracking system. This helps ensure that any issues are addressed in future versions.

Remember, without specific details on how `md5sum` was being used when these crashes occurred (e.g., exact commands, input files), reproducing the bug might require some trial and error based on the patterns observed in the crash reports.","Based on the provided information, it appears that there is an issue with the `/usr/bin/md5sum` command which causes core dumps. To help identify and potentially reproduce this bug, you can try the following steps:

### Steps to Reproduce:
1. **Check md5sum Version**:
   First, check what version of `md5sum` you are using.
   ```sh
   md5sum --version
   ```

2. **Test with Valid Input Files**:
   Run `md5sum` on some valid input files to see if the issue persists.
   ```sh
   echo -n ""test"" | md5sum -
   ```
   Check for core dumps or errors.

3. **Test with Large Files and Different File Types**:
   Test the command using various file types (text, binary) and large files.
   ```sh
   # Create a test text file
   printf 'test\ntest\n' > testfile.txt

   # Calculate md5sum of the text file
   md5sum testfile.txt

   # For binary data:
   dd if=/dev/urandom of=testfile.bin bs=1M count=100
   md5sum testfile.bin
   ```

4. **Test with Special Characters and Edge Cases**:
   Check for edge cases such as empty files, symbolic links, or files with special characters.
   ```sh
   # Empty file
   touch emptyfile.txt
   md5sum emptyfile.txt

   # File containing non-printable characters
   printf '\x01\x02' > binaryfile.bin
   md5sum binaryfile.bin

   # Symbolic link to a file
   ln -s testfile.txt symlink_testfile.txt
   md5sum symlink_testfile.txt
   ```

### Additional Debugging Steps:
- **Enable Core Dumps** (if not already enabled):
  ```sh
  ulimit -c unlimited
  ```
- **Use `strace` to Trace System Calls**:
  Run the command under `strace` to get more detailed information on where it crashes.
  ```sh
  strace md5sum testfile.txt
  ```

### Possible Causes and Considerations:
1. **Library Dependencies**: The issue might be caused by an incompatible or corrupted library dependency of `md5sum`.
2. **Filesystem Issues**: There could be problems with the filesystem where the files are stored.
3. **System Resources**: Check if there are any resource limits (memory, open file descriptors) that may cause the program to crash.

By following these steps and gathering more details about the context in which `md5sum` is failing, you can narrow down potential causes and work towards reproducing and fixing the bug.","To reproduce this bug, it seems that `/usr/bin/md5sum` is crashing repeatedly and generating core dumps when executed. To diagnose and potentially reproduce the issue, follow these steps:

1. **Check Core Dumps**: Ensure that your system is configured to generate core dumps. You can check the core pattern by running:
   ```bash
   ulimit -c
   ```
   If it outputs `0`, then you need to allow core dumps:
   ```bash
   ulimit -c unlimited
   ```

2. **Locate Core Dumps**: Core dumps are usually stored in `/var/lib/systemd/coredump/` or other directories depending on the system configuration. Locate a recent core dump file related to `md5sum`.

3. **Debug with GDB**: Use gdb (GNU Debugger) to analyze the core dump and identify what causes the crash.
   ```bash
   gdb /usr/bin/md5sum <core_dump_file>
   ```
   In gdb, you can use commands like `backtrace` or `bt` to see a stack trace.

4. **Reproduce with Different Inputs**: Try running `md5sum` with different types of input files to see if certain files trigger the crash:
   - A simple text file.
   - Large binary files.
   - Empty files.
   - Files with specific patterns or characters that might be edge cases.

5. **Stress Testing**: Run `md5sum` repeatedly in a loop to simulate high load scenarios and check for stability:
   ```bash
   while true; do md5sum /path/to/file; done
   ```

6. **Environment Variables**: Check if the bug occurs with specific environment variables set. Modify or unset environment variables related to locale, language, etc.

7. **System Configuration Changes**: Verify system configurations that might affect `md5sum` such as I/O scheduler settings, kernel parameters, or file system options.

8. **Check for Updates/Patches**: Make sure your operating system and all packages are up-to-date, as the bug may have been fixed in a newer release.

9. **Review Code Changes (If Accessible)**: If you have access to the source code, review recent changes that might affect `md5sum` functionality or performance.

By following these steps, you should be able to identify conditions under which `/usr/bin/md5sum` crashes and potentially reproduce the bug reliably.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, let's break down the information given:

1. **Program Involved**: The program experiencing issues is `/usr/bin/md5sum`.
2. **Nature of the Bug**: The bug results in a core dump being saved by `abrt` (Automatic Bug Reporting Tool), indicating a crash or segmentation fault.
3. **Environment and Logs**: The logs show repeated crashes of `md5sum` on different dates, suggesting that the issue is not transient and can be reproduced under certain conditions.

Given this information, here are steps to attempt reproducing the bug:

### Step 1: Ensure Environment Setup
- Make sure you have `abrt` installed and configured on your system to capture core dumps in case of application crashes.
- Ensure `/usr/bin/md5sum` is installed and accessible.

### Step 2: Identify Potential Triggers
- Review the provided logs for any patterns or commonalities among the crashes, such as input files, command-line arguments, or specific times/dates that might hint at periodic issues.
- Since no specific trigger is mentioned in the log messages, we'll need to consider general usage scenarios of `md5sum`.

### Step 3: Test Cases
To attempt reproducing the bug, try running `md5sum` with various inputs and options:
1. **Simple File Hash**: Run `md5sum` on a small file, e.g., `md5sum /path/to/a/small/file.txt`.
2. **Large Files**: Attempt to hash very large files or directories to see if size is a factor: `md5sum /path/to/a/large/file.iso`.
3. **Non-existent or Protected Files**: Try hashing non-existent files (`md5sum /non/existent/file`) and files you don't have permission to read.
4. **Recursive Hashing**: Use `md5sum` recursively on a directory: `find /path/to/directory -type f -exec md5sum {} +`.
5. **Pipe Input**: Test with piped input, e.g., `echo ""Hello World"" | md5sum`.
6. **Edge Cases**: Consider testing with specially crafted inputs, such as files containing only null characters or very long file names.

### Step 4: Monitoring and Analysis
- While running these test cases, monitor the system's logs (e.g., `/var/log/messages` or equivalent) for any error messages related to `abrt` or `md5sum`.
- If a core dump is generated during testing, analyze it using tools like `gdb` to understand the crash context.

### Note:
Without more specific details about the crashes (e.g., exact commands used when crashes occurred), these steps involve a degree of speculation and trial-and-error. The actual trigger for the bug might be something not covered by these general test cases, requiring further investigation or additional log analysis to pinpoint.","The provided log indicates that `md5sum` is crashing repeatedly under certain conditions. To help identify and reproduce this issue, we need to consider several aspects:

1. **Environment Information**: The environment variables and system details like operating system version.
2. **Input Data**: What input (file or data) was being processed when the crash occurred?
3. **Command Line Options**: Any specific command line options used with `md5sum`.

### Steps to Reproduce the Bug

1. **Check Environment**:
   - Verify the exact Linux distribution and version.
   - Check for any custom environment variables that might be affecting the behavior of `md5sum`. For example, in your log there's a variable `IFLA_USERDATA` which might or might not be relevant.

2. **Identify Input Data**:
   - Determine what type of input caused the crashes: Was it a specific file? A large set of files?
   - Try to identify if the crash is related to certain types of data (e.g., corrupted files, empty files).

3. **Check Command Line Usage**:
   - Review the command lines used when `md5sum` crashed. Check for any unusual options or combinations.

### Test Cases

1. **Basic Usage with a Single File**:
    ```sh
    md5sum /path/to/suspected/file.txt
    ```

2. **Check with Multiple Files**:
    If the crash is more frequent when processing multiple files, you might test something like this:
    ```sh
    find /directory -type f | xargs md5sum
    ```

3. **Test with Large File Sizes**:
   - Generate a large file and check if `md5sum` crashes.
     ```sh
     dd if=/dev/zero of=largefile bs=1M count=1024
     md5sum largefile
     ```
   
4. **Corrupted Files**:
    - If there's any indication that corrupted files are causing the issue, generate or use known corrupt files and run `md5sum` on them.
      ```sh
      dd if=/dev/urandom of=corrupt_file bs=1M count=1024
      md5sum corrupt_file
      ```

5. **Special Characters in Filenames**:
    - Test with filenames containing special characters that might cause issues.
      ```sh
      touch ""file_with!special*chars.txt""
      md5sum file_with\!\special\*chars.txt
      ```

6. **Run Under Debugging Tools (Optional)**:
   - Use tools like `gdb` to get a more detailed view of what causes the crash.
     ```sh
     gdb --args md5sum /path/to/suspected/file.txt
     run
     ```

### Summary

To reproduce the bug, focus on testing different input scenarios and command line usages. The key steps involve:

- Identifying the exact environment (OS version, custom variables).
- Testing with various types of files: single files, large files, corrupted files.
- Using debugging tools like `gdb` to get more detailed crash information.

By systematically trying these test cases, you can better understand under which conditions `md5sum` crashes and potentially identify the root cause.","The issue described seems to be a recurring crash of the `md5sum` utility on your system. The ABRT logs indicate that there were multiple crashes occurring when this command was executed.

However, based on the given information, it's difficult to identify the exact cause or test case to reproduce the bug without more details like error messages or stack traces from the core dumps.

That being said, we can still provide a few commands and test cases that may help in reproducing the issue:

1. **Run `md5sum` with different input files**:
   Test if certain types of files cause crashes.
   
   ```bash
   md5sum /path/to/your/file
   ```

2. **Use large files as input**:
   Sometimes, memory-related issues arise when processing large files.

   ```bash
   dd if=/dev/zero of=testfile bs=1M count=1024  # Creates a 1GB file
   md5sum testfile
   ```

3. **Test `md5sum` with special characters in filenames**:
   
   ```bash
   touch ""test@#$.txt""
   md5sum ""test@#$.txt""
   ```
   
4. **Run `md5sum` concurrently on multiple files**:
   It may be related to multi-threading or memory management.

   ```bash
   for file in /path/to/your/files/*; do md5sum ""$file"" & done
   ```

5. **Use different versions of `coreutils` (if possible)**:
   Sometimes, the issue might have been resolved in a newer version.
   
6. **Generate core dumps manually and analyze them**:
   This can help you understand what went wrong. First, enable core dump generation:

   ```bash
   ulimit -c unlimited
   ```
   
   Then run `md5sum` as usual, wait for it to crash, and analyze the generated core dump using a debugger like GDB.

7. **Test with different system configurations**:
   Sometimes, bugs can be related to specific hardware or software configurations.

Remember that while these commands might help you in reproducing the issue, they may not directly point out what is causing `md5sum` to crash. Analyzing core dumps and debugging the application would provide more insight into the root cause of the problem.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, let's break down the information given:

1. **Application Involved**: The application that crashed is `/usr/bin/md5sum`.
2. **Error Context**: The error logs suggest that `md5sum` crashes repeatedly, with core dumps saved by `abrt` (Automatic Bug Reporting Tool).
3. **Environment**: The system details are not explicitly mentioned, but it appears to be a Linux system given the presence of `/usr/bin/md5sum`, `abrt`, and the file paths.
4. **Time Frame**: The crashes occurred over several days in September, October, and November.

Given this information, here's how you might approach reproducing the bug:

### Step 1: Verify Environment
Ensure you're working on a similar Linux distribution to where the bug was reported. This is crucial because different distributions might have different versions of `md5sum` or different configurations that could affect the reproducibility of the bug.

### Step 2: Identify Potential Triggers
From the logs, it's not clear what triggers the crashes. However, since `md5sum` is a command-line utility for generating MD5 checksums, potential triggers might include:
- **Input Size**: Very large input files.
- **Input Type**: Certain types of files (e.g., corrupted, very small, or specially crafted).
- **Command Options**: Specific options used with `md5sum`.
- **Concurrency**: Running multiple instances of `md5sum` concurrently.

### Step 3: Test Cases
Based on potential triggers, here are some test cases to attempt reproducing the bug:
1. **Large Input**:
   ```bash
   dd if=/dev/urandom of=largefile bs=1M count=1000
   md5sum largefile
   ```
2. **Concurrent Execution**:
   ```bash
   for i in {1..10}; do md5sum /dev/zero & done
   wait
   ```
3. **Small or Corrupted Input**:
   - Try with an empty file: `md5sum emptyfile`
   - Try with a file containing random, corrupted data.
4. **Specific Options**:
   - Use different options with `md5sum`, such as checking the checksum of a file against a known good checksum.

### Step 4: Monitoring and Analysis
While running these test cases, monitor system logs for any errors related to `md5sum`. If crashes occur, analyze the core dumps (if saved) using tools like `gdb` to understand the cause of the crash.

### Note:
Without more specific details about the exact conditions leading up to each crash (e.g., command lines used, versions of software), these steps are speculative. The goal is to create scenarios that might stress `md5sum` in ways similar to how it was stressed when the crashes occurred. 

Given the nature of the bug report, it seems like there could be an issue with how `md5sum` handles certain types of input or operating conditions. Identifying and reproducing the exact steps leading to these crashes will require careful experimentation based on the clues provided in the log messages.","Based on the provided log and environment information, it seems that the `/usr/bin/md5sum` utility is crashing frequently under certain conditions. To help identify and potentially reproduce this issue, you would need to determine what inputs or conditions are causing `md5sum` to crash.

Here are some steps and commands you can use to gather more details about the bug and attempt to reproduce it:

1. **Check for Specific Input Files**:
    - If there is a specific file or set of files that cause `md5sum` to crash, ensure you have those files available.
    - Test different types of input files (e.g., large files, empty files, corrupted files).

2. **Run `md5sum` with Various Inputs**:
    - Run `md5sum` on a normal file:
        ```sh
        md5sum /path/to/normal/file
        ```
    - Try running `md5sum` on an empty file:
        ```sh
        touch empty_file
        md5sum empty_file
        ```
    - Run `md5sum` on a large file (e.g., 1 GB):
        ```sh
        dd if=/dev/zero of=large_file bs=1M count=1024
        md5sum large_file
        ```

3. **Check for Corrupted Files**:
    - Create or find corrupted files and try running `md5sum` on them.
        ```sh
        echo ""corrupted data"" > corrupted_file && dd if=/dev/urandom of=corrupted_file bs=1M count=1 conv=notrunc
        md5sum corrupted_file
        ```

4. **Check for Large Directories**:
    - Try running `md5sum` on a large directory recursively.
        ```sh
        find /path/to/large/directory -type f -exec md5sum {} \;
        ```

5. **Inspect Environment Variables and Memory Limits**:
    - Ensure that environment variables are set as expected when the crash occurs.
    - Check if memory limits might be causing issues by running `md5sum` with different resource constraints using tools like `ulimit`.
        ```sh
        ulimit -c unlimited  # Enable core dump generation
        md5sum /path/to/suspected/file
        ```

6. **Gather Core Dumps and Analyze**:
    - Use the `gdb` debugger to analyze the core dumps that have been generated.
        ```sh
        gdb /usr/bin/md5sum ccpp-2011-10-06-14:19:18-7528  # Replace with actual path to core dump file
        ```

7. **Check for Version and Patch Levels**:
    - Ensure you are using the latest version of `md5sum` or check if there is a known bug in your specific version.
        ```sh
        md5sum --version
        ```

8. **Run with Strace to Gather System Calls**:
    - Use `strace` to see what system calls `md5sum` is making before it crashes.
        ```sh
        strace -o strace_output.txt md5sum /path/to/suspected/file
        ```

By following these steps and commands, you can gather more detailed information about the conditions that cause `md5sum` to crash, which may help in reproducing and debugging the issue.","The provided information indicates that the `md5sum` utility is crashing repeatedly on your system. The core dumps are being saved by ABRT (Automatic Bug Reporting Tool) and the core dump files all have a size of 344064 bytes.

Given this information, to reproduce the bug, you need to attempt running the `md5sum` command in scenarios that might be causing it to crash. Here are some test cases or commands that could help in reproducing the issue:

1. **Run `md5sum` with an empty file:**
   ```sh
   touch /tmp/empty_file
   md5sum /tmp/empty_file
   ```

2. **Run `md5sum` with a large file:**
   Create a large file using `dd`, then calculate its MD5 sum:
   ```sh
   dd if=/dev/zero of=/tmp/large_file bs=1M count=1024  # Creates a 1GB file
   md5sum /tmp/large_file
   ```

3. **Run `md5sum` with a special or corrupted file:**
   Try to create a file with special characters in its name and calculate the MD5 sum:
   ```sh
   touch '/tmp/special@#$.file'
   md5sum '/tmp/special@#$.file'
   ```
   
   Also, try using a potentially corrupted or invalid binary file:
   ```sh
   head -c 1024 /dev/urandom > /tmp/corrupted_file
   md5sum /tmp/corrupted_file
   ```

4. **Run `md5sum` with multiple files at once:**
   Create several small files and calculate the MD5 sums of all:
   ```sh
   touch /tmp/file1 /tmp/file2 /tmp/file3
   echo ""Test content"" > /tmp/file1
   echo ""Another test content"" > /tmp/file2
   md5sum /tmp/file*
   ```

5. **Run `md5sum` with input from a pipe:**
   Use `echo` to provide input directly via a pipe:
   ```sh
   echo -n ""Test string"" | md5sum
   ```

6. **Test edge cases:**
   Check if `md5sum` handles boundary conditions such as zero-length files, very large files, or invalid file paths gracefully.

7. **Run `md5sum` with SELinux/AppArmor enabled (if applicable):**
   Ensure that your system is enforcing security policies and check if the tool still crashes under these restrictions:
   ```sh
   sestatus  # Check SELinux status
   sudo aa-status  # Check AppArmor status
   ```

8. **Run `md5sum` with different locales:**
   Some applications can have issues related to locale settings, so try running `md5sum` with different locales:
   ```sh
   export LANG=C
   md5sum /tmp/empty_file

   export LANG=en_US.UTF-8
   md5sum /tmp/empty_file
   ```

If you encounter a crash during any of these tests, it should produce a core dump file that can be analyzed further to identify the root cause. Additionally, checking system logs and using tools like `gdb` to analyze the core dumps might provide more insights into what's causing the crashes.",,
,,,,,,,,,,,,,,,,"Reproducing the Bug
====================
To reproduce the bug, we need to analyze the given information and identify the possible causes of the crash.

### Possible Causes

Based on the `var_log_messages`, it appears that the `/usr/bin/md5sum` command is crashing repeatedly. The crashes are being logged by the `abrt` (Automatic Bug Reporting Tool) daemon.

### Reproduction Steps

To reproduce the bug, we can try running the `md5sum` command with different inputs and see if it crashes. Here are some possible test cases:

1. **Run md5sum with a valid file**:
   ```bash
md5sum /path/to/a/valid/file
```
2. **Run md5sum with an invalid file**:
   ```bash
md5sum /path/to/an/invalid/file
```
3. **Run md5sum with a large file**:
   ```bash
md5sum /path/to/a/large/file
```
4. **Run md5sum with multiple files**:
   ```bash
md5sum /path/to/file1 /path/to/file2
```
5. **Run md5sum in a loop**:
   ```bash
for i in {1..100}; do md5sum /path/to/a/valid/file; done
```

### Additional Information

To further debug the issue, it may be helpful to:

* Check the `abrt` logs for more information about the crashes.
* Run the `md5sum` command with debugging options (e.g., `-v` or `--verbose`) to see if it provides any additional output.
* Use a tool like `strace` or `gdb` to attach to the `md5sum` process and collect more information about the crash.

By running these test cases and analyzing the results, we may be able to reproduce the bug and gather more information about its cause.","Based on the provided information, it seems that the `/usr/bin/md5sum` command is crashing repeatedly under certain conditions. Here are some steps you can take to reproduce and diagnose this issue:

1. **Check Environment**: Ensure your environment matches the one where the crashes were observed (same OS version, libraries, etc.). Based on the logs, it looks like this might be a Linux system.

2. **Identify Triggering Conditions**:
    - The bug seems to occur under specific conditions. You need to determine what those conditions are.
    - Look for commonalities in when these crashes happened (e.g., certain times of day, file types, file sizes).

3. **Run `md5sum` with Different Inputs**:
    - Test the command on various files:
        ```bash
        md5sum /path/to/some/file
        ```
    - Try large files, small files, text files, binary files, and possibly corrupted or incomplete files.
    
4. **Use Specific File Types Known to Cause Issues**:
    - If there are any specific file types that might be causing the issue (e.g., very large files, special characters in filenames), use those as inputs.

5. **Run Under Debugging Tools**:
    - Use `strace` or `gdb` to get more information about what happens when the crash occurs.
        ```bash
        strace md5sum /path/to/some/file
        ```
    - For a more detailed investigation, use `gdb`:
        ```bash
        gdb --args md5sum /path/to/some/file
        run
        ```

6. **Check for Memory Issues**:
    - Use Valgrind to check for memory issues such as buffer overflows or uninitialized variables.
        ```bash
        valgrind --leak-check=full md5sum /path/to/some/file
        ```

7. **Check System Logs and Debugging Information**:
    - Look at the system logs (e.g., `/var/log/messages`, `dmesg`) for any additional information that might help identify the root cause.

8. **Reproduce Crash with Similar Files**:
    - If there are specific files that caused crashes, try to reproduce those conditions.
        ```bash
        md5sum /path/to/crashing/file1
        ```

9. **Run in a Controlled Environment**:
    - Use a virtual machine or a containerized environment to isolate the issue and control variables.

By systematically testing these scenarios, you should be able to identify what specific conditions cause `/usr/bin/md5sum` to crash and gather more detailed information that could lead to fixing the bug.","The issue here seems to be that `md5sum`, a command-line utility used for computing and checking MD5 message digest values, is crashing frequently on your system. The logs indicate multiple crashes over several days.

To diagnose and potentially reproduce this problem, you can follow these steps:

1. **Check the Environment:**
   Ensure there are no issues with disk space or file permissions that could be causing `md5sum` to crash.
   
2. **Test with Simple Input:**
   Run `md5sum` on a small text file.
   ```sh
   echo ""test"" > testfile.txt
   md5sum testfile.txt
   ```

3. **Test with Large Files:**
   Sometimes, the issue might be related to processing large files.
   ```sh
   dd if=/dev/zero of=largefile bs=1M count=1024 # Creates a 1GB file
   md5sum largefile
   ```

4. **Test with Different Types of Files:**
   Test `md5sum` on different types of files like binary, images, and scripts.
   ```sh
   md5sum /path/to/binary/file
   md5sum /path/to/image.jpg
   md5sum /path/to/script.sh
   ```

5. **Check for File System Corruption:**
   Run file system checks to ensure there is no corruption on your disk.
   ```sh
   sudo fsck /dev/sdXN # Replace sdXN with the actual partition identifier.
   ```

6. **Run under Valgrind:**
   Use `valgrind` to check for memory leaks or illegal accesses, which could be causing crashes.
   ```sh
   valgrind --tool=memcheck md5sum testfile.txt
   ```

7. **Update the System and md5sum Utility:**
   Ensure that your system is up-to-date and `md5sum` utility is at the latest version.
   ```sh
   sudo apt-get update && sudo apt-get upgrade # For Debian/Ubuntu based systems
   sudo yum update # For Red Hat/CentOS based systems
   ```

8. **Check for Hardware Issues:**
   Use tools like `memtest86+` to check memory and other hardware diagnostics to ensure there are no underlying issues.

9. **Try on Another Machine:**
   If possible, run `md5sum` with the same file(s) on another machine to see if it reproduces the issue. This can help determine whether the problem is specific to your system or not.

10. **Examine Core Dumps:**
    Check core dumps of the crashes for more detailed information about what went wrong.
    ```sh
    gdb /usr/bin/md5sum /path/to/corefile # Replace with actual path to core dump file.
    ```

If following these steps helps you reproduce the issue, it will be easier to understand the root cause and potentially fix or work around it. If not, it might indicate a more subtle or hardware-related problem that would require further investigation.",,
,,,,,,,,,,,,,,,,"To identify the commands or test cases required to reproduce the bug based on the provided bug description, we first need to understand what the bug is about. However, the given text does not explicitly describe a bug but rather provides detailed system information, including hardware components, filesystems, and environment variables.

Given this context, if we were to speculate on potential issues or bugs related to this setup (such as compatibility problems, driver issues, or filesystem errors), here are some steps that might help in reproducing or troubleshooting the problem:

### 1. **System Information Gathering**

- **CPU and Memory Details**: `cat /proc/cpuinfo` and `free -m`
- **Disk Space and Filesystem Types**: `df -hT`
- **Installed Packages and Versions**: `rpm -qa` (for RPM-based systems) or `dpkg -l` (for Debian-based systems)
- **Kernel Version**: `uname -r`

### 2. **Hardware-Specific Tests**

- For potential issues with the `iwl3945` wireless network adapter:
  - Try loading/unloading the driver: `sudo modprobe -r iwl3945` followed by `sudo modprobe iwl3945`
  - Check for firmware updates.
- For problems with the `e1000e` Ethernet controller:
  - Test connectivity using `ping` or `ethtool` to check link status.

### 3. **Filesystem Checks**

- Run a filesystem check on all partitions: `sudo fsck /dev/sda1`, `sudo fsck /dev/mapper/vg_dhcp2563-lv_root`, etc.
- Check for disk errors using SMART tools like `smartctl --health /dev/sda`

### 4. **Environment Variable Checks**

- Review environment variables set in the system, particularly those that might affect hardware or software behavior: `printenv`
- Test applications or services with suspected issues to see if they behave differently under varying environmental conditions.

### 5. **Reproduce Specific Scenarios**

If there are specific scenarios described in the (unseen) bug report (e.g., crashes during high network load, errors when accessing certain filesystems), attempt to replicate these:
- Use tools like `stress` or `iperf` for network and CPU stress testing.
- Perform file system operations under heavy load: `dd if=/dev/zero of=testfile bs=1G count=1 oflag=direct`

### Note:

Without a specific bug description, these steps are speculative. The actual commands or test cases needed to reproduce a bug would depend on the nature of the issue (e.g., hardware compatibility, software version conflicts, configuration errors). Always ensure you have backups before running potentially disruptive tests.","The provided text appears to be a collection of system information rather than an explicit description of a specific bug. To accurately provide the necessary commands or test cases required to reproduce any potential issue, we need more context about what exactly is going wrong (the symptoms of the bug). However, based on the given data, we can infer some general testing scenarios that might help identify and troubleshoot issues.

Here are some possible commands/test cases:

### 1. Verify Network Interface Issues:
If the issue relates to network connectivity or performance, you could check if the wireless card (iwl3945) is functioning correctly.
```bash
sudo dmesg | grep iwl3945
iwconfig
ifconfig -a
ping -c 4 www.google.com
```

### 2. Check USB Device Issues:
If there are problems with USB devices, verify if they're being recognized and functioning properly.
```bash
lsusb
dmesg | grep usb
journalctl -k | grep usb
```

### 3. FireWire Device Issues:
Check whether the firewire_ohci module is loaded and functioning correctly.
```bash
lsmod | grep firewire
dmesg | grep firewire
```

### 4. Filesystem Check:
If there are issues with file systems or disk space, you can check filesystem integrity and usage:
```bash
df -h
sudo e2fsck /dev/mapper/vg_dhcp2563-lv_root
du -sh /* --exclude=/proc --exclude=/sys --exclude=/run --exclude=/mnt --exclude=/media
```

### 5. Multimedia Device Issues:
If there are problems with sound or multimedia devices, you can check the status of the HDA Intel device.
```bash
aplay -l
arecord -l
dmesg | grep snd
```

### 6. Video Card Performance Issues:
For issues related to video card performance or stability:
```bash
glxinfo | grep ""OpenGL renderer""
vulkaninfo
```

### 7. System Logs for Errors:
Check system logs for any errors that might indicate the nature of the bug.
```bash
journalctl -xe
dmesg | less
cat /var/log/syslog
```

### Additional Context Needed:
If you provide more specific symptoms (e.g., network connectivity issues, USB device not recognized), I can tailor these commands and test cases to better fit the potential bug.

In summary, without knowing exactly what is going wrong, we've listed a series of general diagnostic steps that might help uncover any potential problems in various system components.","To reproduce a bug based on the provided information, we need more specific details about what the bug actually is. However, from the given data, it seems that this might be related to system configuration, performance issues with certain hardware devices, file system usage, or possibly some application behavior. Given the lack of explicit bug description, I will propose a general approach and some commands that could help in diagnosing issues related to the described systems.

1. **Check System Logs**:
   - Command: `journalctl`
     - This command can be used to check system logs which might contain information about hardware issues or any other errors.
   
2. **Hardware Diagnostics**:
   - Command: `lspci` and `lsusb`
     - These commands will list all PCI and USB devices, respectively. Checking the output against known hardware problems could help identify faulty devices.

3. **Network Interface Check**:
   - Command: `ifconfig` or `ip addr`
     - This command provides details about network interfaces which can be helpful if there are issues related to networking (like iwl3945, a wireless card).
   
4. **USB Device Check**:
   - Command: `lsusb`
     - Helps in listing all USB devices connected to the system. Useful for troubleshooting USB-related problems.
   
5. **File System Check and Usage**:
   - Command: `df -h` or `du -sh <directory>`
     - These commands show disk usage, helping diagnose issues related to file system space or performance.

6. **Hardware Monitoring**:
   - Command: `sensors`
     - This command can be used with a package like `lm-sensors` installed on the system to check hardware temperatures and fan speeds.
   
7. **Performance Monitoring**:
   - Command: `top` or `htop` (if htop is installed)
     - These commands provide real-time information about CPU, memory, and swap usage which can help in identifying performance issues.

8. **Check Specific Application Logs**:
   - Commands to check logs for specific applications might be available (e.g., `/var/log/apache2/` for Apache web server).
   
9. **Kernel Version and Configuration Check**:
   - Command: `uname -a`
     - This command shows the kernel version and other details, which can help in diagnosing issues related to kernel-specific problems.

10. **Hardware Stress Testing (if applicable)**:
    - Tool: Stress-ng
      - If the bug seems performance-related or hardware-related, stress testing could be used to reproduce any potential system instability.

Given these commands and procedures, you should try running them on a similar setup to see if you can observe the same issues. For a specific bug, more detailed information would be necessary to formulate precise steps for reproduction.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,df -k,df -k,df -k,,
,,,,,,,,,,,,,,,,"```bash
useradd justin
groupadd wheel
usermod -aG wheel justin
groups justin
```","None

The provided bug report does not specify exact commands or a clear test case that can be used directly to reproduce the issue described. The steps mentioned are more general and involve system-wide configurations and installations which cannot be easily or precisely replicated through simple command lines without additional context or setup instructions.",None,,
,,,,,,,,,,,,,,,,"```bash
su
grep postlogin /etc/pam.d/su
rpm -q --changelog pam-1.1.4-4.fc16 | grep -B1 postlogin
rpmls pam-1.1.4-4.fc16 | grep postlogin
```",None,None,,
,,,,,,,,,,,,,,,,df,df,df,,
,,,,,,,,,,,,,,,,"```bash
yum update coreutils
```",None,None,,
,,,,,,,,,,,,,,,,"strace -e trace=lstat,getxattr,lgetxattr ls -l /media","strace -e trace=lstat,getxattr,lgetxattr ls -l /media","strace -e trace=lstat,getxattr,lgetxattr ls -l /media",,
,,,,,,,,,,,,,,,,"`date +%d%b%y %T` 

or 

`mail -s ""whatever `date +%d%b%y %T`"" whoever.localhost`",None,None,,
,,,,,,,,,,,,,,,,"```bash
useradd user1
useradd user2
su - user1
gnome-terminal # or any other terminal program
su - user2
screen
```","None

The provided steps are more of a scenario description and involve multiple actions that cannot be reduced to a single command or simple set of commands to directly trigger the described behavior in a consistent testing environment. The issue seems related to running `screen` as another user within an existing session, which requires setting up users and specific environment conditions that go beyond a straightforward command execution for reproduction.","```bash
adduser user1
adduser user2
su - user1
xterm &  # or any other terminal emulator
su - user2
screen
```",,
,,,,,,,,,,,,,,,,"```
ls --color
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LANG=de_DE df -h | head -n 2
```","LANG=de_DE df -h | head -n 2
df -h | head -n 2","```bash
LANG=de_DE.UTF-8 df -h | head -n 2
```",,
,,,,,,,,,,,,,,,,"To reproduce this bug, we can follow these steps based on the information provided:

### Step 1: Environment Setup
Ensure that you are running a similar environment as described in the bug report. This includes:
- Operating System (likely Linux-based given the presence of `/lib/ld-2.13.90.so` and `/lib/libc-2.13.90.so`)
- Version of `gdb` (GNU Debugger)
- Presence of specific libraries and their versions, such as `libc-2.13.90`

### Step 2: Reproduce the Crash
The bug seems to involve a crash or an abnormal termination of the `/bin/sleep` command, which is analyzed using `gdb`. To reproduce this:
1. **Run the sleep command**: Execute `/bin/sleep` with appropriate arguments that might trigger the bug. The exact arguments aren't specified in the log, but you can start by trying to run it with a duration argument, e.g., `/bin/sleep 10`.
2. **Use GDB for Debugging**: Run `gdb` on the core dump file generated when `/bin/sleep` crashes, or attach `gdb` to the process if it's possible to reproduce the crash live.

### Step 3: Commands to Reproduce
Based on the log, here are some commands that seem relevant to reproducing and analyzing the bug:
- **Run `/bin/sleep` under gdb**:
  ```bash
  gdb -batch -ex set debug-file-directory /usr/lib/debug:/var/cache/abrt-di/usr/lib/debug -ex file /bin/sleep -ex core-file ./coredump -ex thread apply all backtrace 2048 full -ex info sharedlib -ex print (char*)__abort_msg -ex print (char*)__glib_assert_msg -ex info registers -ex disassemble
  ```
- **Analyzing the Backtrace**:
  The log mentions generating and saving a backtrace. If you can reproduce the crash, running `gdb` with similar options as above should help in analyzing the issue.

### Step 4: Test Cases
Given the limited information about how to trigger the bug directly from the user's perspective, potential test cases include:
- Running `/bin/sleep` with various arguments (e.g., different sleep durations).
- Testing `/bin/sleep` under heavy system load or resource constraints.
- Investigating if there are specific library versions or configurations that could lead to this issue.

### Note
Without more context about the conditions leading up to the bug (e.g., specific system states, user actions), these steps are speculative and based on the information provided in the log. The actual process of reproducing the bug might require additional specifics not covered here.","Based on the provided bug report, it seems that a program (specifically `/bin/sleep`) has crashed and generated a core dump (`coredump`). The crash happened while `sleep` was running, but there are no details about specific arguments passed to the command.

To identify the commands or test cases required to reproduce this bug, you can start by experimenting with different variations of how the `sleep` command is being used. Here are some potential test cases and steps that could help in reproducing the issue:

1. **Basic Usage:**
   ```bash
   sleep 10
   ```
   This would normally cause `sleep` to wait for 10 seconds before exiting without any issues.

2. **With Large Time Values:**
   ```bash
   sleep 999999999
   ```
   Check if very large time values trigger the bug.

3. **Floating Point Numbers:**
   ```bash
   sleep 0.5
   ```
   Test with fractional seconds to see if that causes any issues.

4. **Multiple Instances Simultaneously:**
   ```bash
   for i in {1..10}; do (sleep $i &); done
   ```
   Run multiple instances of `sleep` simultaneously and check if the bug appears under concurrent execution.

5. **With Signals:**
   You could also test by sending different signals to the sleep process while it's running:
   ```bash
   sleep 10 &
   pid=$!
   kill -SIGSEGV $pid
   ```
   The above example sends a segmentation fault signal (`SIGSEGV`) to the `sleep` process. Modify and experiment with other signals as well.

6. **Under Memory Pressure:**
   Simulate memory pressure by allocating lots of memory:
   ```bash
   sleep 10 &
   pid=$!
   # Run another command that consumes a lot of memory
   python -c 'import os; print(""Allocating...""); os.system(""dd if=/dev/zero bs=1M count=5000"")'
   ```
   This tests if the bug appears under high-memory conditions.

7. **With Specific Environment Variables:**
   Some bugs can be triggered by specific environment settings:
   ```bash
   LD_PRELOAD=<path_to_library> sleep 10
   ```
   Replace `<path_to_library>` with a path to a library you suspect might affect the behavior.

8. **Different System States:**
   Test in different system states (e.g., under high load, low memory, etc.) using tools like `stress`:
   ```bash
   stress --cpu 4 --vm 2 --io 1 &
   sleep 10
   ```

By running these test cases and observing if the crash occurs, you can narrow down what conditions are likely to trigger this bug. Once a reproduction is found, you will have a clearer picture of how to proceed with debugging or reporting the issue more precisely.","Based on the provided log information, it seems that a core dump of `/bin/sleep` was analyzed using `gdb`. The steps to potentially reproduce the bug would include causing a core dump in `/bin/sleep`, collecting the dump file, and then analyzing it with `gdb` for debugging.

However, from the provided data, there's no information regarding why `/bin/sleep` crashed or the specific conditions that caused the crash. `/bin/sleep` is typically used to pause execution for a specified time interval and doesn't usually encounter runtime errors on its own under normal circumstances.

To attempt to reproduce this bug, one should consider the following:

1. **Recreate the Environment**: Ensure you have the same version of `/bin/sleep`, `gdb`, libraries (e.g., libc), and kernel that were present when the core dump was generated.
   
2. **Trigger Core Dumps for /bin/sleep**:
   - Make sure your system is configured to allow core dumps by setting a limit on their size: 
     ```bash
     ulimit -c unlimited
     ```
   - Attempt to cause `/bin/sleep` to crash in some way. This could be through malicious intent (e.g., injecting signals, memory corruption), but without more information about the actual issue, it's hard to suggest a specific test case.
   
3. **Analyze Core Dump**:
   - Once you have a core dump file for `/bin/sleep`, use `gdb` in a similar manner to how it was used here to analyze the crash and generate a backtrace:
     ```bash
     gdb /bin/sleep ./coredump
     ```
   - Execute commands like those mentioned in the log (`thread apply all backtrace 2048 full`, `info sharedlib`, etc.) to see if you can identify the reason for the crash.
   
Unfortunately, without additional information about the nature of the issue (e.g., what signals were being sent, what was happening around the time of the crash), it's difficult to suggest a specific test case that would reliably reproduce this bug. If there were known conditions or inputs under which `/bin/sleep` crashed in your environment, those should be used for testing.

If you have more information about the circumstances leading up to the crash (e.g., system logs, other running processes), that could also help in constructing a test case.",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,/sleep 5m,"None of the provided information clearly indicates a user-caused input or environmental condition that is causing `sleep` to crash. The issue appears to be related to an internal segmentation fault in `lib/libc.so.6`. Therefore, it is difficult to generate a specific set of steps for reproducing this bug without more context about the environment and conditions under which the error occurs.

However, if we want to test the behavior of the command `/bin/sleep` as closely as possible to what was executed when the crash happened, you can try running:

```bash
/bin/sleep 5m
```

### Notes:
1. **Environment:** This bug might be specific to a particular version or build of `libc`, so it's important to know which distribution and version of Linux is being used.
2. **Dependencies:** Make sure that the libraries used by `/bin/sleep` are exactly as they were at the time of the crash.
3. **Hardware/Kernel:** The issue could also be related to a specific kernel or hardware configuration.

### Steps to Reproduce:
1. Ensure you have the same environment setup (Linux version, library versions).
2. Run `strace /bin/sleep 5m` to capture system calls and trace where it might fail.
3. Use debugging tools like GDB if you can rebuild the binary with debug symbols:

    ```bash
    gdb /bin/sleep
    run 5m
    ```

4. If the crash occurs, use `backtrace` inside GDB to get a more detailed stack trace.

### Example of Detailed Debugging:
1. Compile sleep from source with debugging symbols if you have access to it.
2. Use `gdb /bin/sleep` and run within GDB:

    ```bash
    (gdb) r 5m
    ```

3. When the crash happens, use commands like `backtrace`, `info registers`, and `disassemble` to analyze where the problem might be occurring.

### Conclusion:
While there is no clear-cut way to reproduce this issue without more details, running `/bin/sleep 5m` in an environment as close as possible to the one where the crash originally happened could help identify if the same error occurs.","Based on the given information, the described issue involves a segmentation fault when running `/bin/sleep` with a duration argument (in this case, `5m`). However, the provided backtrace and other details do not indicate any obvious issues within the sleep command itself but rather suggest that there might be something peculiar about the environment or system libraries in use.

To reproduce the bug, one should ideally try to replicate the exact setup where the fault occurred, including:

1. **OS Version:** Check the Linux distribution version and kernel version used by the user reporting the issue.
2. **Architecture:** Verify if it was a 32-bit or 64-bit system since there might be compatibility issues related to architecture.
3. **Libc Version:** Find out the exact version of glibc (GNU C Library) that is being used, as different versions can have distinct behaviors and bugs.
4. **Environment Variables:** Check if any specific environment variables were set that could affect the behavior of `/bin/sleep` or its interaction with libraries.

A simple test case to start would be:

```bash
/bin/sleep 5m
```

If this command does not trigger a segmentation fault on your system, you should attempt to match as closely as possible the conditions present in the user's environment (such as installing the exact version of glibc used by them).

However, given that `/bin/sleep` is such a fundamental and well-tested utility, it's more likely that there could be an issue with a corrupted library or other system-specific anomaly. In such cases, reproducing the issue can be challenging without access to the original environment.

If you suspect this might be due to a corrupted library or file system issue:

1. **Check for File System Errors:** Run `fsck` on the relevant filesystems.
2. **Reinstall glibc:** If possible, reinstalling the GNU C Library may resolve any corruption issues.

Without more specific details about the environment, reproducing the bug exactly might not be feasible. However, starting with running `/bin/sleep 5m` and checking for system inconsistencies is a good place to begin.",,
,,,,,,,,,,,,,,,,su -,"su -
# Enter root password when prompted

None

The provided steps indicate that simply running `su -` and entering the root password should be sufficient to reproduce the issue where the correct password is rejected. However, there are no specific details about setting up a particular environment or condition beyond the described scenario, which makes it clear but not expandable into more detailed test cases based on the given information.",su -,,
,,,,,,,,,,,,,,,,sleep 99,"None

The provided information does not contain a specific command or test case that can be used to reproduce the bug described in the report. The reported issue seems to be related to the `sleep` program being killed by SIGABRT, but there is no clear indication of what causes this behavior under normal operation, and no reproducible steps are given.",None,,
,,,,,,,,,,,,,,,,mv XML-Feed/ XML-Feed.old,"None

The provided steps in ""How to reproduce"" do not match the original issue described (which involves moving directories named `XML-Feed/` and `XML-Feed.old`). The mismatch suggests that these reproduction steps might not be applicable or accurate for the reported segmentation fault involving directory operations. Therefore, a specific command or test case that reproduces the exact bug based on the provided information is not available.",mv XML-Feed/ XML-Feed.old,,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,"```
dircolors -p | grep rxvt-unicode-256color
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,df,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file
mkdir t
ln -s file t
ls -l t
ls -L t
```","touch file
mkdir t
ln -s -t t file  
ls -l t
ls -L t","```bash
touch file
mkdir t
ln -s -t t file
ls -l t
ls -L t
```",,
,,,,,,,,,,,,,,,,"```bash
cat largefile | dd ibs=100000 count=2 >output1
dd if=largefile | dd ibs=100000 count=2 >output2
```","cat largefile | dd ibs=100000 count=2 >output1

dd if=largefile | dd ibs=100000 count=2 >output2","```bash
cat largefile | dd ibs=100000 count=2 >output1
dd if=largefile | dd ibs=100000 count=2 >output2
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sort file | less,None,sort file | less,,
,,,,,,,,,,,,,,,,"```bash
su - --command=""/path/to/gedit-beesu-plugin gedit-beesu-plugin /usr/bin/gedit gedit /tmp/foo""
```
Note: Replace `/path/to/gedit-beesu-plugin` with the actual path to the compiled binary.

Also, ensure that:
- The `gedit-beesu-plugin` binary is compiled and executable.
- A file `/tmp/foo` exists before running the command.
- The system is Fedora 14 (x86_64) for reproducing the bug. 

For comparison, the same command can be run on Fedora 13 (x86_64) to see the expected behavior.","None

The provided bug report does not describe a straightforward command or test case that can be used independently of the specific environment and conditions (such as having the `gedit-beesu-plugin` binary compiled from the attached .c file) to reproduce the issue with coreutils' `su`. The reproduction steps are tied specifically to this plugin's behavior across different Fedora releases, which would require the exact setup described in the bug report.","su - --command=""/home/spot/gedit-beesu-plugin gedit-beesu-plugin /usr/bin/gedit gedit /tmp/foo""",,
,,,,,,,,,,,,,,,,"```bash
touch somefile
md5sum -b somefile > somefile.md5
md5sum -c somefile.md5
unix2dos somefile.md5
md5sum -c somefile.md5
```",touch somefile && md5sum -b somefile > somefile.md5 && unix2dos somefile.md5 && md5sum -c somefile.md5,"```bash
touch somefile
md5sum -b somefile > somefile.md5
unix2dos somefile.md5
md5sum -c somefile.md5
```",,
,,,,,,,,,,,,,,,,"```bash
service groonga status
service groonga start
```","None

The provided Bug Description does not contain a specific command or test case that can be used to reproduce the bug directly related to coreutils. The issue seems to be more related to the service management and Groonga service initialization rather than any direct use of coreutils tools like `ls`, `cp`, etc.","service groonga status  
service groonga start",,
,,,,,,,,,,,,,,,,"```bash
runuser dwalsh
```",None,None,,
,,,,,,,,,,,,,,,,"```
sort --version
```","None

The provided information does not specify a particular input or context that causes the crash beyond running `sort --version`. Since `--version` typically shouldn't trigger an assertion failure and there's no mention of specific files or inputs causing the problem, we cannot derive a precise command or test case from this report alone to reproduce the bug.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir tests
cd tests
cat > file1
contents of file 1
^C
ln -s file1 symlink1
sleep 120 # wait for 2 minutes
cp -Pp file1 file1c
cp -Pp symlink1 symlink1c
ls -l
```","mkdir tests && cd tests && echo ""contents of file 1"" > file1 && ln -s file1 symlink1 && sleep 120 && cp -Pp file1 file1c && cp -Pp symlink1 symlink1c && ls -l","```bash
mkdir tests && cd tests
echo ""contents of file 1"" > file1
ln -s file1 symlink1
ls -l
sleep 120
cp -Pp file1 file1c
cp -Pp symlink1 symlink1c
ls -l
```",,
,,,,,,,,,,,,,,,,date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',date '+%B%e-cancer.mp3' | tr '[:upper:] ' '[:lower:]',,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 99,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,expr 0 + 1,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""aaaa.1\naaa.1"" | sort -V
```","sort -V
aaa.1
aaaa.1
^D","echo -e ""aaa.1\naaaa.1"" | sort -V",,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=fr_FR locale abmon | tr ';' '\n' | LC_ALL=en_US.utf8 sort -M
```",None,LC_ALL=fr_FR locale abmon | tr ';' '\n' | LC_ALL=en_US.utf8 sort -M,,
,,,,,,,,,,,,,,,,sleep 1000,None,None,,
,,,,,,,,,,,,,,,,ls --color=auto -l,"None

The provided bug report does not specify a reproducible set of steps or commands beyond the initial crash information with the `ls` command. Without additional details on how to reliably trigger the segmentation fault (`SIGSEGV`) again, we cannot provide a specific test case or command for reproducing this bug.",None,,
,,,,,,,,,,,,,,,,"readlink -m /path/to/Pike-v7.8.352-1.fc13.i386/usr/pike78 

(Note: Replace ""/path/to/"" with the actual path where Pike is installed)",None,None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, you would need to follow these steps:

1. Ensure a tmpfs filesystem is listed in `/etc/fstab`, for example:
   ```
   tmpfs  /tmp  tmpfs  defaults  0 0
   ```

2. Have a separate `/usr` filesystem listed after the tmpfs entry in `/etc/fstab`.

3. Reboot the system (single-user mode will suffice) and observe the error messages on the system console or in `/var/log/boot.log`. 

However, to specifically test this scenario without altering an actual system's configuration, you could simulate the environment using chroot or a virtual machine setup with the specified conditions:

1. Set up a tmpfs filesystem in `/etc/fstab` within your test environment.
2. Ensure `/usr` is on a separate filesystem that gets mounted after the tmpfs filesystem during boot.
3. Reboot and check for error messages related to `id: command not found` or similar, indicating the issue with `/sbin/mount.tmpfs` accessing `id` before `/usr` is mounted.

Since this involves system configuration and rebooting, there isn't a simple one-line command to reproduce it without altering system settings. The test case involves setting up specific conditions in `/etc/fstab` and then observing the behavior upon rebooting. 

Given the complexity of reproducing this bug which requires modifying system configurations and rebooting, a direct command or simple test case isn't feasible without altering system settings. However, the steps to reproduce involve:

- Modifying `/etc/fstab` as described.
- Rebooting and observing error messages.

Thus, while there's no single ""command"" to run for reproduction, the process involves these specific modifications and a reboot. 

For the purpose of this task, since we're looking for commands or test cases and given that the bug requires system-level changes and a reboot, it might seem like ""None"" could be an appropriate response if strictly interpreting the request for a command. However, considering the spirit of the question seems to aim towards understanding how one would approach reproducing such a bug, describing the steps as above is more informative. But adhering strictly to the requested format without further elaboration:

None","None

The provided bug report describes a scenario where error messages are emitted during the boot process when specific conditions in the /etc/fstab file are met. The issue arises due to the order of filesystem mounting and the unavailability of 'id' from `/usr/bin/id` at an early stage of the boot process.

Reproducing this exact behavior would require a test environment that involves modifying the /etc/fstab file, having separate mount points for tmpfs and /usr, and then initiating a system reboot. Since executing such commands could potentially affect the system configuration, the actual command or test case to reproduce is not directly executable through simple terminal inputs but rather requires setup as described in the ""Steps to Reproduce"" section of the bug report.

Therefore, based on the guidelines given, the answer is None since providing a single command to achieve this would be insufficient and potentially harmful without proper context and safety measures.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
export LANG=C
ls -l
export LANG=en_US.UTF-8
ls -l
```",export LANG=C; ls -l; export LANG=en_US.UTF-8; ls -l,"```bash
export LANG=C && ls -l && export LANG=en_US.UTF-8 && ls -l
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,cp --preserve=xattr aaa.txt bbb.txt,None,None,,
,,,,,,,,,,,,,,,,cut -d [ -s -f 2,"None

The provided information suggests that a crash occurred when running a specific `cut` command, but it does not explicitly provide an exact input or context necessary for reproducing the issue reliably. The command given is `cut -d [ -s -f 2`, which might be incomplete or require additional context like standard input content to fully reproduce the segmentation fault (SIGSEGV). Without specific details about what was fed into this command, it's not possible to give a precise and guaranteed way to reproduce the bug.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sleep 10000,"None

The provided bug report does not contain a clear and specific command or test case that can be used to directly reproduce the issue. The reported crash is associated with running `sleep 10000`, but there are no additional details on any specific conditions or environment configurations required for reproducing it consistently.",sleep 10000,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
who -wu
```
Then, as user ""user_a"", run:
```bash
mesg n
```
And as root, set up the tty devices with the specified permissions and group ownership:
```bash
chmod 620 /dev/pts/0
chown root:root /dev/pts/0
chmod 620 /dev/pts/1
chown user_a:tty /dev/pts/1
chmod 620 /dev/pts/2
chown root:tty /dev/pts/2
```","None

The provided information describes the issue but does not explicitly state a straightforward command or test case to reproduce the exact bug scenario involving the `who` command's handling of group ownership for terminal devices and user message status (`mesg`). The scenario involves specific user permissions, terminal device setups, and possibly graphical login environments (GDM), which are not easily distilled into a single command without further context or setup instructions.",None,,
,,,,,,,,,,,,,,,,"```bash
/bin/mount.crypt; umount /usr; /bin/mount.crypt
```",None,None,,
,,,,,,,,,,,,,,,,"```
vfork_test.c:
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid = vfork();
    if (pid == 0) {
        // child process
        execl(""/bin/ls"", ""ls"", NULL);
    } else if (pid > 0) {
        // parent process
        wait(NULL);
    } else {
        // error
        perror(""vfork"");
        exit(1);
    }
    return 0;
}

Compile and run: 
gcc vfork_test.c -o vfork_test
./vfork_test
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=C ls -ld /
LC_ALL=en_US ls -ld /
LC_ALL=en_CA ls -ld /
LC_ALL=de_DE ls -ld /
LC_ALL=da_DK ls -ld /
```","LC_ALL=C ls -ld /
LC_ALL=en_US ls -ld /
LC_ALL=en_CA ls -ld /
LC_ALL=de_DE ls -ld /
LC_ALL=da_DK ls -ld /","LC_ALL=en_US ls -ld /
LC_ALL=C ls -ld /
LC_ALL=de_DE ls -ld /
LC_ALL=da_DK ls -ld /",,
,,,,,,,,,,,,,,,,sleep 1260,None,None,,
,,,,,,,,,,,,,,,,chcon --reference=/etc/cups/ppd/S600.ppd /etc/cups/ppd/S600.ppd.new,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,sha256sum Fedora-13-Alpha-x86_64-DVD.iso,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
su - <old_username>
```","None

The provided Bugzilla entry does not contain specific commands or a detailed test case to reproduce the issue. The steps are incomplete and do not provide enough detail (e.g., missing Step 2 and 3) for someone else to replicate the exact scenario described. Therefore, based on the information given, it is not possible to determine an exact command or test case to reproduce the bug.",None,,
,,,,,,,,,,,,,,,,"```bash
dd if=/dev/zero count=1 of=/dev/null 2>/dev/null
dd if=/dev/zerooooo count=1 of=/dev/null 2>/dev/null
```","None

The provided steps do not describe a specific bug in coreutils `dd` command related to its functionality but rather suggest an enhancement request for a `--quiet` option. The steps listed are demonstrating different ways to suppress output using redirection, and they don't highlight any malfunction or unexpected behavior of the `dd` command under normal operations or due to an actual bug in its codebase. Therefore, based on the provided information, there is no specific bug to reproduce with a given command or test case.",None,,
,,,,,,,,,,,,,,,,"```bash
./configure --without-selinux && make && make check
```","None

The provided Bug Description does not include a specific command or test case that can be directly executed to reproduce the described issue. The steps to reproduce involve building coreutils without a certain configure option and observing failing tests due to an unhandled error in the `require_selinux_` function, but these are high-level instructions rather than executable commands or test cases.",None,,
,,,,,,,,,,,,,,,,"```
expr 4951760154835678088235319297 + 0
```","None

The provided Bug Description indicates that the issue arises from missing dependencies (`gmp-devel` and `gmp`) leading to limitations in handling large numbers with coreutils >= 7.0. The example given uses the `expr` command, but this example is more about demonstrating the limitation rather than providing a test case that directly reproduces a bug within coreutils itself. Since there's no specific coreutils command provided (like one involving `bc`, `numfmt`, etc.) and the issue seems to be related to missing dependencies rather than an actionable command or input, the appropriate response is ""None"".","```bash
expr 4951760154835678088235319297 + 0
```",,
,,,,,,,,,,,,,,,,dd ibs=0x100,dd ibs=0x100,dd ibs=0x100,,
,,,,,,,,,,,,,,,,`tail -F 2009_12_14.stderrout.log`,tail -F 2009_12_14.stderrout.log,None,,
,,,,,,,,,,,,,,,,_POSIX2_VERSION=199209 sort +0.1 /etc/passwd; info sort | grep _POSIX2_VERSION,"None

The provided Bug Description focuses on the lack of documentation for the `_POSIX2_VERSION` environment variable rather than a functional bug in coreutils. The steps to reproduce highlight that while the functionality works as expected (command 1), the issue is with the missing documentation (command 2). Since this is more about missing information in the `info` pages, there isn't a specific command or test case needed beyond checking the documentation which doesnât constitute a typical software bug.","```bash
info sort | grep _POSIX2_VERSION
```",,
,,,,,,,,,,,,,,,,"To reproduce the bug, we need to execute a series of commands that mimic the environment and steps taken in the provided log. Here's a simplified version of how you might approach reproducing this issue:

### Step 1: Create a Test Filesystem Image

First, create a file that will serve as the image for your test filesystem. This can be done using `dd` to create a 200-block file filled with zeros.

```bash
dd if=/dev/zero of=blob bs=8192 count=200
```

### Step 2: Format the Filesystem Image

Format this blob file into an ext2 filesystem, which is what was used in the original test.

```bash
mkfs -t ext2 -F blob
```

### Step 3: Mount the Filesystem

Mount the formatted blob file to a directory (e.g., `mnt`) using a loopback device. Ensure that you have appropriate permissions and that the `mnt` directory exists before running this command.

```bash
mkdir mnt
mount -oloop,nouser_xattr blob mnt
```

### Step 4: Attempt to Set Extended Attributes

Inside the mounted filesystem, attempt to set an extended attribute (`user.foo`) on a file. First, create a test file:

```bash
echo ""test"" > mnt/testfile
```

Then, try setting the extended attribute:

```bash
setfattr -n user.foo -v bar mnt/testfile
```

If your system does not support extended attributes (xattrs) on this filesystem type or configuration, you should encounter an error similar to `Operation not supported`.

### Step 5: Verify the Error

The expected behavior is that setting the xattr fails due to lack of support. You can verify this by checking for the presence of the attribute:

```bash
getfattr -d mnt/testfile
```

If the attribute was not set, you'll see no output or an indication that the attribute does not exist.

### Step 6: Cleanup

After testing, unmount and remove the temporary filesystem image to clean up:

```bash
umount mnt
rm blob
rmdir mnt
```

This process should reproduce the conditions under which the bug was encountered. The key steps involve creating a file system that does not support xattrs (in this case, by mounting with `-nouser_xattr`), attempting to set an xattr on a file within this filesystem, and observing the failure due to lack of support.","To reproduce the issue described in the bug report, you need to run a specific set of commands that emulate the test environment and operations being performed by the `cp/cp-mv-enotsup-xattr` script.

### Steps to Reproduce:

1. **Create a Test Directory:**
   ```sh
   mkdir -p /tmp/testdir && cd /tmp/testdir
   ```

2. **Generate a Small Filesystem Image (`blob`) and Mount It:**
   ```sh
   dd if=/dev/zero of=blob bs=8192 count=200
   mkdir mnt
   sudo mkfs -t ext2 -F blob
   sudo mount -oloop,nouser_xattr blob mnt
   ```

3. **Set Extended Attributes (xattrs):**
   The error occurs when setting an extended attribute on a file:
   ```sh
   touch a
   sudo setfattr -n user.foo -v bar a
   ```

### Expected Behavior:

- If the filesystem supports extended attributes, `setfattr` should succeed without errors.

### Observed Behavior:

- The error message indicates that the `setfattr` command fails with ""Operation not supported,"" suggesting that the mounted filesystem does not support setting extended attributes (xattrs).

### Notes on Commands Used in the Test Case:
1. **File Creation and Mounting:**
   - `dd if=/dev/zero of=blob bs=8192 count=200`: Creates a file named `blob` with 200 blocks, each block size being 8KB.
   - `mkfs -t ext2 -F blob`: Creates an ext2 filesystem on the file `blob`.
   - `mount -oloop,nouser_xattr blob mnt`: Mounts the file system image in loopback mode and disables user-defined extended attributes (`nouser_xattr`).

2. **Extended Attribute Test:**
   - `setfattr -n user.foo -v bar a`: Attempts to set an extended attribute named `user.foo` with value `bar` on the file `a`.

### Conclusion:

The test fails due to the ext2 filesystem mounted with `nouser_xattr`, which does not support setting extended attributes. To reproduce this issue, you need to create and mount a filesystem image (e.g., ext2) with `nouser_xattr` and attempt to set an xattr on it.

### Additional Information:
- **Environment Setup:** Ensure you have root/sudo access as the commands require elevated privileges.
- **Filesystem Type:** The issue can be specific to certain file systems. Ext2 does not support extended attributes by default, which could lead to this behavior.

By running these steps in a similar environment (e.g., Linux system with `ext2` filesystem capabilities), you should observe the same failure when setting xattrs due to the `nouser_xattr` option.","Based on the provided log output, you can reproduce the issue using the following sequence of commands:

1. **Create a zero-filled file**: This serves as the virtual disk image for the filesystem.
   ```bash
   dd if=/dev/zero of=blob bs=8192 count=200
   ```

2. **Create an ext2 filesystem on the zero-filled file**:
   ```bash
   mkfs -t ext2 -F blob
   ```

3. **Mount the virtual disk image with `nouser_xattr` option**: This option disables support for extended attributes.
   ```bash
   mkdir mnt
   mount -oloop,nouser_xattr blob mnt
   ```

4. **Attempt to set an extended attribute on a file within the mounted filesystem**:
   ```bash
   touch mnt/f
   xattr_name=user.foo
   xattr_value=bar
   setfattr -n $xattr_name -v $xattr_value mnt/f
   ```

5. **Check if `setfattr` fails as expected**: The test will fail with an ""Operation not supported"" error because of the `nouser_xattr` option.
   
6. **Unmount the filesystem and clean up**:
   ```bash
   umount mnt
   rm -rf blob mnt
   ```

The critical steps for reproducing the bug are mounting the ext2 filesystem with the `nouser_xattr` option and then attempting to set an extended attribute on a file within that mounted filesystem. The error message ""Operation not supported"" indicates that the operation cannot be performed because user extended attributes are disabled.

Here's a consolidated script combining all these commands:

```bash
#!/bin/bash

# Create a zero-filled file (200 blocks of 8192 bytes each)
dd if=/dev/zero of=blob bs=8192 count=200

# Create an ext2 filesystem on the zero-filled file
mkfs -t ext2 -F blob

# Mount the virtual disk image with nouser_xattr option
mkdir mnt
mount -oloop,nouser_xattr blob mnt

# Attempt to set an extended attribute
touch mnt/f
xattr_name=user.foo
xattr_value=bar
setfattr -n $xattr_name -v $xattr_value mnt/f 2> err.log

# Check if the operation was not supported
if grep -q ""Operation not supported"" err.log; then
    echo ""Test passed: Operation not supported""
else
    echo ""Test failed: Expected 'Operation not supported'""
fi

# Clean up
umount mnt
rm -rf blob mnt err.log
```

Running this script should reproduce the behavior described in the bug report.",,
,,,,,,,,,,,,,,,,"```bash
mv /home/myphotos /mnt/vfat-usbstick
```
or more generally:
```bash
mv source_dir target_fs_mount_point
```
where `target_fs_mount_point` is a mount point of a filesystem that does not support xattrs or selinux, such as vfat, cifs, or nfs. 

For example, to reproduce the bug with a minimal test case:

1. Create a file with an xattr:
```bash
touch testfile
setfattr -n user.test_attr -v test_value testfile
```
2. Mount a filesystem that does not support xattrs (e.g., vfat):
```bash
mkdir /mnt/test
mount -t vfat /dev/sdb1 /mnt/test
```
3. Attempt to move the file with xattr to the mounted filesystem:
```bash
mv testfile /mnt/test/
```
This should trigger the bug and produce the noisy output.","mv newdir/ mnt/

# To fully reproduce, ensure that `mnt` is mounted on a filesystem that does not support xattrs, such as vfat.",mv /home/myphotos /mnt/vfat-usbstick,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"To reproduce the bug described, follow these steps:

### Test Case 1: Reproducing the Bug with Bash Shell

1. **Create a file**: Open a terminal and create a new file named `oops` in your current directory:
   ```bash
   touch oops
   ```
2. **List files with long format**: Run `ls -l` to list files in the current directory, including their details:
   ```bash
   ls -l
   ```
3. **Copy a line from the output**: Copy a line that resembles the following (adjust for your actual file and user):
   ```
   -rw-rw-r-- 1 user user 0 Nov  3 16:42 oops
   ```
4. **Paste into terminal and add redirection operator**: Paste the copied line into the terminal, append `> /data/chunks1/db/oops` (adjust the path as necessary), and press Enter:
   ```bash
   -rw-rw-r-- 1 user user 0 Nov 3 16:42 oops > /path/to/your/file
   ```
5. **Verify file size**: After running the command, check if the size of your `oops` file has changed to zero (indicating it's been truncated), using:
   ```bash
   ls -l
   ```

### Test Case 2: Protection with Noclobber

1. **Enable noclobber in bash shell**: To prevent accidental file overwriting, add the following line to your `~/.bashrc` or `/etc/bashrc` (for global application) and restart your terminal:
   ```bash
   set -o noclobber
   ```
2. **Attempt to reproduce the bug with noclobber enabled**:
   Follow steps from Test Case 1. With `noclobber` enabled, when you try to redirect output into an existing file, bash should prevent it, appending a warning message instead of executing the redirection.

### Expected Behavior

- Without `noclobber`, pasting and running a command that inadvertently includes a redirection operator (`>`) should truncate the target file.
- With `noclobber` enabled, attempting to run such a command should result in an error or warning from bash, preventing the file truncation.

**Note**: These steps are designed based on the provided bug description. Adjust paths and filenames as necessary for your specific environment and testing needs.","To effectively reproduce and document the described issue involving the output of `ls -l` being mistakenly pasted into a terminal leading to file truncation or corruption due to the presence of the `>` character, we need to create clear steps that illustrate this behavior.

### Steps to Reproduce:

1. **Create Test Files:**
   First, you'll want to create some test files to use in your tests.
   ```bash
   touch file1.txt file2.txt
   echo ""Original content"" > file1.txt
   ```

2. **List Files with `ls -l`:**
   Run the `ls -l` command to list the details of these files, including their permissions and sizes.
   ```bash
   ls -l
   ```
   This might produce an output similar to:
   ```
   -rw-r--r-- 1 user group    0 Nov  3 16:42 file1.txt
   -rw-r--r-- 1 user group    0 Nov  3 16:42 file2.txt
   ```

3. **Copy-Paste the Output into Terminal:**
   The core issue is that if you accidentally copy and paste this output, including the `>` character in a symbolic link or other context, it can lead to unintended redirection.
   
   Copy the line:
   ```
   -rw-r--r-- 1 user group    0 Nov  3 16:42 file1.txt
   ```

   And paste it into your terminal:
   ```bash
   -rw-r--r-- 1 user group    0 Nov  3 16:42 file1.txt
   ```
   
   If you accidentally copy and paste the entire `ls -l` output with a line containing a symbolic link that uses `>`, it can lead to truncation. For example, if there is a symbolic link in your directory:
   ```bash
   ln -s /path/to/some/file > link.txt
   ```

4. **Observe the Results:**
   After pasting and executing such commands, you should observe that `file1.txt` or any other file being used as part of the redirection gets truncated to an empty state.
   
   ```bash
   ls -l file1.txt
   ```
   The output now shows:
   ```
   -rw-r--r-- 1 user group    0 Nov  3 16:42 file1.txt
   ```

### Expected Behavior vs. Actual Behavior:

- **Expected Behavior:** Copying the `ls` output should not result in any unintended side effects when pasted into a terminal.
  
- **Actual Behavior:** Pasting the `ls -l` output can lead to unintended redirection and truncation of files due to the presence of the `>` character.

### Conclusion:

This test case clearly demonstrates how the output from `ls -l` containing potentially dangerous characters like `>` can be mistakenly pasted into a terminal, leading to file corruption or truncation. This reproduces the issue as described in the bug report and highlights why using noclobber protection might be beneficial for system administrators.

### Additional Considerations:

- **Noclobber Protection:** To prevent this kind of error, you could set `noclobber` in `/etc/bashrc` (for Bash) or an equivalent setting in other shells.
  ```bash
  shopt -s noclobber
  ```
  
- **Alternative Representation:** If the upstream developers consider changing the output to use a non-destructive character that visually resembles `>`, this could mitigate the risk of accidental damage.

By documenting these steps and their outcomes, you can clearly illustrate the issue to both Red Hat support and the Fedora community for further discussion.","To reproduce the issue described in the bug report, you need to simulate the scenario where someone copies and pastes an `ls -l` output line into their terminal shell, inadvertently causing a file truncation due to the presence of the '>' character.

### Test Case Steps:

1. **Create Sample Files:**
   First, create some sample files that will be listed by `ls -l`.
   
   ```bash
   mkdir testdir
   cd testdir
   touch file1.txt file2.txt file3.txt
   ```

2. **List Files with Detailed Information:**
   Use the `ls -l` command to list the files in detail.
   
   ```bash
   ls -l
   ```
   
   The output should look something like this:
   ```
   total 0
   -rw-r--r-- 1 user group 0 Nov  3 16:29 file1.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:29 file2.txt
   -rw-r--r-- 1 user group 0 Nov  3 16:29 file3.txt
   ```

3. **Simulate Copy-Pasting with Output Redirection:**
   Suppose a user copies the line for `file1.txt` and accidentally pastes it into their terminal, including the '>' character:
   
   ```bash
   -rw-r--r-- 1 user group 0 Nov  3 16:29 file1.txt > file2.txt
   ```

4. **Check the Contents of `file2.txt`:**
   After executing the above command, check the contents and size of `file2.txt` to see if it was truncated or damaged.
   
   ```bash
   cat file2.txt
   ls -l file2.txt
   ```
   
   The expected result is that `file2.txt` has been truncated to 0 bytes.

### Expected Outcome:
- `file2.txt` should be empty (size 0) after the command execution, indicating that its contents have been overwritten or truncated due to the `>` redirection operator being copied and pasted with the `ls -l` output.

### Additional Notes:
- This issue is not specific to any particular shell. It can occur in `bash`, `tcsh`, `ksh`, etc.
- The problem arises when a user inadvertently copies and pastes an `ls -l` line, including the '>' character, into their terminal command prompt.
- Using `set -o noclobber` can prevent this issue but may impact scripts that rely on redirection.

### Conclusion:
This test case simulates the conditions under which the described bug occurs. It highlights the need for a non-destructive representation of redirection operators in the output of commands like `ls -l`.",,
,,,,,,,,,,,,,,,,su -,"None

The issue described is related to the delay when using the `su` command, which is not part of coreutils but rather a component managed by another package (usually ""util-linux"" or ""shadow-utils""). The provided steps do not specify any commands from the Linux coreutils package that could reproduce this specific behavior. Thus, no exact command(s) or test case(s) within the scope of coreutils can be determined to reproduce this bug based on the given information.",su -,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch he\'ll
rm -i he\'ll
```","touch he\'ll
rm -i he\'ll",touch he\'ll && rm -i he\'ll,,
,,,,,,,,,,,,,,,,"```bash
for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done
```","for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done","```bash
for l in en_US.UTF-8 en_US.utf8 en_US.iso88591 en_US.ISO-8859-1 C; do
  echo ""-------------------------------------------------------------------------------------------------""
  echo ""LANG=$l""
  export LANG=$l
  sort -o all-primary.csv all-primary.csv
  sort -o db-primary.csv db-primary.csv
  join -v 1 all-primary.csv db-primary.csv
done
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir ls_73_dir
mkdir ls_73_dir/ls_73_dir2
ln -s ../ls_73_dir ls_73_dir/ls_73_dir2/ls_73_link
ls -RL ls_73_dir
echo $?
```","mkdir $PWD/ls_73_dir
mkdir $PWD/ls_73_dir/ls_73_dir2
ln -s $PWD/ls_73_dir $PWD/ls_73_dir/ls_73_dir2/ls_73_link
ls -RL ls_73_dir","mkdir ls_73_dir  
mkdir ls_73_dir/ls_73_dir2  
ln -s $(pwd)/ls_73_dir ls_73_dir/ls_73_dir2/ls_73_link  
ls -RL ls_73_dir",,
,,,,,,,,,,,,,,,,"```bash
mock -r fedora-10-x86_64 --init
```","None

The provided bug description does not specify exact command(s) or a test case that can be used to directly reproduce the issue. It describes the context and suggests a code modification but lacks the precise steps needed for reproduction.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir A
chmod 777 A
ln -s nonexistingfile A/xxx
ls -RLi A 2> /dev/null
rm -rf A
```","mkdir A
chmod 777 A
ln -s nonexistingfile A/xxx
ls -RLi A 2> /dev/null
rm -rf A",mkdir A && chmod 777 A && ln -s nonexistingfile A/xxx && ls -RLi A 2> /dev/null && rm -rf A,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,ls -lZ ./custom-policy/modules/active/base.pp; ls -Zl ./custom-policy/modules/active/base.pp,"ls -lZ ./custom-policy/modules/active/base.pp  
ls -Zl ./custom-policy/modules/active/base.pp","ls -lZ ./custom-policy/modules/active/base.pp  
ls -Zl ./custom-policy/modules/active/base.pp",,
,,,,,,,,,,,,,,,,"```bash
LC_TIME=fr_FR.UTF-8 ls -l
LC_TIME=fr_BE.UTF-8 ls -l
```",None,"```bash
LC_TIME=fr_FR.UTF-8 ls -l /path/to/directory/with/months
```",,
,,,,,,,,,,,,,,,,who; who -m; who --lookup; who -m --lookup,"who
who -m",who -m,,
,,,,,,,,,,,,,,,,"```bash
line='**';env echo $line
```",line='**';env echo $line,line='**';env echo $line,,
,,,,,,,,,,,,,,,,"```bash
tar xf source.tar.bz2; cd sources; ./configure --prefix=/opt/wine && make depend && time make install
```","None

The provided steps are specific to building and installing Wine with SELinux enabled/disabled to observe differences in performance related to the use of `install` from coreutils. They do not directly provide a simple command or isolated test case for reproducing the issue specifically related to the coreutils `install` command's behavior under SELinux. Therefore, based on the information given, there isn't an exact and isolated command or test case available to reproduce the bug solely concerning coreutils' `install`.",time make install,,
,,,,,,,,,,,,,,,,rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586,"rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586  

or:

%packages --excludedocs in kickstart

or:

enable %_excludedocs macro in RPM",rpm -ihv --excludedocs coreutils-7.2-1.fc11.i586,,
,,,,,,,,,,,,,,,,"```bash
echo ""narf.10"" > file1.txt
echo ""narf.9"" >> file1.txt
LC_ALL=en_US.UTF-8 sort --version-sort file1.txt
```","{ echo ""narf.9""; echo ""narf.10""; } | sort --version-sort","```bash
{ echo ""narf.9""; echo ""narf.10""; } | LC_ALL=ja_JP.UTF-8 sort --version-sort
```",,
,,,,,,,,,,,,,,,,man du,None,man du,,
,,,,,,,,,,,,,,,,"```bash
mkdir -m 755 -p foo/bar; ls -ld foo foo/bar
```",umask 0077; rm -rf foo; mkdir -m 755 -p foo/bar; ls -ld foo foo/bar,"mkdir -m 755 -p foo/bar
ls -ld foo foo/bar",,
,,,,,,,,,,,,,,,,uname -i,uname -i,uname -i,,
,,,,,,,,,,,,,,,,"```bash
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key 1.2,1.4M
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort --key 1.2b,1.4M
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort --key 1.2,1.4bM
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort -b --key 2.2,2.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort --key 2.2b,2.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort --key 2.3,2.5M
```","```
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key 1.2,1.4M
printf -- 'a -Jan-\na -Mar-\na -Feb-\n' | sort -b --key 2.2,2.4M
```","```bash
printf -- '-Jan-\n -Mar-\n  -Feb-\n' | sort -b --key=1.2,1.4M
```",,
,,,,,,,,,,,,,,,,"```bash
setfacl -m u:user:r file
ls -l file
ls -Z file
```","setfacl -m u:user:r file  
ls -l file  
ls -Z file","```bash
setfacl -m u:user:r file && ls -l file && ls -Z file
```",,
,,,,,,,,,,,,,,,,"```bash
su - lace
install -o root -g root -m 4755 /bin/true /tmp/test-true
ls -l /tmp/test-true
```","su - lace  
install -o root -g root -m 4755 /bin/true /tmp/test-true  
ls -l /tmp/test-true","```
install -o root -g root -m 4755 /bin/true /tmp/test-true
ls -l /tmp/test-true
```",,
,,,,,,,,,,,,,,,,"```bash
date
uname -a
```",None,"```bash
uname -a
date
```",,
,,,,,,,,,,,,,,,,"```bash
cp --preserve=xattrs file1 file2; getfattr -d file1; getfattr -d file2
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a=x .. && { /bin/pwd; readlink -ev .; }
```",cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a=x .. && { /bin/pwd; readlink -ev .; },"```bash
cd $TMPDIR && mkdir dir1 && cd dir1 && mkdir dir2 && cd dir2 && chmod a=x .. && { /bin/pwd; readlink -ev .; }
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,expr -05 \* 60 \* 60,expr -05 \* 60 \* 60,expr -05 \* 60 \* 60,,
,,,,,,,,,,,,,,,,"```bash
yum install coreutils-6.12-17.fc10.x86_64 --replacefiles
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ssh -X user@host
su
```
Enter correct password when prompted. 

Note: Replace ""user"" and ""host"" with actual username and hostname.","login as user via X or ssh  
su  
enter correct password","```
su
```",,
,,,,,,,,,,,,,,,,"```bash
dd if=/dev/zero of=/tmp/tmpdata bs=1M count=6
echo ""6291456/1024/1024""|bc -l
```",dd if=/dev/zero of=/tmp/tmpdata bs=1M count=6,None,,
,,,,,,,,,,,,,,,,make tag && make build for coreutils package,None,None,,
,,,,,,,,,,,,,,,,runcon --no-reorder /bin/true,None,None,,
,,,,,,,,,,,,,,,,"```bash
tcsh -c 'source /etc/profile.d/colorls.csh'; tcsh -c 'tput'
```","None

The provided description indicates an issue with missing dependencies for `tput` in certain shell configurations, specifically affecting `/etc/profile.d/colorls.{sh,csh}` when used with tcsh on a default F10 installation. However, it does not provide specific commands or test cases to reproduce the bug itself. The problem seems more related to package management and system configuration rather than a direct command failure in coreutils.",None,,
,,,,,,,,,,,,,,,,"```bash
strace /bin/ls --color=auto --sort=version -F -T 0 -ABFbhs /path/to/large/directory
```
Replace `/path/to/large/directory` with an actual large directory on your system. 

Also, to observe the slowness from a ""cold cache POV"", you may want to clear the cache before running the command:
```bash
sync; echo 3 | sudo tee /proc/sys/vm/drop_caches; strace /bin/ls --color=auto --sort=version -F -T 0 -ABFbhs /path/to/large/directory
```","/bin/ls --color=auto --sort=version -F -T 0 -ABFbhs /path/to/large-ish/directory

Replace `/path/to/large-ish/directory` with the actual path to a large directory on your system to test the behavior described in the bug report.",/bin/ls --color=auto --sort=version -F -T 0 -ABFbhs /path/to/large-directory,,
,,,,,,,,,,,,,,,,"```bash
ln -s /newhome/users /users
ls /
```","None

The provided steps are descriptive and outline the scenario but do not form specific command sequences that can be directly executed to reproduce the issue in a controlled environment. The scenario involves complex interactions with NFS mounts, NIS server configurations, and autofs behavior which cannot be simply reproduced via command-line inputs alone without setting up the entire infrastructure as described.","```bash
ln -s /newhome/users /users
ls /
```",,
,,,,,,,,,,,,,,,,"```bash
ls no_dir; echo $?
```","ls no_dir
echo $?","```
ls no_dir && echo $?
```",,
,,,,,,,,,,,,,,,,seq -0.01 0.1 1,seq -0.01 0.1 1,seq -0.01 0.1 1,,
,,,,,,,,,,,,,,,,"```bash
ldd /bin/mv | grep attr
```","None

The provided bug description indicates an issue with missing dependencies when using the `mv` command during package installation but does not provide explicit steps or commands that can be executed independently to reproduce the described behavior in a typical Linux environment. The problem seems specific to the context of package installation and dependency resolution, which cannot be directly translated into a standalone command or test case without additional context about the package creation and installation process being used.",None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""\u0c4d;TELUGU SIGN VIRAMA\n\u0c3f;TELUGU VOWEL SIGN I"" > input.file
uniq input.file
```",None,"```bash
echo -e ""0C4D;TELUGU SIGN VIRAMA\n0C3F;TELUGU VOWEL SIGN I"" > input.file
uniq input.file
```",,
,,,,,,,,,,,,,,,,"```bash
LS_COLORS=""no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:do=00;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=00;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.svgz=00;31:*.arj=00;31:*.taz=00;31:*.lzh=00;31:*.lzma=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.dz=00;31:*.gz=00;31:*.bz2=00;31:*.tbz2=00;31:*.bz=00;31:*.tz=00;31:*.deb=00;31:*.rpm=00;31:*.jar=00;31:*.rar=00;31:*.ace=00;31:*.zoo=00;31:*.cpio=00;31:*.7z=00;31:*.rz=00;31:*.jpg=00;35:*.jpeg=00;35:*.gif=00;35:*.bmp=00;35:*.pbm=00;35:*.pgm=00;35:*.ppm=00;35:*.tga=00;35:*.xbm=00;35:*.xpm=00;35:*.tif=00;35:*.tiff=00;35:*.png=00;35:*.mng=00;35:*.pcx=00;35:*.mov=00;35:*.mpg=00;35:*.mpeg=00;35:*.m2v=00;35:*.mkv=00;35:*.ogm=00;35:*.mp4=00;35:*.m4v=00;35:*.mp4v=00;35:*.vob=00;35:*.qt=00;35:*.nuv=00;35:*.wmv=00;35:*.asf=00;35:*.rm=00;35:*.rmvb=00;35:*.flc=00;35:*.avi=00;35:*.fli=00;35:*.gl=00;35:*.dl=00;35:*.xcf=00;35:*.xwd=00;35:*.yuv=00;35:*.svg=00;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:"" ls --color=auto -l
```",\ls --color=auto -l --context,\ls --color=auto -l --context,,
,,,,,,,,,,,,,,,,"```bash
stat /sbin/runuser
stat /usr/bin/runuser
sha1sum /sbin/runuser /usr/bin/runuser
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
chsh -s /bin/tcsh
logout
gnome-terminal
xterm
```","None

The provided information outlines steps for reproducing the issue but does not provide a specific command that can be run in a terminal to directly demonstrate the problem with just running it. The reproduction involves changing shell settings and environment files, which goes beyond a single or simple set of commands and requires multiple interactive steps.",None,,
,,,,,,,,,,,,,,,,"```
df -l; df --local
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
cp -ac foo bar
```",cp -ac foo bar,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p ~/test_dir
cd ~/test_dir
yum update coreutils
ln -s /etc/DIR_COLORS ~/.dir_colors
echo ""setenv COLORTERM linux"" >> ~/.cshrc
csh
```","None

The provided bug report indicates that the error occurs after updating coreutils and opening a shell, but it does not specify exact commands to reproduce the issue beyond these general steps. Therefore, no precise command or test case can be extracted from the given description for reproduction purposes.",None,,
,,,,,,,,,,,,,,,,"1. tcsh 
2. Verify that ~/.cshrc is not sourced by checking for a setting or command that should be executed from it.
3. Check for the ""Unknown colorls variable `ca'"" error message.",None,None,,
,,,,,,,,,,,,,,,,su,"su
# Enter password when prompted","su
(Enter password)",,
,,,,,,,,,,,,,,,,"```bash
useradd -m -s /bin/tcsh testuser
echo ""echo test"" > ~testuser/.cshrc
echo ""echo test"" > ~testuser/.login
su - testuser
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
setenv LS_COLORS 'ca=40;33'; ls --color
```","None

The provided steps in the bug report do not specify an exact command but rather a series of actions and conditions that lead to the problem. While it describes how to update coreutils and use GNOME terminal with tcsh as the login shell, it does not provide specific commands or test cases that can be executed directly to reproduce the issue.","To reproduce the bug, you can set up your `.cshrc` file with an `LS_COLORS` variable that includes the `ca` setting and then start a new shell session using `tcsh`. Here are the exact steps as a command:

1. Edit or add to your `.cshrc` file:
   ```bash
   echo ""setenv LS_COLORS 'ca=34:...'"" >> ~/.cshrc
   ```
   Replace `'ca=34:...'` with any other `LS_COLORS` values you might have, ensuring it includes `ca`.

2. Start a new tcsh shell session:
   ```bash
   tcsh
   ```

This should reproduce the issue as described in the bug report.",,
,,,,,,,,,,,,,,,,"```bash
setcap cap_net_bind_service=ep test.log
getcap test.log
ls --color test.log
```",None,"```bash
setcap cap_net_bind_service=ep test.log
getcap test.log
ls --color=always -l test.log
```

This sequence of commands sets a capability on `test.log`, checks it with `getcap`, and then lists the file with colorization enabled to see if it is colored like setuid programs.",,
,,,,,,,,,,,,,,,,"```bash
dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1
ls -l iso.iso
```","# dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1
# ls -l iso.iso","```bash
dd if=FC8_X64.ddread.iso of=iso.iso bs=3876407296 count=1
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir tmp
for num in $(seq 1000); do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/
```","mkdir tmp
for num in `seq 1000`; do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/","```bash
mkdir tmp
for num in $(seq 1000); do touch tmp/img$num.png; done
/usr/bin/install tmp/*.png /var/tmp/
```",,
,,,,,,,,,,,,,,,,"```bash
mv -v file /existing_file
cp file /existing_file
```",None,"```bash
mv -v i686-rh73-gcc32.tgz /Rar
cp INSTALL /Rar
```",,
,,,,,,,,,,,,,,,,"```bash
tail +5 file
```",tail +5 file,tail +5 file,,
,,,,,,,,,,,,,,,,"```bash
sudo chcon -t user_tmp_t -vR kdecache-* xdgcache-*
```",sudo chcon -t user_tmp_t -vR kdecache-* xdgcache-*,sudo chcon -t user_tmp_t -vR kdecache-* xdgcache-*,,
,,,,,,,,,,,,,,,,"1. yum install coreutils-6.12-5.fc10
2. useradd testuser
3. su - testuser
4. su","None

The provided steps are not specific to a command within coreutils but rather describe a scenario involving the `su` command's availability on a system. The issue seems to be related to the installation or configuration of the operating environment (`rawhide`) and does not directly pertain to a bug within the coreutils package itself, nor does it provide a direct command that could be used in an isolated test case to reproduce the problem with coreutils functions.",None,,
,,,,,,,,,,,,,,,,who -r,None,who -r,,
,,,,,,,,,,,,,,,,dd if=/dev/zero of=guest bs=1G count=14,"None

The provided description does not indicate a bug in the functionality of `dd`, but rather what appears to be a misunderstanding or misinterpretation of the output of the command. The reported information from `dd` indicates that 15GB was correctly copied as expected, and there is no deviation between the expected and actual behavior described. Therefore, based on this description, there isn't a reproducible bug or issue with `dd`.",None,,
,,,,,,,,,,,,,,,,"```bash
cd /var
ln -sf beta tmp/alpha
echo ""blah"" > tmp/alpha 
rm tmp/beta
echo ""blah"" > file
cp file tmp/alpha
```","cd /var && ln -sf beta tmp/alpha && echo ""blah"" > tmp/alpha && rm tmp/beta && echo ""blah"" > file && cp file tmp/alpha","```bash
cd /var
ln -sf beta tmp/alpha
echo ""blah"" > tmp/alpha
rm tmp/beta
echo ""blah"" > file
cp file tmp/alpha
```",,
,,,,,,,,,,,,,,,,ls -ZC,ls -ZC,ls -ZC,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
ls -l | tail
```","None

The provided Bugzilla report does not contain a complete set of steps to reproduce the issue. The steps provided are incomplete (missing step 2 and 3) and do not reflect the actual problem as described in the ""Description of problem"". The description suggests that piping `ls -l` output to `tail` causes an error, but this sequence is not listed under the ""Steps to Reproduce"" section. Therefore, based solely on the given information, there are no clear commands or test cases provided for reproducing the bug.",ls -l | tail,,
,,,,,,,,,,,,,,,,sha1sum -b Fedora-9-Beta-x86_64-DVD.iso,sha1sum -b Fedora-9-Beta-x86_64-DVD.iso,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir testdir
chmod 4770 testdir
ls -ld testdir
chmod 2770 testdir
ls -ld testdir
chmod 0770 testdir
ls -ld testdir
```","# mkdir testdir && cd testdir
# chmod 4770 .
# ls -ld .
# chmod 2770 .
# ls -ld .
# chmod 0770 .
# ls -ld .","```bash
chmod 4770 .
ls -ld .
chmod 2770 .
ls -ld .
chmod 0770 .
ls -ld .
```",,
,,,,,,,,,,,,,,,,"```bash
date -d ""July 2005""
```","date -d ""July 2005""","date -d ""July 2005""",,
,,,,,,,,,,,,,,,,id <username>,id <user>,None,,
,,,,,,,,,,,,,,,,"```bash
mount -o loop dvdimage.iso /mnt
mkdir ~/test
cd ~/test
cp -av /mnt/* .
```",mount -o loop dvdimage.iso /mnt ; mkdir ~/test ; cd ~/test ; cp -av /mnt/* .,"```bash
mount -o loop dvdimage.iso /mnt && mkdir ~/test && cp -av /mnt/* ~/test
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
zsh -c 'source /etc/profile.d/colorls.sh'
```","None

The provided Bugzilla report describes a scenario but does not provide specific commands or a direct test case that can be executed to reproduce the exact issue described in an automated fashion. The reproduction steps are more of a setup guide rather than a precise command or script. Therefore, based on the strict criteria given for identifying only exact reproducible commands or test cases, the answer is None.","```bash
zsh -c 'source /etc/profile.d/colorls.sh'
```",,
,,,,,,,,,,,,,,,,"cat /etc/passwd | head -3 | tail +2 
cat /etc/passwd | tail +3 | head -2","cat /etc/passwd | head -3 | tail +2

cat /etc/passwd | tail +3 | head -2","cat /etc/passwd | head -3 | tail +2  
cat /etc/passwd | tail +3 | head -2",,
,,,,,,,,,,,,,,,,"```bash
configure && make check
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo foo >foo
echo bar >bar
ln foo foo.backup
strace mv bar foo
```","None

The provided bug description explains the issue in detail and gives an analysis of why the atomicity is broken by the `mv` command under certain conditions. However, it does not explicitly provide a single command or simplified test case that can be used directly to reproduce the exact bug scenario described. The strace output given is part of the evidence for how the issue manifests but isn't itself a direct command to replicate the error in an automated fashion or for testing purposes.","```bash
echo foo >foo
echo bar >bar
rm -f foo.backup
ln foo foo.backup
mv bar foo
```",,
,,,,,,,,,,,,,,,,"```bash
export LS_COLORS=""di=36;41""
source /etc/profile.d/colorls.sh
echo $LS_COLORS
```","None

The provided bug description indicates an issue with a specific shell script overriding environment variables but does not provide explicit commands or test cases to reproduce the exact behavior described. Without additional details about the commands executed before encountering the issue or how to set up the environment, it's not possible to derive a precise command or test case from the given information alone.",None,,
,,,,,,,,,,,,,,,,"```bash
echo --foo --bar
/bin/echo --foo --bar
```","None

The provided bug report indicates a discrepancy between the built-in `echo` command and `/bin/echo`, but it does not specify an exact sequence of steps beyond the initial commands to reproduce the unique conditions that cause this behavior if there are any specific conditions other than simply calling `/bin/echo` with arguments starting with two dashes. Since no additional context or specific setup is given, we cannot derive a more precise test case than what has already been demonstrated in the bug report itself.",/bin/echo --foo --bar,,
,,,,,,,,,,,,,,,,"1. Log in as normal user from a text console.
2. Run the command: `su - root`
3. Input root's password.","1) log in as normal user from a text console - NOT an Xterm.
2) su - root
3) input root's password

None

The steps provided describe actions rather than specific commands that would be used in a test case to isolate and demonstrate the issue with `/bin/unicode_start`. The problem seems context-specific (text console login vs. Xterm), making it difficult to provide a precise command-line test case without additional details or modifications to simulate the environment conditions described.","```
1) Log in as normal user from a text console - NOT an Xterm.
2) su - root
3) input root's password
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
su -l -c ""set -x ; umask 027 ; exec /usr/bin/ssh -n 'remote_host' 'remote_command' </dev/null"" backup </dev/null >output.log
```",None,"su -l -c ""set -x ; umask 027 ; exec /usr/bin/ssh -n '${REMOTEHOSTTOBACKUP}' '${REMOTECMD}' </dev/null"" backup </dev/null >""${1}""",,
,,,,,,,,,,,,,,,,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,strace -E LC_ALL=C dd if=/dev/zero of=/dev/null count=1 bs=1,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
cd /etc/profile.d
LS_COLORS=""*bug*""
csh /etc/profile.d/colorls.csh
```","cd /etc/profile.d; setenv LS_COLORS ""*bug*""; csh /etc/profile.d/colorls.csh","```bash
cd /etc/profile.d && setenv LS_COLORS ""*bug*"" && csh colorls.csh
```",,
,,,,,,,,,,,,,,,,"```bash
./install.sh
```
Note: The exact command may vary depending on the actual installation script provided with the mkl package. The above command assumes that the installation script is named ""install.sh"" and is located in the current directory.

To fully reproduce the bug, follow these steps:
1. Download the mkl 10.0.x package from Intel.
2. Extract the package to a directory.
3. Navigate to the installation directory (e.g., `cd install`).
4. Run the installation script (e.g., `./install.sh`).
5. Enter the license information when prompted.

The bug should be reproduced after entering the license information, resulting in an error similar to the one described in the bug description.",None,None,,
,,,,,,,,,,,,,,,,"```bash
unalias cp
touch a b
cp -i -f a b
cp -f -i a b
```","unalias cp
touch a b
cp -i -f a b
cp -f -i a b","```
unalias cp
touch a b
cp -i -f a b
cp -f -i a b
```",,
,,,,,,,,,,,,,,,,"```bash
sudo bash -c 'echo ""modified"" >> /etc/profile.d/colorls.sh'
sudo yum upgrade coreutils
```",None,"```bash
echo ""Modified content"" | sudo tee /etc/profile.d/colorls.sh
sudo yum upgrade coreutils
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
ls --color=tty
man ls | grep --color
ls --help | grep --color
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ls -lZ /usr/bin/rhgb; sudo /sbin/restorecon /usr/bin/rhgb; ls -lZ /usr/bin/rhgb
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
csh -c ""eval `dircolors -c $COLORS 2>/dev/null`""
```",None,eval `dircolors -c $COLORS 2>/dev/null`,,
,,,,,,,,,,,,,,,,"```bash
TERM= infocmp | sed 's/^[^#]*#//'; [ $(infocmp | sed 's/^[^#]*#//') -eq 0 ]
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
LS_COLORS= mkdir test; chmod o-w test; ls --color=tty -d test; chmod o+w test; ls --color=tty -d test
```","None

The provided steps describe how to observe the behavior of `ls` with and without the ""ow"" setting in `LS_COLORS`, but they do not directly point to a specific command or simple test case that would clearly demonstrate a bug in coreutils itself, beyond illustrating an unintended behavior or limitation. The issue is more about the inability to exclude certain attributes rather than a malfunction of existing commands.","```bash
mkdir test; chmod o-w test; ls --color=tty -d test; chmod o+w test; ls --color=tty -d test
```",,
,,,,,,,,,,,,,,,,"```
tcsh -c 'source /etc/profile.d/colorls.csh'
```",tcsh -c 'source /etc/profile.d/colorls.csh',"```bash
tcsh
echo $LS_COLORS
```",,
,,,,,,,,,,,,,,,,/bin/ls -l /etc/passwd,None,/bin/ls -l /etc/passwd,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""F-A\nFB\nF-C"" > a.txt
sort a.txt
```","echo -e ""F-A\nFB\nF-C"" > a.txt && sort a.txt","```bash
echo -e ""F-A\nFB\nF-C"" > a.txt
sort a.txt
```",,
,,,,,,,,,,,,,,,,None,"None

The provided bug description is more about packaging guidelines and versioning issues rather than a functional bug within coreutils that can be reproduced with specific command(s). It discusses how `coreutils` should obsolete and provide versions of `mktemp`, which is a packaging concern rather than something that would manifest as a runtime or compile-time error through the execution of commands.",None,,
,,,,,,,,,,,,,,,,"```bash
sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF
```","sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF","```bash
sort -n -t, -k1 <<'EOF'
2101,:4AgE3<G4RNDP`
21012,:A0QIX6AI10gMP
2101,2IJIETPY=g<10@
21012,V8:AACI4TD925@
21014,:1MG<hEb@AIhU`
2101,4H@38`5ELC66M`
2101,4h>HM812P4820P
21014,V8:AACI4TD925@
2101,5AHBVEQW@dUGE@
EOF
```",,
,,,,,,,,,,,,,,,,"```
md5sum --text file.txt
md5sum --binary file.txt
md5sum --help
man md5sum
```",None,None,,
,,,,,,,,,,,,,,,,"```
su -
su - gagan
```","su -
su - gagan","su -  
su - gagan",,
,,,,,,,,,,,,,,,,"```bash
#!/bin/bash

# Create a sample directory and file structure on the USB flash drive
mkdir /media/BACKUP
touch /disk/file1
touch /disk/file2

# Create a script with the problematic command
echo ""cp -fvr /disk /media/BACKUP"" > script.sh
chmod +x script.sh

# Run the script and verify that files are not copied
./script.sh
ls /media/BACKUP
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
XTerm.termName: xterm-256color; ls --color=always
xterm -tn xterm; ls --color=always
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""_hello"" > file.txt
echo "" world"" >> file.txt
echo ""abc"" >> file.txt
sort file.txt
```",None,"```bash
echo -e ""   apple\nbanana\n_ orange\npear"" > testfile
sort testfile
```",,
,,,,,,,,,,,,,,,,"```bash
TERM=xterm-256color ls --color
```","None

The provided description does not contain a specific command or test case that can be used to directly reproduce the described issue with `ls` color output when `TERM` is set to `xterm-256color`. It provides context about expected behavior and suggestions for enhancements but lacks clear reproducible steps.",None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""a\n a\n  a\n_a\nA\naa\nZ\n_Z"" | sort -k 1
```","None

The provided Bugzilla entry does not contain specific commands or a test case that can be directly executed to reproduce the described issue with `sort`. The steps to reproduce are listed but left blank, and while there is input data showing actual vs expected results, no explicit command is given for generating those outputs.",None,,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024
```",LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,LC_ALL=hu_HU.UTF-8 dd if=/dev/zero of=/dev/null bs=4M count=1024,,
,,,,,,,,,,,,,,,,"```bash
pr -e4 -f -l 25 filename | lpr -P P1
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/logs
cp /tmp/syslog /tmp/logs/
```
Note: These commands should be run in a shell on a system with SELinux enabled and using kernel version 2.6.20-1.2962.fc7, as specified in the bug description. The `anaconda` version is also mentioned as 11.2.0.28-1, but it's not clear if this is directly relevant to reproducing the bug.","None

The provided information does not contain a precise command or test case that can be executed independently to reproduce the described issue. The scenario given involves specific conditions (like using anaconda shell and particular kernel version) which are necessary but cannot be directly translated into a standalone, reproducible test case without additional setup steps.","mkdir /tmp/logs  
cp /tmp/syslog /tmp/logs/",,
,,,,,,,,,,,,,,,,"```bash
/bin/ls --color=always | grep hosts
```","None

The provided steps do not directly lead to a command that reproduces the described issue in a straightforward manner for someone else to replicate without additional context on how to set up the environment (e.g., creating the necessary symbolic link). The description provides actions but lacks an explicit, reproducible test case that could be run verbatim by others.","```bash
/bin/ls --color=always | grep hosts
```",,
,,,,,,,,,,,,,,,,"stat --format=%C /bin/ls 
ls -Z /bin/ls",stat --format=%C /bin/ls,stat --format=%C /bin/ls,,
,,,,,,,,,,,,,,,,"```bash
ls -l /path/to/broken/symlink
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
cp -av file1 file2; cp -av file1 file2
```","cp -av file1 file2
cp -av file1 file2","```
cp -av file1 file2
cp -av file1 file2
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/test
echo ""poo"" > /tmp/test/a
cp -a /tmp/test/a /tmp/test/b
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
test -n """"; echo $?; test """"; echo $?
```","None

The provided Bug Description indicates that the issue can be reproduced by running an ""attached script,"" but no actual command line instructions or content of the script are given in the text provided here. Therefore, without the specific content or attachment referred to, we cannot provide a precise command or test case to reproduce the bug.","```bash
if test -n ""$@""; then echo -n 1; else echo -n 2; fi; if test ""$@""; then echo -n 3; else echo -n 4; fi; echo
```",,
,,,,,,,,,,,,,,,,"```bash
date --help | grep iso
man date | grep iso
info date | grep iso
```","date --help
man date
info date

search for --iso","date --help  
man date  
info date",,
,,,,,,,,,,,,,,,,"```bash
mkdir testdir
chmod 2770 testdir
chmod 770 testdir
ls -ld testdir
```","```bash
umask 0007
mkdir testdir
chmod 2770 testdir
chmod 770 testdir
ls -ld testdir
```","```bash
mkdir testdir
chmod 2770 testdir
chmod 770 testdir
ls -ld testdir
```",,
,,,,,,,,,,,,,,,,"```bash
foo=
/usr/bin/[ -n $[foo} ] && echo true
```","None

The provided Bug Description explains the issue but does not clearly specify a correct command or test case to reproduce the described behavior due to a typo and logical error in the command itself (`$[foo}` instead of `${foo}`). Therefore, no exact command or test case can be determined from the given description.","```bash
foo=
/usr/bin/[ -n $[foo} ] && echo true
```",,
,,,,,,,,,,,,,,,,"```bash
cd /partition 
rm -f toto* 
date > toto1 
cp -i -a toto1 toto2 
cp -i -a toto1 toto2 
ls -l toto*
```","None

The provided steps are descriptive but do not provide a fully reproducible command sequence that includes setting up an NFS mount and ensuring SELinux is in permissive mode, which are critical for reproducing this specific issue. Therefore, based on the given information, we cannot write a single or set of commands to definitively reproduce the bug without additional setup instructions.","```
cd /partition
rm -f toto*
date > toto1
cp -i --preserve=all toto1 toto2
ls -l toto*
```",,
,,,,,,,,,,,,,,,,"```bash
install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/
```",install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/,install /home/vikram/Desktop/RPM-GPG-KEY-AL-CAPCOM /etc/pki/rpm-gpg/,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p a/b/c
chmod 0 a
rm -rf a
```","mkdir -p a/b/c
chmod 0 a
rm -rf a",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p du_test/unreadable
du -a -b du_test
chmod 000 du_test/unreadable
du -b -a du_test
```","cd /tmp
mkdir -p du_test/unreadable
chmod 000 du_test/unreadable
du -b -a du_test","```bash
cd /tmp
mkdir -p du_test/unreadable
du -a -b du_test
chmod 000 du_test/unreadable
du -b -a du_test
```",,
,,,,,,,,,,,,,,,,cat /etc/passwd | sort -R,cat /etc/passwd | sort -R,cat /etc/passwd | sort -R,,
,,,,,,,,,,,,,,,,"```bash
touch -d ""1 day ago"" file1
touch file2
cp -iu file1 .
```","None

The provided steps describe a process but do not provide explicit command lines that can be executed directly to reproduce the issue. While the steps are clear in their intent, they need to be translated into actual shell commands to fully qualify as a reproducible test case. Therefore, based strictly on the information given and adhering to the instruction, the answer is ""None"".","```bash
touch -d '1 day ago' file1
touch file2
cp -iu file1 /path/to/directory/with/file2
```",,
,,,,,,,,,,,,,,,,"```
su -
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir testdir
ls -ld testdir
chmod 7777 testdir
ls -ld testdir
chmod 0777 testdir
ls -ld testdir
```",mkdir testdir; chmod 7777 testdir; chmod 777 testdir; ls -ld testdir,"mkdir testdir  
chmod 7777 testdir  
chmod 777 testdir  
ls -ld testdir",,
,,,,,,,,,,,,,,,,/bin/pwd,/bin/pwd,/bin/pwd,,
,,,,,,,,,,,,,,,,"```bash
rpmbuild -ba coreutils-6.9-2.fc7.src.rpm
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir test_dir
cd test_dir
touch a_file b_file c_file d_file e_file f_file g_file h_file i_file
ls -x
```",mkdir test_dir && cd test_dir && touch {a..i}_file && ls -x,"```bash
mkdir testdir && cd testdir && touch a_file b_file c_file d_file e_file f_file g_file h_file i_file && ls -x
```",,
,,,,,,,,,,,,,,,,/bin/ls -x,/bin/ls -x,ls -x,,
,,,,,,,,,,,,,,,,tail -f file; strace tail -f file,strace tail -f file,"```sh
strace tail -f file
```",,
,,,,,,,,,,,,,,,,"```
ls -bCAF --color
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p dir1/dir2/dir3/dir4/dir5/dir6/dir7/dir8/dir9/dir10
rm -rf dir1 & rm -rf dir1
```","None

The provided bug description does not give a precise command or test case that can be directly executed to reproduce the issue. The steps outlined are general and depend on ""tricky timing,"" which makes it non-deterministic and not directly reproducible with a specific set of commands.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
runcon -t unconfined_t /usr/sbin/prelink --no-update-cache some/binary
```
or 
```bash
echo 'int main(){return 0;}' > u.c
gcc -o u u.c
runcon -t unconfined_t /usr/sbin/prelink -N ./u
```",runcon -t unconfined_t /usr/sbin/prelink -N ./u,runcon -t unconfined_t /usr/sbin/prelink -N ./u,,
,,,,,,,,,,,,,,,,"seq --format=""%02d"" 1 10","seq --format=""%02d"" 1 10","seq --format=""%02d"" 1 10",,
,,,,,,,,,,,,,,,,"```bash
mkdir a; touch a/b; ln -s d a/c; ls -lL a
```","mkdir a ; touch a/b ; ln -s d a/c ; ls -lL a
touch a/d ; ls -lL a","```bash
mkdir /tmp/a && touch /tmp/a/b && ln -s d /tmp/a/c && ls -lL /tmp/a
```",,
,,,,,,,,,,,,,,,,"```bash
cat /etc/group | tail +3
tail /etc/group | tail +3
```",None,cat /etc/group | tail +3,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p a/b b
date > a/b/c.txt
mv b a
```","mkdir -p a/b b
date > a/b/c.txt
mv b a","mkdir -p a/b b  
date > a/b/c.txt  
mv b a",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
cut -f2- a b
```",echo 1 > a; echo 1 > b; cut -f2- a b,"```bash
echo 1 > a; echo 1 > b; cut -f2- a b
```",,
,,,,,,,,,,,,,,,,"```bash
printf '#!/usr/bin/env python -tt\nprint 1\n' > t
chmod +x t
./t
python -tt t
```",printf '#!/usr/bin/env python -tt\nprint 1\n' > t ; chmod +x t ; ./t ; python -tt t,"printf '#!/usr/bin/env python -tt\nprint 1\n' > t
chmod +x t
./t",,
,,,,,,,,,,,,,,,,"```bash
ls -l >toc
cp -a toc toc~
ls -l toc*
cp -a toc toc~
ls -l toc*
```",ls -l >toc; cp -a toc toc~; ls -l toc*; cp -a toc toc~; ls -l toc*,"```bash
ls -l >toc
cp -a toc toc~
ls -l toc*
cp -a toc toc~
ls -l toc*
```",,
,,,,,,,,,,,,,,,,"mv x y 

ldd /bin/mv 

rpm -q -f /bin/mv",None,mv x y,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,id root,id root,id root,,
,,,,,,,,,,,,,,,,tail +3,tail +3 /etc/hosts,tail +3 /etc/hosts,,
,,,,,,,,,,,,,,,,"`stat -c ""%C"" hoge.txt` 

Note: The file ""hoge.txt"" should exist in the current directory for this command to work. If not, replace ""hoge.txt"" with any existing file name. Also, ensure that the system has SELinux enabled and the file has a security context set for the bug to be reproducible.","stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"`stat -c ""%C"" hoge.txt`","stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"```bash
stat -c ""%C"" hoge.txt
```","stat -c ""%C"" hoge.txt","stat -c ""%C"" hoge.txt",,
,,,,,,,,,,,,,,,,"```bash
touch $(printf ""file%sid=0\n"" {1..7394}); rm -fr *sid=0*
```","None

The provided steps in the bug report are more like an explanation of how the issue was encountered rather than a precise command or set of commands that can be run to directly and reproducibly trigger the same error in a controlled environment for testing purposes. The issue described revolves around attempting to delete a large number of files using wildcards, leading to ""Argument list too long"" errors, which is related more to shell behavior and limitations rather than an isolated bug within `rm` or another coreutils command itself. Therefore, no specific reproducible test case or command is provided here that can be executed to directly reproduce the described bug under controlled conditions.",rm -fr *sid=0*,,
,,,,,,,,,,,,,,,,/usr/bin/tail +3 /etc/motd,/usr/bin/tail +3 /etc/motd,/usr/bin/tail +3 /etc/motd,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
rpm -qf /usr/share/locale/*/LC_TIME | wc -l
ls -l /usr/share/locale/*/LC_TIME/coreutils.mo | wc -l
```","None

The provided information describes an issue with package ownership but does not specify a direct command or test case that reproduces a functional bug within coreutils itself. The described actions are rpm and ls queries which do not constitute a reproducible test case for a coreutils bug.","rpm -qf /usr/share/locale/*/LC_TIME | wc -l  
ls -l /usr/share/locale/*/LC_TIME/coreutils.mo | wc -l",,
,,,,,,,,,,,,,,,,"```bash
mv -i -f file1 file2; cp -i -f file1 file2
```",None,"```bash
mv -i -f source_file destination_file
cp -i -f source_file destination_file
```",,
,,,,,,,,,,,,,,,,uname --kernel-version,uname --kernel-version,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort
```","echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort","echo -e ""eutin: lall\nfhansen: keks\n*: :fail:"" | sort",,
,,,,,,,,,,,,,,,,"```bash
echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d
```","echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d","echo x | base64 | base64 -d
perl -le 'print ""a"" x 80' | base64 | base64 -d",,
,,,,,,,,,,,,,,,,tail +2 su.log,# tail +n 2 su.log,tail +n 2 su.log,,
,,,,,,,,,,,,,,,,tail +2 su.log,tail +n 2 su.log,tail +n 2 su.log,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"/bin/echo ""bad\ngood"" | tail +2","/bin/echo ""bad\ngood"" | tail +2","/bin/echo ""bad\ngood"" | tail +2",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
chown sapoqwegfj /dev/ttyS1 
chown sapoqwegfj: /dev/ttyS1
```","# chown sapoqwegfj /dev/ttyS1 
# chown sapoqwegfj: /dev/ttyS1",chown sapoqwegfj: /dev/ttyS1,,
,,,,,,,,,,,,,,,,"```bash
setfacl -m u:daemon:r-x foo
ls foo
ldd /bin/ls
cp -p foo bar
getfacl bar
```","None

The provided information describes a situation where ACL (Access Control List) support seems to be missing from the coreutils package in FC5. However, it does not provide a clear command or test case that can independently reproduce this issue as a standalone problem without relying on specific versions of packages or system configurations. The commands listed are examples of operations that reveal the absence of ACL support but do not themselves constitute a reproducible test case for a discrete bug within coreutils.",None,,
,,,,,,,,,,,,,,,,"openvt -s -w -- su - someuser -c ""vlock -a"" 

or 

openvt -s -w -- su - someuser -c ""vlock -a 2>/tmp/xx""; cat xx","openvt -s -w -- su - someuser -c ""vlock -a""","openvt -s -w -- su - someuser -c ""vlock -a""",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
# As root
useradd -m uid04278
echo ""uid04278 server:/vol/did/&"" >> /etc/auto.home
autofs -v
su - uid04278
```
Note: The above command assumes that autofs is installed and configured on the system, and that the NIS tables are properly set up. The `/etc/auto.home` file may need to be adjusted according to the actual autofs configuration.","None

The provided bug report describes a sequence of steps and conditions under which an issue arises related to autofs and NIS configurations, specifically concerning automount points and permissions for user logins. However, it does not provide explicit shell commands that can be run in a standard environment to reproduce the error directly. The reproduction involves specific setup details like NIS tables and autofs configurations which cannot be summarized into simple shell command(s).",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
pr -e file
```
To fully reproduce the issue, you should first create a file with 2 lines where one line starts with a tab character, like so:
```bash
echo -e ""line1\n\tline2"" > file
```","None

The provided Bugzilla report does not contain specific input data (i.e., a sample file with content) necessary to fully reproduce the issue. It describes steps conceptually but doesn't provide an actual file example.

To properly reproduce this, one would need:

1. A file (`file.txt`) containing:
   ```
   line without tab
   \tline with leading tab
   ```

2. Run `pr -e file.txt`.

However, the exact content of the file is not specified in the report, so while we know what commands to run and the expected format, we don't have a precise example file to ensure full reproduction.

Thus, based on the provided information, we cannot definitively provide the exact test case required for reproduction.","```bash
echo -e ""\tline1\nline2"" > file; pr -e file
```",,
,,,,,,,,,,,,,,,,tail +2 filename.txt,None,tail +2 somefile.txt,,
,,,,,,,,,,,,,,,,pr -e3 -l60 -f qtfigs.cpp|lp,"None

The provided information indicates a problem with printing through `lp` rather than an issue directly with the `pr` command regarding tab replacement. The error message about unsupported format suggests a problem with the `lp` command or its configuration, not a reproducible bug in how `pr` handles tabs and spaces. Without specific details about how `pr` fails to replace tabs correctly using `-e3`, we cannot derive an exact test case based on the provided information.",pr -e3 -l60 -f qtfigs.cpp|lp,,
,,,,,,,,,,,,,,,,"```bash
date -Rud ""1970-01-01 UTC + 1154957411 sec +0000""
```",None,"```bash
sec=1146839411; tz=+0000; dtz=${tz/+/+ }; dtz=${dtz/-/- }; date -Rud ""1970-01-01 UTC + $sec sec $dtz""
```",,
,,,,,,,,,,,,,,,,"```bash
cd /any_subdir; /bin/pwd
```",None,cd /any_subdir ; /bin/pwd,,
,,,,,,,,,,,,,,,,"```bash
umount /proc; cp -p <source_file> <destination_file>
```",None,"```
cp -p source_file destination_file
``` 

This command should be run in an environment where `/proc` is not mounted to trigger the bug. However, since the specific setup (e.g., OpenVZ virtual environment) and unmounted `/proc` filesystem are mentioned, it may require a similar configuration to reproduce exactly as described.",,
,,,,,,,,,,,,,,,,"```bash
cp -Z root:object_r:tmp_t file-a file-b; getfattr -n security.selinux file-b
```","None

The provided description does not include specific commands or test cases that can be directly executed to reproduce the issue. The developer described the behavior and a potential solution but did not provide explicit steps or a script for reproducing the problem.","```bash
cp -Z root:object_r:tmp_t file-a file-b
cp -Z root:object_r:tmp_t file-a file-b
getfilecon file-b
```",,
,,,,,,,,,,,,,,,,"```
sort -3 file.txt
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo -e ""abc\ndef\nghi"" | tail +2
```","echo -e ""abc\ndef\nghi"" | tail +2","echo -e ""abc\ndef\nghi"" | tail +2",,
,,,,,,,,,,,,,,,,"```bash
mkdir test
cd test
echo ""aaa"" > aaa
echo ""bbbbb"" > bbbbb
ls -l | sort -n +4
```","mkdir test
cd test
echo ""aaa"" > aaa
echo ""bbbbb"" > bbbbb
ls -l | sort -n +4","```bash
mkdir test
cd test
echo ""aaa"" > aaa
echo ""bbbbb"" > bbbbb
ls -l | sort -n +4
```",,
,,,,,,,,,,,,,,,,"```bash
touch /path/to/file; mount --make-private /proc; touch /path/to/existing_file; umount /proc
```","None

The provided bug description explains a potential issue with the `touch` command in certain conditions but does not provide specific commands or test cases needed to reproduce the described behavior.",None,,
,,,,,,,,,,,,,,,,"```
df
```","df

None

Explanation:
The command `df` alone can trigger the error as described in the Bugzilla report when run by a non-root user. However, there is no specific detailed command sequence provided that directly sets up and reproduces the exact permission issue leading to this error without additional context or setup which isn't clearly outlined. Therefore, while running `df` as a regular user may reproduce the symptoms of the bug, it's not a fully reproducible test case without setting up the exact environment and permissions mentioned (which are not provided in a concise step-by-step manner).",df,,
,,,,,,,,,,,,,,,,"```bash
touch /tmp/example1; time install /tmp/example1 /tmp/example2
```","touch /tmp/example1
time install /tmp/example1 /tmp/example2",time install /tmp/example1 /tmp/example2,,
,,,,,,,,,,,,,,,,"```bash
LANG=fr_FR.UTF-8
echo ""fÃ©vrier"" | tr ""Ã Ã§Ã©Ã¨ÃªÃ«Ã®Ã¯Ã´Ã¶Ã¹Ã¼ÇÃÃÃÃÃÃÃÃÃÃÇ"" ""aceeeeiioouuACEEEEIIOOUU""
```","echo ""fÃÂ©vrier"" | tr ""ÃÂ ÃÂ§ÃÂ©ÃÂ¨ÃÂªÃÂ«ÃÂ®ÃÂ¯ÃÂ´ÃÂ¶ÃÂ¹ÃÂ¼ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ"" ""aceeeeiioouuACEEEEIIOOUU""","echo ""fÃ©vrier"" | tr ""Ã Ã¢Ã§Ã©Ã¨ÃªÃ«Ã¯Ã®Ã´Ã¶Ã¹Ã»ÃÃÃÃÃÃÃÃÃÃÃÃÃ"" ""aceeeeiioouuACEEEEIIOOUU""",,
,,,,,,,,,,,,,,,,"```bash
LANG=fr_FR.UTF-8; echo ""fÃÂ©vrier""  |  tr ""ÃÂ ÃÂ§ÃÂ©ÃÂ¨ÃÂªÃÂ«ÃÂ®ÃÂ¯ÃÂ´ÃÂ¶ÃÂ¹ÃÂ¼ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ"" ""aceeeeiioouuACEEEEIIOOUU""
```","export LANG=fr_FR.UTF-8; echo ""fÃÂ©vrier"" | tr ""ÃÂ¡ÃÂ©ÃÂ­ÃÂ³ÃÂºÃÂ±ÃÂÃâ°Ãï¿½ÃâÃÅ¡Ãâ"" ""aeiounuAEIOUN""","echo ""fÃ©vrier"" | tr ""Ã Ã¡Ã§Ã©Ã¨ÃªÃ«Ã¯Ã®Ã´Ã¶Ã¹Ã»ÃÃÃÃÃÃÃÃÃÃÃÃ"" ""aceeeeiioouuACEEEEIIOOUU""",,
,,,,,,,,,,,,,,,,"```bash
mv /mnt/nfs/file.txt /local/directory/
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mv oldname/ newname/
```",None,$ mv oldname/ newname/,,
,,,,,,,,,,,,,,,,"```bash
echo ""x 4a 2""  >testfile; 
echo ""x 47 1"" >>testfile; 
sort -k 2.1,2.2n testfile; 
sort -t' ' -k 2.1,2.2n testfile
```","echo ""x 4a 2"" > testfile  
echo ""x 47 1"" >> testfile  
sort -k 2.1,2.2n testfile  
sort -t' ' -k 2.1,2.2n testfile","```bash
echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile
```",,
,,,,,,,,,,,,,,,,"```bash
echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t ' ' -k 2.1,2.2n testfile
```","echo ""x 4a 2"" > testfile  
echo ""x 47 1"" >> testfile  
sort -k 2.1,2.2n testfile  
sort -t' ' -k 2.1,2.2n testfile","```bash
echo ""x 4a 2"" > testfile
echo ""x 47 1"" >> testfile
sort -k 2.1,2.2n testfile
sort -t' ' -k 2.1,2.2n testfile
```",,
,,,,,,,,,,,,,,,,"```bash
ls -Z
touch libflashplayer.so
chcon user_u:object_r:usr_t libflashplayer.so
touch nphelix.so
chcon user_u:object_r:lib_t nphelix.so
ln -s /opt/RealPlayer/mozilla/nphelix.so nphelix.so 
chcon --reference=nphelix.so libflashplayer.so
ls -Z
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c
```","LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c","LANG=en_US.UTF-8 echo -ne ""\xe2\x80\xbe"" | /usr/bin/wc -m -c",,
,,,,,,,,,,,,,,,,"```bash
su -
cd
pwd
ls -ld /root
```","None

The provided information describes a situation where `su -` fails to change directory to `/root` due to permission issues, but does not clearly indicate a specific bug in coreutils that can be reproduced with a given set of commands. The sequence described involves user permissions and environment settings which might vary across different systems and configurations, making it non-trivial to create a universally reproducible test case based solely on the information provided.",None,,
,,,,,,,,,,,,,,,,tail +10 somefile,tail +10 somefile,tail +10 somefile,,
,,,,,,,,,,,,,,,,"tail +2 file 
tail +2 .xsession-errors 
tail + file",tail +2 .xsession-errors,tail +2 .xsession-errors,,
,,,,,,,,,,,,,,,,tail +5 /etc/protocols,tail +5 /etc/protocols,tail +5 /etc/protocols,,
,,,,,,,,,,,,,,,,"```bash
mkdir a
ls -ld b
mv a b/
```",mkdir a; mv a b/,"```bash
mkdir a
mv a b/
```",,
,,,,,,,,,,,,,,,,"rpm -v -ba --define ""WITH_SELINUX 0"" coreutils.spec",None,"rpm -v -ba --define ""WITH_SELINUX 0"" coreutils.spec",,
,,,,,,,,,,,,,,,,"```
su -
```","None

The provided bug report lacks specific commands or a clear test case that can be directly executed to reproduce the issue. The steps described are more like general actions rather than precise commands. Therefore, based on the information given, it is not possible to provide an exact command or test case for reproducing the bug.",xterm -e su -,,
,,,,,,,,,,,,,,,,"```
runuser -u <non-root-user> ulimit -n
```",None,None,,
,,,,,,,,,,,,,,,,"gnome-terminal -e ""/bin/su -""","gnome-terminal -e ""/bin/su -""  

# or

xterm -e ""/bin/su -""","gnome-terminal -e '/bin/su -'  
xterm -e '/bin/su -'",,
,,,,,,,,,,,,,,,,"```bash
echo '1
2
3' > f
tail +2 f
```","echo '1
2
3' > f
tail +2 f",tail +2 f,,
,,,,,,,,,,,,,,,,"```bash
cp -a src_dir dst_dir
```
Replace `src_dir` with a directory containing a huge number of files (millions) and `dst_dir` with the destination directory where you want to copy these files.

To create a large number of files, you can use a command like this:

```bash
mkdir src_dir
for i in {1..10000000}; do touch ""src_dir/$i""; done
```
Then run:
```bash
cp -a src_dir dst_dir
```",cp -a LARGE_SRC_DIRS... DST_DIR,None,,
,,,,,,,,,,,,,,,,"```
chmod u+s /usr/bin/runuser
runuser -u nobody id
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
vipw
# duplicate the root entry and rename the 2nd one to ""system""
vipw -s
# duplicate the root entry in the shadow password file and rename the 2nd one to ""system""
su - normal_user
su - system
```","vipw  
# Duplicate the root entry and rename the second one as ""system""  
vipw -s  
# Do the same in the shadow password file  
su - system  
# Log in as a normal user and run this command to switch to the ""system"" account",None,,
,,,,,,,,,,,,,,,,"```bash
vipw
# duplicate the root entry and rename the 2nd one to ""system""
vipw -s
# duplicate the root entry in the shadow password file and rename the 2nd one to ""system""
su - system
```","vipw  
# Duplicate the root entry and rename the second one to ""system""
vipw -s  
# Do the same in the shadow password file  
su - system","```bash
vipw
# Duplicate the root entry and rename the second one as ""system""
vipw -s
# Do the same in the shadow password file for ""system"" with no password set
su - system
```",,
,,,,,,,,,,,,,,,,"```bash
vipw
# duplicate the root entry and rename the 2nd one to ""system""
vipw -s
# duplicate the root entry in /etc/shadow and rename the 2nd one to ""system""
su - system
```","vipw  
# Duplicate the root entry and rename the second one to ""system""
vipw -s  
# Do the same in the shadow password file  
su - system  
# Log in as a normal user and execute this command",None,,
,,,,,,,,,,,,,,,,cat /proc/[some_file] > output_file,None,None,,
,,,,,,,,,,,,,,,,"```
cd /net/barrel; sort +
```","None

The provided bug report does not contain a complete set of steps to reproduce the issue. While it mentions navigating to `/net/barrel`, there are no further details on what command involving `sort` is executed that causes the error. The bug description indicates that the problem occurs within an autofs context, but lacks specific information about how to trigger the exact `sort: open failed: +0: No such file or directory` error in a reproducible manner with the given version of coreutils.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /usr/src/redhat/BUILD/coreutils-5.92 &&
cd /usr/src/redhat/BUILD/coreutils-5.92 &&
./configure &&
make &&
make check
```",None,"To reproduce the bug, you can run the specific test case that failed in the `mkdir` tests:

```bash
make check TESTS='tests/mkdir/p-3'
```

This command will execute only the `p-3` test within the `mkdir` directory of the coreutils test suite.",,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/abc
touch /tmp/abc/file
ln -s /tmp/abc/file /tmp/abc/file.link
chown -v -R adm /tmp/abc
chgrp -v -R adm /tmp/abc
ls -l /tmp/abc
```","mkdir /tmp/abc
touch /tmp/abc/file
ln -s /tmp/abc/file /tmp/abc/file.link
chown -v -R adm /tmp/abc
chgrp -v -R adm /tmp/abc
ls -l /tmp/abc","```bash
mkdir /tmp/abc
touch /tmp/abc/file
ln -s /tmp/abc/file /tmp/abc/file.link
chown -v -R adm /tmp/abc
chgrp -v -R adm /tmp/abc
ls -l /tmp/abc
```",,
,,,,,,,,,,,,,,,,"```bash
xterm &
echo $WINDOWID
su - some_user_name
echo $WINDOWID
```","```bash
echo $WINDOWID; su - some_user_name; echo $WINDOWID
```","```
echo $WINDOWID
su - some_user_name
echo $WINDOWID
```",,
,,,,,,,,,,,,,,,,"```bash
ls -l /bin/su
```
Then, as a non-root user:
```bash
su
```","None

The provided information describes a situation where `/bin/su` does not function correctly due to it not being setuid, but it does not provide an explicit command or test case that can be used to reproduce the specific bug. The description suggests actions leading up to the problem (installing a specific version and attempting to use `su`) but does not detail a precise sequence of commands or tests that would reproduce the issue independently without relying on the context provided about the setuid bit status.","```bash
su -
```",,
,,,,,,,,,,,,,,,,"```bash
mv /nfs/mount/point/sourcefile /local/directory/
```",mv /users/columbo/xyz .,mv /users/columbo/xyz .,,
,,,,,,,,,,,,,,,,"```bash
wc -L Cory_Doctorow_-_*
```",None,None,,
,,,,,,,,,,,,,,,,"echo ""abc"" | md5sum","echo ""abc"" | md5sum","echo ""abc"" | md5sum",,
,,,,,,,,,,,,,,,,df -w 42,"None

The provided steps in the bug report attempt to use a `-w` option with `df`, which is not recognized by the version of `df` mentioned (coreutils-5.2.1-48.1). The bug report suggests that there should be an option like `-w` available for changing the width of the device column, but it does not provide a way to actually reproduce a misbehavior related to long device names with the existing options. Therefore, no specific command or test case is given that can currently be used to demonstrate the issue described in the bug report.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir testperm
chmod +rwx testperm
su
chmod -rwx testperm
ls -al
```","mkdir testperm  
chmod +rwx testperm  
su  
chmod -rwx testperm  
ls -al","mkdir testperm  
chmod +rwx testperm  
su  
chmod -rwx testperm  
ls -al",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch file1 file2
mv --reply=no file1 file2
ls file1 file2
```","None

Explanation: The provided steps contain a mistake. The `mv` command does not have a `--reply=no` option, which makes the described scenario impossible to replicate as stated. Thus, no exact commands can be given based on the information provided that would reproduce the described issue due to this error in the reported steps.","```bash
touch file1 file2
mv --reply=no file1 file2
ls file1 file2
```",,
,,,,,,,,,,,,,,,,"```bash
touch file1 file2
mv --reply=no file1 file2
ls file1 file2
```","touch file1 file2
mv --reply=no file1 file2
ls file1 file2","touch file1 file2  
mv --reply=no file1 file2  
ls file1 file2",,
,,,,,,,,,,,,,,,,who -r; who -b,"who -r
who -b","who -r
who -b",,
,,,,,,,,,,,,,,,,"```bash
su -l -c ""/bin/bash"" bigbro
```","None

The provided bug report does not specify exact steps with particular files, user configurations, or SELinux policies that would allow someone to recreate the described scenario. The issue appears to be related to a specific environment setup involving SELinux policy enforcement, which is not detailed in the form of executable commands or test cases. Therefore, based on the information given, it's not possible to provide a precise command or set of commands to reproduce this bug.","```bash
su -l -c '/home/bigbro/bb/runbb.sh start >/dev/null' bigbro
```",,
,,,,,,,,,,,,,,,,"```bash
df -k
```","None

The provided Bugzilla report does not contain specific commands or a detailed test case that can be directly executed to reproduce the described issue. The steps listed are high-level and describe the installation of FC4 caching nameserver and issuing `df -k` as a non-root user, but do not provide precise instructions or commands on how to set up the environment to consistently reproduce the ""Permission denied"" error associated with accessing `/var/named/chroot/proc`.",df -k,,
,,,,,,,,,,,,,,,,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,LANG=de_DE.UTF-8 /usr/bin/who -Hliw,,
,,,,,,,,,,,,,,,,"```bash
su news -c '/usr/lib/news/bin/makedbz -i -o'
```",None,None,,
,,,,,,,,,,,,,,,,ls -Z,"None

The provided Bugzilla entry does not contain a precise command or test case that can be executed to reproduce the described behavior. The Steps to Reproduce only mention running `""ls -Z""` on a non-SE machine but do not specify how to set up such an environment, nor what error message should be observed as part of the bug's manifestation.",None,,
,,,,,,,,,,,,,,,,"```
basename
```","None

The provided bug report does not specify a clear set of steps or commands that can be executed to reliably reproduce the described issue with coreutils binaries (such as `basename`, `ls`) experiencing segmentation faults after running a specific command (`Prodb` from Progress DB 9.1D09). The report indicates severe issues related to user permissions and system utilities failing, which likely involve complex interactions beyond simple commands that can be directly tested.",None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
alias grep='grep --color'
echo $GREP_COLOR
grep Fedora /etc/issue
```","None

The provided steps do not include setting up the alias and the environment variable necessary to observe the expected behavior of color highlighting. The bug description indicates an expectation for ""Fedora"" to be highlighted red but does not specify how to set this up (e.g., setting `GREP_COLOR` or establishing the alias). Without these additional setup steps, the command alone is insufficient to reproduce the described issue.",alias grep='grep --color'; export GREP_COLOR='1;31'; grep Fedora /etc/issue,,
,,,,,,,,,,,,,,,,"```bash
echo ""SkyttÃ¤"" | iconv -f utf-8 -t iso-8859-1 | unexpand | iconv -f iso-8859-1 -t utf-8
```","echo SkyttÃÂ¤ \
| iconv -f utf-8 -t iso-8859-1 \
| unexpand \
| iconv -f iso-8859-1 -t utf-8",echo SkyttÃÂ¤ | iconv -f utf-8 -t iso-8859-1 | unexpand | iconv -f iso-8859-1 -t utf-8,,
,,,,,,,,,,,,,,,,"```bash
su - root; ausearch -m tty
```",None,su - root,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```
ls --help
ls -s file.txt
ls -s --block-size=4096 file.txt
```",None,None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, you would need a system with Linux and a USB hard disk containing one FAT32 partition. Assuming you have such a setup, here are the steps based on the provided information:

1. Plug in your 250GB (or similar size) USB Hard Disk.
2. Ensure it's recognized by the system and has a FAT32 partition.
3. Mount the partition to a directory like `/media/LACIE` with appropriate options (as shown in `/etc/fstab`: `vfat` type, `pamconsole,exec,noauto,iocharset=utf8,managed` options).
4. Fill approximately half of the disk space on the FAT32 partition with files.
5. Run `df -kT /media/LACIE` to check the disk usage reported by `df`.
6. Compare this output with the result from `du -sk /media/LACIE`, which should give a more accurate measurement of used space.

The exact commands based on the provided scenario would be:
```bash
# Assuming /dev/ubb1 is your USB drive's FAT32 partition
sudo mount /dev/ubb1 /media/LACIE

# Fill half of the disk space (example, filling with zeros)
dd if=/dev/zero of=/media/LACIE/fill bs=1M count=110000

# Check disk usage with df and du
df -kT /media/LACIE
du -sk /media/LACIE
```
This setup should help in reproducing the discrepancy between `df` and `du` commands as described in the bug report.",None,None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, you can follow these steps with a similar setup (a FAT32 partition on a USB drive):

1. Create a FAT32 partition on a large USB drive.
2. Mount the partition.
3. Place a significant amount of data on the partition (around 110GB in this case).
4. Run `df -kT /mount/point` to check the disk usage.
5. Run `du -sk /mount/point` for comparison.

Specific commands based on the provided information:

```bash
# Assuming /dev/usb_device is your USB drive and /media/mount_point is where it's mounted
mkfs.vfat /dev/usb_device1
mkdir /media/mount_point
echo ""/dev/usb_device1 /media/mount_point vfat defaults 0 0"" >> /etc/fstab
mount /media/mount_point
# Copy around 110GB of data to /media/mount_point
df -kT /media/mount_point
du -sk /media/mount_point
```

Replace `/dev/usb_device1` and `/media/mount_point` with your actual device and mount point. Ensure you have the necessary permissions (likely requiring root access) to execute these commands, especially for creating a filesystem on a device and modifying `/etc/fstab`. 

Please note, manipulating disk partitions and file systems can lead to data loss if not done correctly. Proceed with caution and ensure you're working with devices and data that can be safely altered or erased.","None

The provided Bugzilla entry does not include specific steps or commands that can be executed to reproduce the issue in a controlled environment. While it describes the conditions under which the bug occurs and provides some context with commands related to disk usage (`df`, `du`), it lacks detailed, actionable instructions on how to replicate the problem systematically.",None,,
,,,,,,,,,,,,,,,,"```bash
usermod -e 1990-01-01 smith
su - smith
usermod -e 2010-01-01 smith
su - smith
```","None

The provided bug report describes a behavior where an account expiration is preventing a user from logging in via `su`, even for the root user (UID=0). However, it does not provide specific steps or commands that can be directly used as a reproducible test case within the description itself. The issue seems to revolve around expected versus actual behavior of `su` when dealing with account expiration and root privileges, but without additional context or environment setup details, there isn't an explicit command or set of commands provided for reproduction purposes.",None,,
,,,,,,,,,,,,,,,,"To reproduce this bug, you would attempt to rebuild the `coreutils` package against Rawhide using a version of GCC that is presumably causing the issue (implied to be gcc4). The command to attempt the rebuild could vary depending on how one typically builds packages in their environment. However, a common approach might involve using `rpmbuild` or directly compiling the source with the problematic version of GCC.

Given the information provided and assuming a RPM-based system, a possible command sequence might look something like this:

1. Ensure you have the necessary development tools installed.
2. Download the `coreutils` source RPM for the specified version (`coreutils-5.2.1-41`).
3. Attempt to rebuild it with GCC4.

A simplified example of how one might attempt this could be:

```bash
# Install necessary build tools if not already installed
sudo dnf install -y rpm-build gcc

# Download the source RPM (the exact command may vary based on your system and repositories)
sudo dnf download --source coreutils-5.2.1-41

# Extract the source (assuming it downloads to ~/rpmbuild/SRPMS/)
rpm -ivh ~/rpmbuild/SRPMS/coreutils-5.2.1-41.src.rpm

# Change into the SPECS directory
cd ~/rpmbuild/SPECS/

# Attempt to rebuild with specific GCC version, assuming you have gcc4 installed
rpmbuild -ba --define ""_gcc_version 4"" coreutils.spec
```

Please note:
- This sequence assumes a lot about your environment and how packages are managed (e.g., using `dnf` for package management).
- The actual steps can vary significantly based on the Linux distribution, its version, and the specific package manager in use.
- Without more details about the exact environment where this bug is being reported, it's challenging to provide a precise command sequence.

Given these caveats and the lack of detailed, step-by-step instructions for reproducing the bug directly from the bug description, a fully accurate reproduction command or test case cannot be provided without making several assumptions. However, the general idea involves attempting to rebuild `coreutils` with the specified version against Rawhide using GCC4.

Therefore, while an exact command can be proposed based on typical package building procedures, its applicability depends heavily on the specifics of the environment in which it's being executed.",None,None,,
,,,,,,,,,,,,,,,,cp -lL /lib/libc.so.6 /tmp; ls -l /tmp/libc.so.6,"cp -lL /lib/libc.so.6 /tmp
ls -l /tmp/libc.so.6",cp -lL /lib/libc.so.6 /tmp && ls -l /tmp/libc.so.6,,
,,,,,,,,,,,,,,,,"```bash
gnome-console
su
<password>
su user
su
```",None,"```bash
gnome-terminal -- bash -c ""su; sleep 10; su user; sleep 10; su""
```

This command opens a gnome terminal and runs a sequence of `su` commands with delays in between to simulate the steps described in the bug report.",,
,,,,,,,,,,,,,,,,"su - 
touch file1 file2
cp -f file1 file2","su -
touch file1 file2
cp -f file1 file2","```bash
su -
touch file1 file2
cp -f file1 file2
```",,
,,,,,,,,,,,,,,,,su root -c /bin/sh,su root -c /bin/sh,su root -c /bin/sh,,
,,,,,,,,,,,,,,,,"```bash
mkdir dir1
mkdir dir2
mkdir dir3
touch dir1/file1
touch dir2/file1
touch dir3/file1
rm -rv *
```","mkdir dir1
mkdir dir2
mkdir dir3
touch dir1/file1
touch dir2/file1
touch dir3/file1
rm -rv *","```bash
mkdir dir1 dir2 dir3
touch dir1/file1 dir2/file1 dir3/file1
rm -rv *
```",,
,,,,,,,,,,,,,,,,"```bash
xterm -e ""ls""
screen
ls
```","```bash
xterm -e bash -c ""ls; screen -dmS test_screen bash -c \""sleep 1; ls\""; sleep 2""
```

Note: This command initiates an `xterm` session where it runs `ls`, starts a `screen` session that also runs `ls`, and waits to observe the difference in color settings between the two environments. You would need to manually compare the output colors in each terminal instance (`xterm` vs `screen`).","```
xterm -e bash -c ""ls; screen -dmS test; screen -r test -X stuff 'ls\n'""
```",,
,,,,,,,,,,,,,,,,"```bash
LC_ALL=zh_CN ls -l
```","export LANG=zh_CN.UTF-8  
cd /etc  
ls -l | tail","```bash
LC_TIME=zh_CN.UTF-8 ls -l /etc | tail
```",,
,,,,,,,,,,,,,,,,"```bash
echo -e '.b\na\nc' | sort
```","echo 'a
.b
c' | sort","echo 'a
.b
c' | sort",,
,,,,,,,,,,,,,,,,"```bash
# Mount a vfat filesystem
sudo mount -t vfat /dev/hdb5 /mnt/share -o users,umask=000,iocharset=iso8859-1,codepage=850

# Create a file in an ext3 filesystem
touch ~/file.txt

# Try to move the file to the destination
mv ~/file.txt /mnt/share/

# Try to overwrite an existing file
cp ~/file.txt /mnt/share/
mv ~/file.txt /mnt/share/

# Try moving from vfat to ext3 with security context issues
echo ""ola"" > /mnt/share/file.txt
cp /mnt/share/file.txt .
mv /mnt/share/file.txt .
```","Mount a vfat filesystem:
```sh
mount -t vfat /dev/hdb5 /mnt/share
```

Create a file in an ext3 filesystem:
```sh
touch /path/to/ext3/filesystem/file.txt
```

Try to move the file to the destination:
```sh
mv /path/to/ext3/filesystem/file.txt /mnt/share/folder/
```","```bash
mount /dev/hdb5 /mnt/share -t vfat -o users,umask=000,iocharset=iso8859-1,codepage=850
echo ""test"" > file.txt
mv file.txt /mnt/share/folder/
```",,
,,,,,,,,,,,,,,,,"touch --help | grep -E ""\-(B|F)""","None

The provided bug description indicates an absence of expected options (`-B` and `-F`) in the output of `touch --help`. However, it does not describe a functional failure or provide steps that result in an error or incorrect behavior beyond checking for these options' presence in the help output. Therefore, there isn't a specific command or test case presented that reproduces a typical software bug (like a crash or wrong functionality) but rather highlights a missing feature or option documentation.","touch --help | grep -E ""\-(B|F)""",,
,,,,,,,,,,,,,,,,"```bash
#!/bin/tcsh -e
echo ""Hi""
```","```bash
echo '#!/bin/tcsh -e' > test_script.csh
echo 'echo ""Hi""' >> test_script.csh
chmod +x test_script.csh
./test_script.csh
```","```bash
#!/bin/tcsh -e
echo ""Hi""
```",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
screen
su -
su - grog
screen
```
Note: Replace ""grog"" with any existing normal user account. The goal is to simulate changing users as described in the bug report. 

Alternatively, using a more general and explicit test case:

```bash
# As a normal user
screen

# Switch to root
su -

# Switch to another normal user (replace 'username' with an actual username)
su - username

# Run screen again
screen
```
Please ensure you have the necessary permissions and user accounts set up before running these commands.","```
su - someuser
screen
```","```
su -
su - grog
screen
```",,
,,,,,,,,,,,,,,,,df -m; df --help,None,"df -m  
df --help",,
,,,,,,,,,,,,,,,,"To reproduce this bug, you would need to attempt to compile the `coreutils-5.2.1-26` package from Redhat Fedora Core 3 Test 3, specifically focusing on the `fold.c` file. The command to reproduce the warning about a missing return statement at the end of the non-void function ""fold_text"" could be as follows:

```bash
gcc -c fold.c
```

Or more specifically, to trigger the exact warning mentioned (warning #1011), if you're using an Intel compiler (since the warning number suggests it might not be GCC):

```bash
icc -c fold.c
```

However, since the specific compiler used isn't clearly identified in the bug description but mentions ""warning #1011"" which is more typical of Intel's compiler (icc) warnings, and assuming `fold.c` contains the function `fold_text` without a return statement at its end, the most directly relevant command based on standard compilation processes would be:

```bash
gcc -c -Wall fold.c
```

This command attempts to compile `fold.c` with GCC, using the `-Wall` flag to enable all warnings, which should include warnings about missing return statements in non-void functions.",None,None,,
,,,,,,,,,,,,,,,,df,"df

fdisk -l

mount",df,,
,,,,,,,,,,,,,,,,tail -1 --quiet *.txt,tail -1 --quiet *.txt,tail -1 --quiet *.txt,,
,,,,,,,,,,,,,,,,"```
ls -Z / 
ls -Zl /
```","ls -Z /proc
ls -Zl /proc","ls -Z /  
ls -Zl /",,
,,,,,,,,,,,,,,,,"```bash
dd if=/dev/zero of=/dev/null& pid=$!
kill -USR1 $pid; sleep 1; kill $pid
```

Alternatively, using the exact steps from the bug report:

```bash
dd if=/dev/sda3 of=/dev/sdb3 &
ps -ef | grep dd
# assume pid is collected as 3007
kill -USR1 3007; sleep 1; kill 3007
```","dd if=/dev/sda3 of=/dev/sdb3 &
pid=$!
kill -USR1 $pid; sleep 1; kill $pid","```bash
dd if=/dev/sda3 of=/dev/null &
pid=$!
kill -USR1 $pid; sleep 1; kill $pid
```",,
,,,,,,,,,,,,,,,,"```
TERM=konsole
dircolors --sh /etc/DIR_COLORS
echo $LS_COLORS
```","```sh
echo $TERM
TERM=konsole
dircolors --sh /etc/DIR_COLORS
LS_COLORS=''
export LS_COLORS
```","```bash
echo $TERM && dircolors --sh /etc/DIR_COLORS
```",,
,,,,,,,,,,,,,,,,"```bash
export LANG=zh_CN.GB18030
export LC_CTYPE=zh_CN.GB18030
export LC_NUMERIC=""zh_CN.GB18030""
export LC_TIME=en_US.UTF-8
export LC_COLLATE=""zh_CN.GB18030""
export LC_MONETARY=""zh_CN.GB18030""
export LC_MESSAGES=en_US.UTF-8
export LC_PAPER=""zh_CN.GB18030""
export LC_NAME=""zh_CN.GB18030""
export LC_ADDRESS=""zh_CN.GB18030""
export LC_TELEPHONE=""zh_CN.GB18030""
export LC_MEASUREMENT=""zh_CN.GB18030""
export LC_IDENTIFICATION=""zh_CN.GB18030""
echo ""1 abc
2 def
3 ghi
4 jkl"" > file1
echo ""a 123
b 456
c 789
d 248"" > file2
cut -d "" "" -f 1 file1 file2
```","None

The provided steps in the Bugzilla report contain instructions but do not present a single command that could be directly executed to reproduce the issue as requested. The process described involves setting up locale settings and running `cut` with specific parameters, which cannot be simplified into a single reproducible command without additional context or scripting to set the environment correctly.","```bash
cut -d "" "" -f 1 file1 file2
```",,
,,,,,,,,,,,,,,,,"1. Install FC2 with NIS support.
2. Open a terminal and login as a normal user.
3. Run the command: `su` 
4. Enter the correct root password when prompted.",None,"```bash
su
```

This command is used to attempt switching to the root user with the provided password, which is the core action described in the bug report that leads to the issue.",,
,,,,,,,,,,,,,,,,"```bash
TERM=gnome bash -c 'source /etc/profile.d/colorls.sh; alias'
```","None

The provided bug description does not include specific commands or a test case that can be executed to reproduce the described behavior directly related to the coreutils package. The issue described revolves around the sourcing of `/etc/profile.d/colorls.sh` and the conditions under which aliases are (or aren't) defined, but no direct command is given for reproducing this specifically within a coreutils context.",None,,
,,,,,,,,,,,,,,,,"```bash
su
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""b      0
b     88
a      0
a  17454
a   2338"" | sort -k1,1 -k2bn,2
```","data=""b      0
b     88
a      0
a  17454
a   2338""

echo ""$data"" | sort -k1,1 -k2bn,2","```bash
echo -e ""b      0\nb     88\na      0\na  17454\na   2338"" | sort -k1,1 -k2bn,2
```",,
,,,,,,,,,,,,,,,,"```bash
ls --format=vertical
```","None

The provided information indicates that recompiling from the source resolved the issue, suggesting that the problem was likely due to patches or modifications in the distribution's version of `ls`. Therefore, there is no simple command or test case available to reproduce the bug without considering the specific environment and potential patches applied by Fedora Core 2.",None,,
,,,,,,,,,,,,,,,,"```bash
mount /dev/hda7 /mnt/hda7
chroot /mnt/hda7 /bin/bash
```","mount /dev/hda7 /mnt/hda7  
chroot /mnt/hda7 /bin/bash","```bash
mount /dev/hda7 /mnt/hda7
chroot /mnt/hda7 /bin/bash
```",,
,,,,,,,,,,,,,,,,"```bash
echo ""OPTIONS=-F"" >> ~/.dir_colors; ls
```","None

The provided steps describe how to set up a scenario where a user expects their custom options in `OPTIONS` of `/etc/DIR_COLORS` to be used by `ls`. However, these are setup instructions rather than specific commands that can directly trigger and demonstrate the core issue with the `coreutils` package itself. The problem lies within the script `/etc/profile.d/colorls.sh`, which does not utilize the `OPTIONS` variable from `/etc/DIR_COLORS`. Therefore, there isn't a direct command to reproduce this as it relies on the interaction between configuration files and scripts rather than a specific coreutil command or behavior.",None,,
,,,,,,,,,,,,,,,,"```bash
su -l; echo $XAUTHORITY; exit
xauth &
su -l; echo $XAUTHORITY; exit
```","1. su -l
2. echo $XAUTHORITY; exit
3. In another user window, run xauth and leave it running.
4. su -l
5. echo $XAUTHORITY; exit","```
1. su -l
2. echo $XAUTHORITY; exit
3. xauth &  # Run in another user window and leave it running.
4. su -l
5. echo $XAUTHORITY; exit
```",,
,,,,,,,,,,,,,,,,"```bash
du -h /var/log/lastlog
```",du -h /var/log/lastlog,du -h /var/log/lastlog,,
,,,,,,,,,,,,,,,,ls -lZ,ls -lZ /root,ls -lZ /root,,
,,,,,,,,,,,,,,,,"```bash
rpm -e --nodeps bison
rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec
```","None

The provided Bug Description describes a dependency issue for building the coreutils package rather than an operational bug of an existing command or tool within the coreutils suite that can be directly tested with a shell command. The steps described are specific to reproducing a build error, not a runtime or user-space issue that could be expressed as a simple test case involving standard Linux commands like `ls`, `cp`, etc.",None,,
,,,,,,,,,,,,,,,,"```
cd /bin
ls --format=single-column
```","cd /bin
ls --format=single-column","```
ls --format=single-column
```",,
,,,,,,,,,,,,,,,,"```bash
mkdir test
cd test
touch a b
mv -i --reply=no a b
ls
```","touch a b
mv -i --reply=no a b
ls",mv -i --reply=no a b,,
,,,,,,,,,,,,,,,,"```
LANG=ja_JP.UTF-8 ls -l
```",LANG=ja_JP.UTF-8 ls -l,ls -l --time=full-iso --locale=ja_JP.UTF-8,,
,,,,,,,,,,,,,,,,"```bash
mkdir /tmp/nfsmount
sudo mount -t nfs4 localhost:/ /tmp/nfsmount
ln -s /tmp/nfsmount/x /tmp/y
sudo umount /tmp/nfsmount
rm /tmp/y
```
Or alternatively:
```bash
touch x
rm x
```
However, the first test case is more relevant to the actual bug described. 

To make it hang, you would need to replace `localhost` with an actual NFS server that you can power off or disconnect from the network after creating the symlink. 

Here's a more detailed version:
```bash
# Set up an NFS server on a different machine (e.g., nfsserver)
# Create a directory on the NFS server and export it via NFS

# On the client machine:
sudo mount -t nfs4 nfsserver:/exported/dir /tmp/nfsmount
ln -s /tmp/nfsmount/x /tmp/y

# Power off or disconnect the NFS server

rm /tmp/y  # This should hang
```","Mount a directory off an NFS server without any special options (so no -ointr, for example)
Make a symlink from somewhere outside that mountpoint to somewhere inside that mountpoint.
Power off the NFS server
rm <symlink_name>","None

The provided steps involve setting up an NFS mount and power cycling the server, which is not easily replicable in a standard environment without specific hardware and network configurations. Therefore, there isn't a straightforward command or test case that can be executed to consistently reproduce the bug in all environments.",,
,,,,,,,,,,,,,,,,"```bash
touch one
ls -l one
ln -s one two
ls -l
chmod u+s two
ls -l
chown mysql two
ls -l
```","None

The provided description does not specify a deviation from expected behavior that constitutes a ""bug"" in coreutils functionality. The sequence of operations describedâcreating a file, making it setuid, creating a symbolic link to it, and changing ownership on the symlinkâdoes not inherently describe an unexpected or erroneous state in terms of coreutils commands like `chmod`, `chown`, or `ln`. The ""bug"" seems to revolve around expectations about how filesystem permissions should propagate through symlinks, which is not typical behavior according to standard UNIX/Linux conventions. As such, there isn't a clear command sequence provided that demonstrates a reproducible software defect within the coreutils package itself based on this report alone.",None,,
,,,,,,,,,,,,,,,,rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec (with autoconf version lower than 2.58 and automake version lower than 1.8),rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec,rpmbuild -bb /usr/src/redhat/SPEC/coreutils.spec,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
echo ""1:Ben
2:Mike
3:Scott"" > file1
echo ""1:Beer
2:Coke
3:Whisky"" > file2
join -t ':' file1 file2
```","```bash
echo -e ""1:Ben\n2:Mike\n3:Scott"" > file1
echo -e ""1:Beer\n2:Coke\n3:Whisky"" > file2
join -t ':' file1 file2
```",join -t ':' file1 file2,,
,,,,,,,,,,,,,,,,"```bash
su - another_user
exit
```
Note: Replace `another_user` with an actual username on your system. Also, make sure that pam_selinux is enabled in /etc/pam.d/su for this test case to work.","None

The provided Bugzilla report describes a complex interaction issue between `su`, PAM, and SELinux, which requires specific configurations and steps that aren't summarized into a single command or simple test case within the description given. The description outlines a situation where the security context handling by PAM modules during session opening and closing is incorrect due to the timing of calls made by `su`. To reproduce this issue would require setting up an environment with SELinux enabled, configuring specific PAM settings for `su`, and using `su` in a way that triggers the described behavior. However, since the description does not provide a concise command or test case, it's marked as ""None"" here.","```bash
su - another_user
exit
```",,
,,,,,,,,,,,,,,,,"su - rpm -s /bin/bash -c ""ls /""","su - rpm -s /bin/bash -c ""ls /""","su - rpm -s /bin/bash -c ""ls /""",,
,,,,,,,,,,,,,,,,"```
ls -lZ /
```","None

The provided bug report suggests running SELinux on a machine and executing `ls -lZ /` as a user_r user to reproduce the issue. However, this is not a fully self-contained command or test case because it requires specific setup (SELinux configuration and role) that cannot be directly executed without these prerequisites being met in an environment. Therefore, there isn't a direct, simple command provided for reproduction that can be run universally across all environments to verify the issue as described.","```bash
ls -lZ /
```",,
,,,,,,,,,,,,,,,,"```bash
df /home/olchansk
```",None,df /home/olchansk,,
,,,,,,,,,,,,,,,,"```bash
mkdir source destination
touch source/file1 source/file2
touch destination/file1
mv -i --reply=no source/* destination/
```","None

The provided steps to reproduce the issue are incomplete and do not specify all necessary actions to recreate the scenario described (such as creating files in both source and destination directories). Therefore, based on the information given, a full and precise command sequence or test case cannot be determined.","```bash
mv -i --reply=no * /some/directory
```",,
,,,,,,,,,,,,,,,,"```bash
rpm -i coreutils-5.2.1-3.src.rpm
rpm -qilv coreutils-5.2.1-3
ls /bin/kill
ls /usr/bin/kill
```","None

The provided Bug Description does not contain a simple command or test case that can be executed to reproduce the issue without going through the steps of rebuilding and installing an RPM package, which is more complex than a straightforward command or test case. Therefore, based on the given instructions, the answer is None.",None,,
,,,,,,,,,,,,,,,,"```bash
mkdir ~/k
cd ~/k
ln -s / foo
rm foo/
rm -f foo/
rm -rf foo/
rm -r foo/
rm -r foo
```","mkdir ~/k  
cd ~/k  
ln -s / foo  

rm foo/  
rm -f foo/  
rm -rf foo/  
rm -r foo/  
rm -r foo","mkdir ~/k  
cd ~/k  
ln -s / foo  
rm -f foo/  
rm -rf foo/  
rm -r foo/  
rm -r foo",,
,,,,,,,,,,,,,,,,"```bash
su scott
```","None

The provided information describes an issue related to SELinux (Security-Enhanced Linux) access control rather than a coreutils bug. The error messages indicate that there are AVC (Access Vector Cache) denied entries in the audit log when trying to perform `getattr` operations, likely due to security policies configured on the system. Without specific details about how this relates directly to any command from the GNU Core Utilities package or a clear test case provided by the reporter, it's not possible to determine an exact command or set of commands that would reproduce this issue as described.",None,,
,,,,,,,,,,,,,,,,"```
su - 
```",None,su -,,
,,,,,,,,,,,,,,,,"```bash
comm -12 one two
```","None

The provided steps describe how to reproduce the issue but do not provide actual content for the files ""one"" and ""two."" Without specific contents of these files, it's not possible to write a command that would definitely reproduce the described behavior. Therefore, no exact reproducible command or test case can be provided based on the given information.",None,,
,,,,,,,,,,,,,,,,"```bash
su -
```",None,None,,
,,,,,,,,,,,,,,,,"```
LANG=ja_JP.UTF-8 ls -l
```",LANG=ja_JP.UTF-8 ls -l,"```bash
LANG=ja_JP.UTF-8 ls -l
```",,
,,,,,,,,,,,,,,,,"```bash
./configure && make && checkinstall
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
ls -l / | head -2
ls -l /etc | head -2
```",None,"ls -l /  
ls -l /etc",,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
rpmbuild --rebuild coreutils-5.2.0-8.src.rpm
```","None

The provided Bug Description does not contain a specific command or test case that can be directly executed to reproduce the issue. The steps given are about rebuilding coreutils from source RPM with SELinux enabled and noting where the failure occurs (tests/du/deref-args), but they do not provide a precise command or input needed to trigger the bug in an isolated manner for testing purposes.",rpmbuild --rebuild coreutils-5.2.0-8.src.rpm,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
status=$(ls nothing)
echo $?
```",status=`ls nothing`; echo $status,None,,
,,,,,,,,,,,,,,,,"sort -M <<EOF
Feb
Jan
EOF","sort -M <<EOF
Feb
Jan
EOF","sort -M <<EOF
Feb
Jan
EOF",,
,,,,,,,,,,,,,,,,"```bash
chown user.group file
chown user:group file
```","None

The provided bug report does not include a specific command or test case that can be used to reproduce the issue directly. The report mentions expected behaviors and implications but lacks concrete steps for reproduction.",chown user.group file,,
,,,,,,,,,,,,,,,,ls -al non_existent_file_name,ls -al xx,ls -al xx,,
,,,,,,,,,,,,,,,,"```bash
rpm -ql coreutils | grep /usr/bin/kill
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
mkdir a b
ln -s a c
ln -sf b c
ls -l c
```","mkdir a b
ln -s a c
ln -sf b c","```bash
mkdir a b && ln -s a c && ln -sf b c
```",,
,,,,,,,,,,,,,,,,"```bash
chroot . /usr/bin/id
```",None,None,,
,,,,,,,,,,,,,,,,None,None,None,,
,,,,,,,,,,,,,,,,"```bash
touch /tmp/empty
mv /tmp/empty /usr
```","touch /tmp/empty
mv /tmp/empty /usr","```bash
touch /tmp/empty
mv /tmp/empty /usr
```",,
,,,,,,,,,,,,,,,,"1. echo ""<NAME>"" >> /etc/hosts
2. hostname <NAME>
3. reboot
4. hostname","None

The steps provided in the bug report describe a sequence of actions rather than specific commands that can directly and easily be used as a test case to reproduce the bug. While it outlines what needs to be done (editing `/etc/hosts`, using `hostname` command, rebooting), these are procedural instructions and not direct commands one could copy and paste to reproduce the issue in an automated or straightforward manner.",None,,
,,,,,,,,,,,,,,,,ldd cat,ldd cat,ldd cat,,
,,,,,,,,,,,,,,,,"```bash
screen -d -m bash -c ""ll""
```","```
login as root on VT1; screen; ll
``` 

Note: The command provided assumes that you are able to perform a login as root and use `screen`. If a more automated script is needed for testing purposes, additional steps might be necessary which would require scripting or manual intervention depending on the environment.","```bash
screen
ll
```",,
,,,,,,,,,,,,,,,,"```bash
su - hans
```","None

The provided steps are more of a setup and do not directly translate into simple command-line instructions that can be executed to reproduce the issue in an isolated environment. The problem seems to be related to LDAP configuration, PAM settings, and how these interact with the `su` command on a Red Hat machine. This kind of bug typically requires a specific setup involving LDAP server configuration, client machine configuration, and user accounts, which cannot be succinctly summarized into simple commands for reproduction.",None,,
,,,,,,,,,,,,,,,,"```bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done
```","#!/bin/bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done

#!/bin/bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -2
done","```bash
for i in $(seq -w 4052 1 4053) ; do 
  echo -n ""$i: "" ; seq -w 0 10000 | fmt -w $i | head -1 | wc
done
```",,
,,,,,,,,,,,,,,,,"```bash
alias ls='ls --color=tty'
mkdir testdir
touch testdir/{1..1000}
ls testdir &
sleep 1
kill $!
echo ""Hello World""
```","None

The bug description provides an explanation of the issue but does not specify exact commands or a precise test case that can be executed to reliably reproduce the problem in a testing environment. While we understand what the user experienced and under what conditions, there isn't a direct, step-by-step command sequence provided for reproducing it.","```bash
alias ls='ls --color=tty'
mkdir large_directory && seq 1000 > large_directory/file_&& for i in {1..1000}; do touch large_directory/file_$i; done
cd large_directory
ls &
kill $!
echo ""This text should not be colored""
```",,
,,,,,,,,,,,,,,,,"df -a 
df -l","df -a
df -l","df -a  
df -l",,
,,,,,,,,,,,,,,,,"```bash
su -l
echo $PATH

# As opposed to:
login root
echo $PATH
```","su -l  
echo $PATH  

login from a terminal as root  
echo $PATH","```
su -l
echo $PATH

login from a terminal as root
echo $PATH
```",,
,,,,,,,,,,,,,,,,"```bash
echo -e ""3.456\n34.500\n345.600"" | LC_ALL=en_US.utf8 sort
```",echo 3.456 > /tmp/foo; echo 34.500 >> /tmp/foo; echo 345.600 >> /tmp/foo; LC_ALL=en_US.utf8 sort /tmp/foo,"```sh
echo 3.456 > /tmp/foo; echo 34.500 >> /tmp/foo; echo 345.600 >> /tmp/foo; LC_ALL=en_US.utf8 sort /tmp/foo
```",,
,,,,,,,,,,,,,,,,"```bash
csh -c 'test -f ""~/.dircolors.$TERM"" && set COLORS=""~/.dircolors.$TERM""'
```",None,"```bash
test -f ""~/.dircolors.$TERM"" && set COLORS=""~/.dircolors.$TERM""
ls
```",,
,,,,,,,,,,,,,,,,"```bash
mkfifo /tmp/aaa /tmp/aab
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &
sort -m -n /tmp/aaa /tmp/aab >/dev/null &
```","mkfifo /tmp/aaa /tmp/aab
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &
sort -m -n /tmp/aaa /tmp/aab >/dev/null &","mkfifo /tmp/aaa /tmp/aab  
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aab &  
awk 'BEGIN{for(i=0;i<10000000;i++) print i;}' >> /tmp/aaa &  
sort -m -n /tmp/aaa /tmp/aab >/dev/null &",,
,,,,,,,,,,,,,,,,"```bash
cat file_with_accented_words.txt | sort -u
```
Or more specifically, to check for the disappearance of accented words:
```bash
echo ""jÃºnio"" > file_with_accented_words.txt; cat file_with_accented_words.txt | LC_ALL=pt_BR.UTF-8 sort -u
```",None,None,,
,,,,,,,,,,,,,,,,cat foo.txt | sort -M,cat foo.txt | sort -M,cat foo.txt | sort -M,,
,,,,,,,,,,,,,,,,"```bash
mkdir -p /path1/foo /path2
ln -s /path1/foo/ /path2/bar
cd /path2/bar
ls ..
cd .. 
ls
```","None

The provided steps describe the behavior that reproduces the bug but do not encapsulate it in a single command or test case as requested. The sequence involves multiple steps and setup which cannot be simplified into one command.","```bash
cd /path2/bar && ls ..
```",,
,,,,,,,,,,,,,,,,"1. man dd
2. info dd","None

The provided steps describe a scenario where the documentation for `dd` is incorrectly linked in the `info` system, pointing to `ddd` instead of `dd`. However, these steps are more about verifying misconfiguration or a mistake in documentation rather than a functional bug within coreutils itself. The issue described does not pertain to the execution or functionality of any command-line utilities but rather to the availability and linking of their manual pages.

Therefore, no specific command or test case that affects the actual operation of coreutils can be derived from this description. The steps provided are more of a diagnostic procedure for checking the documentation setup than a means to reproduce a functional bug within `dd` or another tool included in the coreutils package.",info dd,,
,,,,,,,,,,,,,,,,"```bash
sort -k1,1n -k3,3n file.txt
```","None

The provided bug description outlines the conditions under which the issue occurs but does not provide an actual file or specific content that can be used to create a test case for reproduction. While it describes how sorting behaves with certain options and environment variables, without the exact file content or a way to generate similar data, we cannot produce a concrete command or test case to reproduce the bug.","sort -k1,1n k3,3n",,
,,,,,,,,,,,,,,,,"```bash
ls -Ld /usr/local/mysql
ls -Lld /usr/local/mysql
```",None,"ls -Ld {some link}  
ls -Lld {some link}",,
,,,,,,,,,,,,,,,,"1. man sort
2. info sort 
3. info coreutils","man sort  
info sort",info sort,,
,,,,,,,,,,,,,,,,"```
LC_ALL=zh_CN.GB18030 ls -l
```",None,None,,
,,,,,,,,,,,,,,,,"```bash
where echo | head -1
which echo
```","None

The provided steps do not directly relate to a coreutils bug but rather describe an issue with aliases and the `which` command in a C shell environment. These steps indicate discrepancies between expected and actual outputs for aliased commands but do not pinpoint a specific bug within the coreutils package itself, which typically includes tools like `ls`, `cp`, `rm`, etc., without direct mention of alias handling or shell-specific behaviors.","```
which echo
whereis echo | awk '{print $2}'
```",,
,,,,,,,,,,,,,,,,"```bash
source /etc/profile.d/colorls.csh
rpm -qf `which ls`
```","None

The provided Bug Description explains a potential issue caused by an alias set in `/etc/profile.d/colorls.csh`, but it does not provide a specific command or test case that can be used to directly reproduce the described problem within a controlled environment. The description outlines the context and the consequence (problems with commands like `rpm -qf \`which ls\``) but lacks precise steps or conditions for reproducing the bug in an isolated manner, which would typically include setting up the alias and then running a command that demonstrates the conflict.","```bash
rpm -qf `which ls`
```",,
,,,,,,,,,,,,,,,,"```
su
```","None

The issue described seems more related to a misconfiguration of the system's `su` command permissions or possibly a problem with PAM (Pluggable Authentication Modules) configuration rather than being a direct bug in coreutils. The description does not provide enough information specific to coreutils commands like `chown`, `chmod`, etc., which are typical components within the Linux coreutils package. Therefore, there isn't a clear command or test case from coreutils that could be used to reproduce this issue based on the given information.","su -l
# Then type the root password when prompted.",,
,,,,,,,,,,,,,,,,"```bash
date --set=""2003-04-07 00:30:00"" && date --date=yesterday
```","date --set=""Sat Apr 7 01:00:00 EDT 2003""  
date --date=yesterday","```bash
date --set=""2003-04-07 01:00"" && date --date=yesterday
```",,